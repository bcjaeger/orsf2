% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/orsf_predict.R
\name{predict.ObliqueForest}
\alias{predict.ObliqueForest}
\title{Prediction for ObliqueForest Objects}
\usage{
\method{predict}{ObliqueForest}(
  object,
  new_data,
  pred_horizon = NULL,
  pred_type = NULL,
  na_action = "fail",
  boundary_checks = TRUE,
  n_thread = 1,
  verbose_progress = FALSE,
  pred_aggregate = TRUE,
  ...
)
}
\arguments{
\item{object}{(\emph{ObliqueForest}) a trained oblique random forest object (see \link{orsf}).}

\item{new_data}{a \link{data.frame}, \link[tibble:tibble-package]{tibble}, or \link[data.table:data.table]{data.table} to compute predictions in.}

\item{pred_horizon}{(\emph{double}) a value or vector indicating the time(s)
that predictions will be calibrated to. E.g., if you were predicting
risk of incident heart failure within the next 10 years, then
\code{pred_horizon = 10}. \code{pred_horizon} can be \code{NULL} if \code{pred_type} is
\code{'mort'}, since mortality predictions are aggregated over all
event times}

\item{pred_type}{(\emph{character}) the type of predictions to compute. Valid
options are
\itemize{
\item 'risk' : probability of having an event at or before \code{pred_horizon}.
\item 'surv' : 1 - risk.
\item 'chf': cumulative hazard function
\item 'mort': mortality prediction
}}

\item{na_action}{(\emph{character}) what should happen when \code{new_data} contains missing values (i.e., \code{NA} values). Valid options are:
\itemize{
\item 'fail' : an error is thrown if \code{new_data} contains \code{NA} values
\item 'pass' : the output will have \code{NA} in all rows where \code{new_data} has 1 or more \code{NA} value for the predictors used by \code{object}
\item 'omit' : rows in \code{new_data} with incomplete data will be dropped
\item 'impute_meanmode' : missing values for continuous and categorical variables in \code{new_data} will be imputed using the mean and mode, respectively. To clarify,
the mean and mode used to impute missing values are from the
training data of \code{object}, not from \code{new_data}.
}}

\item{boundary_checks}{(\emph{logical}) if \code{TRUE}, \code{pred_horizon} will be
checked to make sure the requested values are less than the maximum
observed time in \code{object}'s training data. If \code{FALSE}, these checks
are skipped.}

\item{n_thread}{(\emph{integer}) number of threads to use while computing predictions. Default is one thread. To use the maximum number of threads that your system provides for concurrent execution, set \code{n_thread = 0}.}

\item{verbose_progress}{(\emph{logical}) if \code{TRUE}, progress messages are
printed in the console. If \code{FALSE} (the default), nothing is printed.}

\item{pred_aggregate}{(\emph{logical}) If \code{TRUE} (the default), predictions
will be aggregated over all trees by taking the mean. If \code{FALSE}, the
returned output will contain one row per observation and one column
for each tree. If the length of \code{pred_horizon} is two or more and
\code{pred_aggregate} is \code{FALSE}, then the result will be a list of such
matrices, with the i'th item in the list corresponding to the i'th
value of \code{pred_horizon}.}

\item{...}{Further arguments passed to or from other methods (not currently used).}
}
\value{
a \code{matrix} of predictions. Column \code{j} of the matrix corresponds
to value \code{j} in \code{pred_horizon}. Row \code{i} of the matrix corresponds to
row \code{i} in \code{new_data}.
}
\description{
Compute predicted values from an oblique random forest. Predictions
may be returned in aggregate (i.e., averaging over all the trees)
or tree-specific.
}
\details{
\code{new_data} must have the same columns with equivalent types as the data
used to train \code{object}. Also, factors in \code{new_data} must not have levels
that were not in the data used to train \code{object}.

\code{pred_horizon} values should not exceed the maximum follow-up time in
\code{object}'s training data, but if you truly want to do this, set
\code{boundary_checks = FALSE} and you can use a \code{pred_horizon} as large
as you want. Note that predictions beyond the maximum follow-up time
in the \code{object}'s training data are equal to predictions at the
maximum follow-up time, because \code{aorsf} does not estimate survival
beyond its maximum observed time.

If unspecified, \code{pred_horizon} may be automatically specified as the value
used for \code{oobag_pred_horizon} when \code{object} was created (see \link{orsf}).
}
\section{Examples}{
Begin by fitting an ORSF ensemble:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{
library(aorsf)

set.seed(329730)

index_train <- sample(nrow(pbc_orsf), 150) 

pbc_orsf_train <- pbc_orsf[index_train, ]
pbc_orsf_test <- pbc_orsf[-index_train, ]

fit <- orsf(data = pbc_orsf_train, 
            formula = Surv(time, status) ~ . - id,
            oobag_pred_horizon = 365.25 * 5)
}\if{html}{\out{</div>}}

Predict risk, survival, or cumulative hazard at one or several times:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{
# predicted risk, the default
predict(fit, 
        new_data = pbc_orsf_test[1:5, ], 
        pred_type = 'risk', 
        pred_horizon = c(500, 1000, 1500))
#>            [,1]       [,2]       [,3]
#> [1,] 0.45320860 0.71688357 0.88729787
#> [2,] 0.03234200 0.07183812 0.14927375
#> [3,] 0.10425422 0.25500251 0.40011524
#> [4,] 0.01869464 0.04162596 0.08060608
#> [5,] 0.01743330 0.02926360 0.06790689

# predicted survival, i.e., 1 - risk
predict(fit, 
        new_data = pbc_orsf_test[1:5, ], 
        pred_type = 'surv',
        pred_horizon = c(500, 1000, 1500))
#>           [,1]      [,2]      [,3]
#> [1,] 0.5467914 0.2831164 0.1127021
#> [2,] 0.9676580 0.9281619 0.8507263
#> [3,] 0.8957458 0.7449975 0.5998848
#> [4,] 0.9813054 0.9583740 0.9193939
#> [5,] 0.9825667 0.9707364 0.9320931

# predicted cumulative hazard function
# (expected number of events for person i at time j)
predict(fit, 
        new_data = pbc_orsf_test[1:5, ], 
        pred_type = 'chf',
        pred_horizon = c(500, 1000, 1500))
#>            [,1]       [,2]       [,3]
#> [1,] 0.63853349 1.22980935 1.73663522
#> [2,] 0.03268688 0.08184222 0.20419113
#> [3,] 0.12730379 0.35165725 0.65852061
#> [4,] 0.01977094 0.05130407 0.10527319
#> [5,] 0.01764267 0.03050562 0.07781852
}\if{html}{\out{</div>}}

Predict mortality, defined as the number of events in the forestâ€™s
population if all observations had characteristics like the current
observation. This type of prediction does not require you to specify a
prediction horizon

\if{html}{\out{<div class="sourceCode r">}}\preformatted{
predict(fit, 
        new_data = pbc_orsf_test[1:5, ], 
        pred_type = 'mort')
#>          [,1]
#> [1,] 78.37691
#> [2,] 20.85114
#> [3,] 37.80350
#> [4,] 13.39838
#> [5,] 10.15932
}\if{html}{\out{</div>}}
}

