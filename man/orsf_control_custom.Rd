% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/orsf_control.R
\name{orsf_control_custom}
\alias{orsf_control_custom}
\title{Custom control of oblique decision trees}
\usage{
orsf_control_custom(beta_fun, ...)
}
\arguments{
\item{beta_fun}{(\emph{function}) a function to define coefficients used
in linear combinations of predictor variables. \code{beta_fun} must accept
three inputs named \code{x_node}, \code{y_node} and \code{w_node}, and should expect
the following types and dimensions:
\itemize{
\item \code{x_node} (\emph{matrix}; n rows, p columns)
\item \code{y_node} (\emph{matrix}; n rows, 2 columns)
\item \code{w_node} (\emph{matrix}; n rows, 1 column)
}

In addition, \code{beta_fun} must return a matrix with p rows and 1 column. If
any of these conditions are not met, \code{orsf_control_custom()} will let
you know.}

\item{...}{Further arguments passed to or from other methods
(not currently used).}
}
\value{
an object of class \code{'aorsf_control'}, which should be used as
an input for the \code{control} argument of \link{orsf}.
}
\description{
Custom control of oblique decision trees
}
\examples{

# fit an oblique random survival forest using random coefficients to
# generate linear combinations of predictor variables. First, define
# a function that supplies the random coefficients:

f <- function(x_node, y_node, w_node) { matrix(runif(ncol(x_node)), ncol=1) }

# next, plug the function into orsf_control_custom(), which is in turn
# passed into orsf():

fit_rando <- orsf(pbc_orsf,
                  Surv(time, status) ~ .,
                  control = orsf_control_custom(beta_fun = f),
                  n_tree = 500)

# last, check the out-of-bag performance.
# it's surprising how well the random approach works.

fit_rando$eval_oobag
}
\seealso{
linear combination control functions
\code{\link{orsf_control_cph}()},
\code{\link{orsf_control_fast}()},
\code{\link{orsf_control_net}()}
}
\concept{orsf_control}
