% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/orsf_update.R
\name{orsf_update}
\alias{orsf_update}
\title{Update orsf objects}
\usage{
orsf_update(object, ..., modify_in_place = FALSE, no_fit = NULL)
}
\arguments{
\item{object}{(\emph{ObliqueForest}) an oblique random forest object (see \link{orsf})}

\item{...}{arguments to plug into \link{orsf} that will be used to define the update.}

\item{modify_in_place}{(\emph{logical}) if \code{TRUE}, \code{object} will be modified.
Be cautious, as modification in place will overwrite existing data. If
\code{FALSE} (the default), \code{object} will be copied and then the modifications
will be applied to the copy, leaving \code{object} unmodified.}

\item{no_fit}{(\emph{logical}) if \code{TRUE}, model fitting steps are defined and
saved, but training is not initiated. The object returned can be
directly submitted to \code{orsf_train()} so long as \code{attach_data} is \code{TRUE}.}
}
\description{
Update orsf objects
}
\examples{

fit <- orsf(pbc_orsf, time + status ~ . -id)

fit_new <- orsf_update(fit, formula = . ~ . - edema, n_tree = 100)


}
