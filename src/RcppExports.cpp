// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// coxph_scale_exported
List coxph_scale_exported(NumericMatrix& x_, NumericVector& w_);
RcppExport SEXP _aorsf_coxph_scale_exported(SEXP x_SEXP, SEXP w_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type w_(w_SEXP);
    rcpp_result_gen = Rcpp::wrap(coxph_scale_exported(x_, w_));
    return rcpp_result_gen;
END_RCPP
}
// coxph_fit_exported
List coxph_fit_exported(NumericMatrix& x_, NumericMatrix& y_, NumericVector& w_, int method, double cph_eps, int cph_iter_max);
RcppExport SEXP _aorsf_coxph_fit_exported(SEXP x_SEXP, SEXP y_SEXP, SEXP w_SEXP, SEXP methodSEXP, SEXP cph_epsSEXP, SEXP cph_iter_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type cph_eps(cph_epsSEXP);
    Rcpp::traits::input_parameter< int >::type cph_iter_max(cph_iter_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(coxph_fit_exported(x_, y_, w_, method, cph_eps, cph_iter_max));
    return rcpp_result_gen;
END_RCPP
}
// node_find_cps_exported
List node_find_cps_exported(arma::mat& y_node, arma::vec& w_node, arma::vec& XB, double leaf_min_events, double leaf_min_obs);
RcppExport SEXP _aorsf_node_find_cps_exported(SEXP y_nodeSEXP, SEXP w_nodeSEXP, SEXP XBSEXP, SEXP leaf_min_eventsSEXP, SEXP leaf_min_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type y_node(y_nodeSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w_node(w_nodeSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type XB(XBSEXP);
    Rcpp::traits::input_parameter< double >::type leaf_min_events(leaf_min_eventsSEXP);
    Rcpp::traits::input_parameter< double >::type leaf_min_obs(leaf_min_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(node_find_cps_exported(y_node, w_node, XB, leaf_min_events, leaf_min_obs));
    return rcpp_result_gen;
END_RCPP
}
// node_compute_lrt_exported
double node_compute_lrt_exported(arma::mat& y_node, arma::vec& w_node, arma::vec& group);
RcppExport SEXP _aorsf_node_compute_lrt_exported(SEXP y_nodeSEXP, SEXP w_nodeSEXP, SEXP groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type y_node(y_nodeSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w_node(w_nodeSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type group(groupSEXP);
    rcpp_result_gen = Rcpp::wrap(node_compute_lrt_exported(y_node, w_node, group));
    return rcpp_result_gen;
END_RCPP
}
// node_fill_group_exported
void node_fill_group_exported(arma::vec& group, const arma::uvec& XB_sorted, const arma::uword start, const arma::uword stop, const double value);
RcppExport SEXP _aorsf_node_fill_group_exported(SEXP groupSEXP, SEXP XB_sortedSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type group(groupSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type XB_sorted(XB_sortedSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type start(startSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< const double >::type value(valueSEXP);
    node_fill_group_exported(group, XB_sorted, start, stop, value);
    return R_NilValue;
END_RCPP
}
// which_cols_valid_exported
arma::uvec which_cols_valid_exported(const arma::mat& y_inbag, const arma::mat& x_inbag, arma::uvec& rows_node, const arma::uword mtry);
RcppExport SEXP _aorsf_which_cols_valid_exported(SEXP y_inbagSEXP, SEXP x_inbagSEXP, SEXP rows_nodeSEXP, SEXP mtrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y_inbag(y_inbagSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x_inbag(x_inbagSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type rows_node(rows_nodeSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type mtry(mtrySEXP);
    rcpp_result_gen = Rcpp::wrap(which_cols_valid_exported(y_inbag, x_inbag, rows_node, mtry));
    return rcpp_result_gen;
END_RCPP
}
// lrt_multi_exported
List lrt_multi_exported(NumericMatrix& y_, NumericVector& w_, NumericVector& XB_, int n_split_, double split_min_stat, double leaf_min_events, double leaf_min_obs);
RcppExport SEXP _aorsf_lrt_multi_exported(SEXP y_SEXP, SEXP w_SEXP, SEXP XB_SEXP, SEXP n_split_SEXP, SEXP split_min_statSEXP, SEXP leaf_min_eventsSEXP, SEXP leaf_min_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type XB_(XB_SEXP);
    Rcpp::traits::input_parameter< int >::type n_split_(n_split_SEXP);
    Rcpp::traits::input_parameter< double >::type split_min_stat(split_min_statSEXP);
    Rcpp::traits::input_parameter< double >::type leaf_min_events(leaf_min_eventsSEXP);
    Rcpp::traits::input_parameter< double >::type leaf_min_obs(leaf_min_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(lrt_multi_exported(y_, w_, XB_, n_split_, split_min_stat, leaf_min_events, leaf_min_obs));
    return rcpp_result_gen;
END_RCPP
}
// orsf_cpp
List orsf_cpp(arma::mat& x, arma::mat& y, arma::vec& w, int n_tree, Rcpp::Function f_beta, Rcpp::Function f_oobag_eval, Rcpp::IntegerVector& tree_seeds, Rcpp::List& tree_params);
RcppExport SEXP _aorsf_orsf_cpp(SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP n_treeSEXP, SEXP f_betaSEXP, SEXP f_oobag_evalSEXP, SEXP tree_seedsSEXP, SEXP tree_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type n_tree(n_treeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type f_beta(f_betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type f_oobag_eval(f_oobag_evalSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type tree_seeds(tree_seedsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type tree_params(tree_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(orsf_cpp(x, y, w, n_tree, f_beta, f_oobag_eval, tree_seeds, tree_params));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_aorsf_coxph_scale_exported", (DL_FUNC) &_aorsf_coxph_scale_exported, 2},
    {"_aorsf_coxph_fit_exported", (DL_FUNC) &_aorsf_coxph_fit_exported, 6},
    {"_aorsf_node_find_cps_exported", (DL_FUNC) &_aorsf_node_find_cps_exported, 5},
    {"_aorsf_node_compute_lrt_exported", (DL_FUNC) &_aorsf_node_compute_lrt_exported, 3},
    {"_aorsf_node_fill_group_exported", (DL_FUNC) &_aorsf_node_fill_group_exported, 5},
    {"_aorsf_which_cols_valid_exported", (DL_FUNC) &_aorsf_which_cols_valid_exported, 4},
    {"_aorsf_lrt_multi_exported", (DL_FUNC) &_aorsf_lrt_multi_exported, 7},
    {"_aorsf_orsf_cpp", (DL_FUNC) &_aorsf_orsf_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_aorsf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
