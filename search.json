[{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to aorsf","title":"Contributing to aorsf","text":"Want contribute aorsf? Great! aorsf initially stable state development, great deal active subsequent development envisioned. outline propose change aorsf. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to aorsf","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to aorsf","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to aorsf","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"ropensci/aorsf\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to aorsf","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to aorsf","text":"Please note aorsf project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://bcjaeger.github.io/aorsf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 aorsf authors (Byron C. Jaeger, Sawyer Welden, Nicholas M. Pajewski) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"background-orsf","dir":"Articles","previous_headings":"","what":"Background: ORSF","title":"Introduction to aorsf","text":"oblique random survival forest (ORSF) extension axis-based RSF algorithm. See orsf details ORSFs. see arXiv paper details algorithms used specifically aorsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"accelerated-orsf","dir":"Articles","previous_headings":"","what":"Accelerated ORSF","title":"Introduction to aorsf","text":"purpose aorsf (‘’ short accelerated) provide routines fit ORSFs scale adequately large data sets. fastest algorithm available package accelerated ORSF model, default method used orsf(): may notice first input aorsf data. design choice makes easier use orsf pipes (.e., %>% |>). instance,","code":"library(aorsf)  set.seed(329)  orsf_fit <- orsf(data = pbc_orsf,                   formula = Surv(time, status) ~ . - id)  orsf_fit #> ---------- Oblique random survival forest #>  #>      Linear combinations: Accelerated #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> ----------------------------------------- library(dplyr)  orsf_fit <- pbc_orsf |>   select(-id) |>   orsf(formula = Surv(time, status) ~ .)"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"interpretation","dir":"Articles","previous_headings":"","what":"Interpretation","title":"Introduction to aorsf","text":"aorsf includes several functions dedicated interpretation ORSFs, estimation partial dependence variable importance.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"variable-importance","dir":"Articles","previous_headings":"Interpretation","what":"Variable importance","title":"Introduction to aorsf","text":"aorsf provides multiple ways compute variable importance. compute negation importance, ORSF multiplies coefficient variable -1 re-computes --sample (sometimes referred --bag) accuracy ORSF model. can also compute variable importance using permutation, classical approach. faster alternative permutation negation importance ANOVA importance, computes proportion times variable obtains low p-value (p < 0.01) forest grown.","code":"orsf_vi_negate(orsf_fit) #>          bili           age       protime        copper       ascites  #>  0.0143779954  0.0096374245  0.0087518233  0.0061992082  0.0056261721  #>         stage           sex           ast         edema       albumin  #>  0.0050531361  0.0047926651  0.0034903105  0.0030512309  0.0023963326  #>       spiders          trig          chol        hepato      platelet  #>  0.0009376954 -0.0008856012 -0.0014065430 -0.0024484268 -0.0028130861  #>           trt      alk.phos  #> -0.0029172744 -0.0033861221 orsf_vi_permute(orsf_fit) #>          bili           age         stage       protime       albumin  #>  0.0109918733  0.0091685768  0.0036986872  0.0034903105  0.0028651802  #>       ascites         edema       spiders          chol           ast  #>  0.0028130861  0.0020676431  0.0019274849  0.0017712023  0.0015107314  #>        copper      platelet          trig           sex      alk.phos  #>  0.0003125651  0.0001562826 -0.0007293186 -0.0009376954 -0.0010418837  #>        hepato           trt  #> -0.0011981663 -0.0025526151 orsf_vi_anova(orsf_fit) #>    ascites       bili      edema     copper        age    albumin    protime  #> 0.36650652 0.28964613 0.25605884 0.20384514 0.18876042 0.17611863 0.15949300  #>      stage       chol        ast        sex     hepato    spiders       trig  #> 0.15136967 0.14789292 0.13086093 0.11822315 0.11744654 0.11611076 0.10882902  #>   alk.phos   platelet        trt  #> 0.09948586 0.08489136 0.07035033"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"partial-dependence-pd","dir":"Articles","previous_headings":"Interpretation","what":"Partial dependence (PD)","title":"Introduction to aorsf","text":"Partial dependence (PD) shows expected prediction model function single predictor multiple predictors. expectation marginalized values predictors, giving something like multivariable adjusted estimate model’s prediction. PD, see vignette","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"individual-conditional-expectations-ice","dir":"Articles","previous_headings":"Interpretation","what":"Individual conditional expectations (ICE)","title":"Introduction to aorsf","text":"Unlike partial dependence, shows expected prediction function one multiple predictors, individual conditional expectations (ICE) show prediction individual observation function predictor. ICE, see vignette","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"what-about-the-original-orsf","dir":"Articles","previous_headings":"","what":"What about the original ORSF?","title":"Introduction to aorsf","text":"original ORSF (.e., obliqueRSF) used glmnet find linear combinations inputs. aorsf allows users implement approach using orsf_control_net() function: net forests fit lot faster original ORSF function obliqueRSF. However, net forests still much slower cph ones:","code":"orsf_net <- orsf(data = pbc_orsf,                   formula = Surv(time, status) ~ . - id,                   control = orsf_control_net(),                  n_tree = 50) # tracking how long it takes to fit 50 glmnet trees print(  t1 <- system.time(   orsf(data = pbc_orsf,         formula = Surv(time, status) ~ . - id,         control = orsf_control_net(),        n_tree = 50)  ) ) #>    user  system elapsed  #>   1.961   0.028   1.989  # and how long it takes to fit 50 cph trees print(  t2 <- system.time(   orsf(data = pbc_orsf,         formula = Surv(time, status) ~ . - id,         control = orsf_control_cph(),        n_tree = 50)  ) ) #>    user  system elapsed  #>   0.053   0.000   0.053  t1['elapsed'] / t2['elapsed'] #> elapsed  #> 37.5283"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"aorsf-and-other-machine-learning-software","dir":"Articles","previous_headings":"","what":"aorsf and other machine learning software","title":"Introduction to aorsf","text":"unique feature aorsf fast algorithms fit ORSF ensembles. RLT obliqueRSF fit oblique random survival forests, aorsf faster. ranger randomForestSRC fit survival forests, neither package supports oblique splitting. obliqueRF fits oblique random forests classification regression, survival. PPforest fits oblique random forests classification survival. Note: default prediction behavior aorsf models produce predicted risk specific prediction horizon, default ranger randomForestSRC. think change future, computing time independent predictions aorsf helpful.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"out-of-bag-data","dir":"Articles","previous_headings":"","what":"Out-of-bag data","title":"Out-of-bag predictions and evaluation","text":"random forests, tree grown bootstrapped version training set. bootstrap samples selected replacement, bootstrapped training set contains two-thirds instances original training set. ‘--bag’ data instances bootstrapped training set.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"out-of-bag-predictions-and-error","dir":"Articles","previous_headings":"","what":"Out-of-bag predictions and error","title":"Out-of-bag predictions and evaluation","text":"tree random forest can make predictions --bag data, --bag predictions can aggregated make ensemble --bag prediction. Since --bag data used grow tree, accuracy ensemble --bag predictions approximate generalization error random forest. --bag prediction error plays central role routines estimate variable importance, e.g. negation importance. Let’s fit oblique random survival forest plot distribution ensemble --bag predictions.  surprisingly, survival predictions 0 1. Next, let’s check --bag accuracy fit: --bag estimate Harrell’s C-statistic (default method evaluate --bag predictions) 0.8421546.","code":"fit <- orsf(data = pbc_orsf,              formula = Surv(time, status) ~ . - id,             oobag_pred_type = 'surv',             oobag_pred_horizon = 3500)  hist(fit$pred_oobag,       main = 'Ensemble out-of-bag survival predictions at t=3,500') # what function is used to evaluate out-of-bag predictions? fit$eval_oobag$stat_type #> [1] \"Harrell's C-statistic\"  # what is the output from this function? fit$eval_oobag$stat_values #>           [,1] #> [1,] 0.8421546"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"monitoring-out-of-bag-error","dir":"Articles","previous_headings":"","what":"Monitoring out-of-bag error","title":"Out-of-bag predictions and evaluation","text":"--bag data set contains one-third training set, --bag error estimate usually converges stable value trees added forest. want monitor convergence --bag error oblique random survival forest, can set oobag_eval_every compute --bag error every oobag_eval_every tree. example, let’s compute --bag error fitting tree forest 50 trees:  general, least 500 trees recommended random forest fit. ’re just using 50 case better illustration --bag error curve. Also, helps make run-times low whenever need re-compile package vignettes.","code":"fit <- orsf(data = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 50,             oobag_pred_horizon = 3500,             oobag_eval_every = 1)  plot(  x = seq(1, 50, by = 1),  y = fit$eval_oobag$stat_values,   main = 'Out-of-bag C-statistic computed after each new tree is grown.',  xlab = 'Number of trees grown',  ylab = fit$eval_oobag$stat_type )"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"user-supplied-out-of-bag-evaluation-functions","dir":"Articles","previous_headings":"","what":"User-supplied out-of-bag evaluation functions","title":"Out-of-bag predictions and evaluation","text":"cases, may want control --bag error estimated. example, let’s use Brier score SurvMetrics package: two ways apply function compute --bag error. First, can apply function --bag survival predictions stored ‘aorsf’ objects, e.g: Second, can pass function orsf(), used place Harrell’s C-statistic:  can also compute time-dependent C-statistic instead Harrell’s C-statistic (default oob function):","code":"oobag_fun_brier <- function(y_mat, s_vec){   # output is numeric vector of length 1  as.numeric(   SurvMetrics::Brier(    object = Surv(time = y_mat[, 1], event = y_mat[, 2]),     pre_sp = s_vec,    # t_star in Brier() should match oob_pred_horizon in orsf()    t_star = 3500   )  )   } oobag_fun_brier(y_mat = fit$data[, c('time', 'status')],                 s_vec = fit$pred_oobag) #> [1] 0.191025 fit <- orsf(data = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 50,             oobag_pred_horizon = 3500,             oobag_fun = oobag_fun_brier,             oobag_eval_every = 1)  plot(  x = seq(1, 50, by = 1),  y = fit$eval_oobag$stat_values,   main = 'Out-of-bag error computed after each new tree is grown.',  sub = 'For the Brier score, lower values indicate more accurate predictions',  xlab = 'Number of trees grown',  ylab = \"Brier score\" ) oobag_fun_tdep_cstat <- function(y_mat, s_vec){   as.numeric(   SurvMetrics::Cindex(    object = Surv(time = y_mat[, 1], event = y_mat[, 2]),     predicted = s_vec,    t_star = 3500   )  )  }  fit <- orsf(data = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 50,             oobag_pred_horizon = 3500,             oobag_fun = oobag_fun_tdep_cstat,             oobag_eval_every = 1)  plot(  x = seq(50),  y = fit$eval_oobag$stat_values,   main = 'Out-of-bag time-dependent AUC\\ncomputed after each new tree is grown.',  xlab = 'Number of trees grown',  ylab = \"AUC at t = 3,500\" )"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"specific-instructions-on-user-supplied-functions","dir":"Articles","previous_headings":"User-supplied out-of-bag evaluation functions","what":"Specific instructions on user-supplied functions","title":"Out-of-bag predictions and evaluation","text":"User-supplied functions must: exactly two arguments named y_mat s_vec. return numeric output length 1 either conditions true, error occur. simple test make sure user-supplied function work aorsf package :","code":"# Helper code to make sure your oobag_fun function will work with aorsf  # time and status values test_time <- seq(from = 1, to = 5, length.out = 100) test_status <- rep(c(0,1), each = 50)  # y-matrix is presumed to contain time and status (with column names) y_mat <- cbind(time = test_time, status = test_status) # s_vec is presumed to be a vector of survival probabilities s_vec <- seq(0.9, 0.1, length.out = 100)  # see 1 in the checklist above names(formals(oobag_fun_tdep_cstat)) == c(\"y_mat\", \"s_vec\") #> [1] TRUE TRUE  test_output <- oobag_fun_tdep_cstat(y_mat = y_mat, s_vec = s_vec)  # test output should be numeric is.numeric(test_output) #> [1] TRUE # test_output should be a numeric value of length 1 length(test_output) == 1 #> [1] TRUE"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"user-supplied-functions-for-negation-importance-","dir":"Articles","previous_headings":"","what":"User-supplied functions for negation importance.","title":"Out-of-bag predictions and evaluation","text":"Negation importance based --bag error, course may curious negation importance computed using different statistics. workflow exactly example , except specify importance = 'negate' fit model. Also, speed computations, going monitor --bag error .","code":"fit_tdep_cstat <- orsf(data = pbc_orsf,                  formula = Surv(time, status) ~ . - id,                  n_tree = 500,                  oobag_pred_horizon = 3500,                  oobag_fun = oobag_fun_tdep_cstat,                  importance = 'negate')  fit_tdep_cstat$importance #>        bili         age     albumin   ascites_1       stage       sex_f  #>    0.014739    0.012708    0.011718    0.009479    0.006536    0.006250  #>      copper     protime     edema_1   spiders_1   edema_0.5         ast  #>    0.005833    0.005260    0.005000    0.004297    0.001979    0.001927  #>        trig    hepato_1    alk.phos trt_placebo        chol    platelet  #>   -0.000807   -0.001198   -0.002318   -0.002630   -0.003437   -0.005182"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"Out-of-bag predictions and evaluation","text":"evaluating --bag error: oobag_pred_horizon input orsf() determines prediction horizon --bag predictions. prediction horizon needs specified evaluate prediction accuracy cases, examples . sure check case using functions, , sure oobag_pred_horizon matches prediction horizon used custom function. functions expect predicted risk (.e., 1 - predicted survival), others expect predicted survival. cases, also able use function whatsoever compute --bag prediction error estimating negation permutation importance, assuming passes tests . Unfortunately, exception riskRegression::Score(), one favorites. experimented riskRegression::Score found work try run C++. sure case.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"partial-dependence-pd","dir":"Articles","previous_headings":"","what":"Partial dependence (PD)","title":"PD and ICE curves with ORSF","text":"Partial dependence (PD) shows expected prediction model function single predictor multiple predictors. expectation marginalized values predictors, giving something like multivariable adjusted estimate model’s prediction. Begin fitting ORSF ensemble. Set prediction horizon 5 years fit ensemble aorsf function pass ensemble assume want compute predictions 5 years.","code":"library(aorsf)  pred_horizon <- 365.25 * 5  set.seed(329730)  index_train <- sample(nrow(pbc_orsf), 150)   pbc_orsf_train <- pbc_orsf[index_train, ] pbc_orsf_test <- pbc_orsf[-index_train, ]  fit <- orsf(data = pbc_orsf_train,              formula = Surv(time, status) ~ . - id,             oobag_pred_horizon = pred_horizon)  fit #> ---------- Oblique random survival forest #>  #>      Linear combinations: Accelerated #>           N observations: 150 #>                 N events: 52 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 12 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.83 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"three-ways-to-compute-pd","dir":"Articles","previous_headings":"","what":"Three ways to compute PD","title":"PD and ICE curves with ORSF","text":"can compute PD three ways aorsf: using -bag predictions training data using --bag predictions training data using predictions new set data -bag PD indicates relationships model learned training. helpful goal interpret model. --bag PD indicates relationships model learned training using --bag data simulates application model new data. want test model’s reliability fairness new data don’t access large testing set. new data PD shows model predicts outcomes observations seen. helpful want test model’s reliability fairness. Let’s re-fit ORSF available data proceeding next sections.","code":"pd_inb <- orsf_pd_inb(fit, pred_spec = list(bili = 1:5))  pd_inb #>    pred_horizon bili      mean        lwr       medn       upr #> 1:      1826.25    1 0.2065186 0.01461416 0.09406926 0.8053158 #> 2:      1826.25    2 0.2352372 0.02673697 0.12477942 0.8206148 #> 3:      1826.25    3 0.2754197 0.04359767 0.17630939 0.8406553 #> 4:      1826.25    4 0.3303309 0.09237920 0.24319095 0.8544871 #> 5:      1826.25    5 0.3841395 0.15224112 0.30174988 0.8663482 pd_oob <- orsf_pd_oob(fit, pred_spec = list(bili = 1:5))  pd_oob #>    pred_horizon bili      mean        lwr       medn       upr #> 1:      1826.25    1 0.2075896 0.01389732 0.09063976 0.7998756 #> 2:      1826.25    2 0.2352634 0.02628113 0.12935779 0.8152149 #> 3:      1826.25    3 0.2750782 0.04254451 0.18877830 0.8371582 #> 4:      1826.25    4 0.3302680 0.08806724 0.24827784 0.8441472 #> 5:      1826.25    5 0.3846734 0.14808075 0.29926304 0.8562432 pd_test <- orsf_pd_new(fit,                         new_data = pbc_orsf_test,                         pred_spec = list(bili = 1:5))  pd_test #>    pred_horizon bili      mean        lwr      medn       upr #> 1:      1826.25    1 0.2541661 0.01581296 0.1912170 0.8103449 #> 2:      1826.25    2 0.2824737 0.03054392 0.2304441 0.8413602 #> 3:      1826.25    3 0.3205550 0.04959123 0.2736161 0.8495418 #> 4:      1826.25    4 0.3743186 0.10474085 0.3501337 0.8619464 #> 5:      1826.25    5 0.4258793 0.16727203 0.4032790 0.8626002 set.seed(329730)  fit <- orsf(pbc_orsf,              Surv(time, status) ~ . -id,             oobag_pred_horizon = pred_horizon)"},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"one-variable-one-horizon","dir":"Articles","previous_headings":"","what":"One variable, one horizon","title":"PD and ICE curves with ORSF","text":"Computing PD single variable straightforward: output shows expected predicted mortality risk men substantially higher women 5 years baseline.","code":"pd_sex <- orsf_pd_oob(fit, pred_spec = list(sex = c(\"m\", \"f\")))  pd_sex #>    pred_horizon sex      mean        lwr      medn       upr #> 1:      1826.25   m 0.3527805 0.03974647 0.2414356 0.9444124 #> 2:      1826.25   f 0.2932127 0.01115776 0.1417599 0.9591495"},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"one-variable-moving-horizon","dir":"Articles","previous_headings":"","what":"One variable, moving horizon","title":"PD and ICE curves with ORSF","text":"effect predictor varies time? PD can show .  inspection, can see males higher risk females difference risk grows time. can also seen viewing ratio expected risk time:","code":"pd_sex_tv <- orsf_pd_oob(fit, pred_spec = list(sex = c(\"m\", \"f\")),                          pred_horizon = seq(365, 365*5))  ggplot(pd_sex_tv, aes(x = pred_horizon, y = mean, color = sex)) +   geom_line() +  labs(x = 'Time since baseline',       y = 'Expected risk') library(data.table)  ratio_tv <- pd_sex_tv[  , .(ratio = mean[sex == 'm'] / mean[sex == 'f']), by = pred_horizon ]  ggplot(ratio_tv, aes(x = pred_horizon, y = ratio)) +   geom_line(color = 'grey') +   geom_smooth(color = 'black', se = FALSE) +   labs(x = 'time since baseline',       y = 'ratio in expected risk for males versus females') #> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'"},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"multiple-variables-marginally","dir":"Articles","previous_headings":"","what":"Multiple variables, marginally","title":"PD and ICE curves with ORSF","text":"want compute PD marginally multiple variables, just list variable values pred_spec specify expand_grid = FALSE. Now tedious wanted variables? bet. ’s made function . bonus, printed output sorted least important variables. ’s easy enough turn ‘summary’ object data.table downstream plotting tables.","code":"pd_two_vars <-    orsf_pd_oob(fit,              pred_spec = list(sex = c(\"m\", \"f\"), bili = 1:5),              expand_grid = FALSE)  pd_two_vars #>    pred_horizon variable value level      mean        lwr      medn       upr #> 1:      1826.25      sex    NA     m 0.3527805 0.03974647 0.2414356 0.9444124 #> 2:      1826.25      sex    NA     f 0.2932127 0.01115776 0.1417599 0.9591495 #> 3:      1826.25     bili     1  <NA> 0.2340055 0.01296442 0.1171454 0.8702835 #> 4:      1826.25     bili     2  <NA> 0.2851655 0.03823950 0.1735778 0.9065770 #> 5:      1826.25     bili     3  <NA> 0.3431764 0.06659531 0.2542600 0.9238422 #> 6:      1826.25     bili     4  <NA> 0.3944246 0.10249873 0.3127158 0.9380414 #> 7:      1826.25     bili     5  <NA> 0.4409193 0.14114665 0.3826310 0.9464794 pd_smry <- orsf_summarize_uni(fit)  pd_smry #>  #> -- bili (VI Rank: 1) ------------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>             0.80 0.2290016 0.1148601 0.04327406 0.3528169 #>              1.4 0.2494666 0.1376638 0.05627886 0.3771831 #>              3.5 0.3704706 0.2889571 0.15656217 0.5533343 #>  #> -- age (VI Rank: 2) -------------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>               42 0.2704463 0.1295873 0.04026421 0.4548720 #>               50 0.2984843 0.1625962 0.04439149 0.5203701 #>               57 0.3281206 0.2112682 0.06424226 0.5718942 #>  #> -- protime (VI Rank: 3) ---------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>               10 0.2808684 0.1480830 0.04454335 0.5250508 #>               11 0.2942878 0.1494827 0.04801608 0.5385037 #>               11 0.3174015 0.1848578 0.06474437 0.5605459 #>  #> -- ascites (VI Rank: 4) ---------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>                0 0.2934430 0.1454747 0.04363005 0.5425820 #>                1 0.4700569 0.3779503 0.27402738 0.6487942 #>  #> -- sex (VI Rank: 5) -------------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>                m 0.3527805 0.2414356 0.10979219 0.5900754 #>                f 0.2932127 0.1417599 0.04241247 0.5316942 #>  #> -- stage (VI Rank: 6) ------------------------------------ #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>                1 0.2617610 0.1370758 0.03951652 0.4547312 #>                2 0.2704346 0.1393500 0.03812598 0.4974763 #>                3 0.2920387 0.1591362 0.04597153 0.5402843 #>                4 0.3395445 0.2171918 0.08134507 0.5906341 #>  #> -- copper (VI Rank: 7) ----------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>               43 0.2610046 0.1359129 0.04000928 0.4773423 #>               74 0.2790426 0.1495856 0.05226547 0.5081557 #>              129 0.3335202 0.2176733 0.10000455 0.5464926 #>  #> -- spiders (VI Rank: 8) ---------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>                0 0.2900268 0.1442807 0.04234382 0.5274333 #>                1 0.3349321 0.2164031 0.07881800 0.5616628 #>  #> -- albumin (VI Rank: 9) ---------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>              3.3 0.3139304 0.1689580 0.04677649 0.5803556 #>              3.5 0.2923041 0.1431321 0.04390161 0.5342228 #>              3.8 0.2789748 0.1319210 0.04560136 0.4855513 #>  #> -- edema (VI Rank: 10) ----------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>                0 0.2900221 0.1454747 0.04216106 0.5435162 #>              0.5 0.3506983 0.2437012 0.09370586 0.6102717 #>                1 0.4375162 0.3381648 0.22289789 0.6563385 #>  #> -- ast (VI Rank: 11) ------------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>               82 0.2831976 0.1388635 0.04124336 0.5293067 #>              117 0.2969493 0.1541120 0.04724622 0.5472410 #>              153 0.3174977 0.1715826 0.06233281 0.5819240 #>  #> -- trig (VI Rank: 12) ------------------------------------ #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>               85 0.2940047 0.1479727 0.04129360 0.5354742 #>              108 0.3004809 0.1559818 0.04400752 0.5448964 #>              151 0.3132524 0.1782903 0.05679427 0.5430465 #>  #> -- alk.phos (VI Rank: 13) -------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>              922 0.3018497 0.1551374 0.04519584 0.5536559 #>             1278 0.3026628 0.1630816 0.04488732 0.5525483 #>             2068 0.3065994 0.1665361 0.05124448 0.5511105 #>  #> -- hepato (VI Rank: 14) ---------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>                0 0.2854740 0.1450785 0.03921781 0.5230005 #>                1 0.3183191 0.1777718 0.06326351 0.5503241 #>  #> -- chol (VI Rank: 15) ------------------------------------ #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>              250 0.2851192 0.1443172 0.03853663 0.4941613 #>              310 0.2927041 0.1602519 0.04444628 0.5196398 #>              401 0.3158389 0.1882467 0.07194796 0.5447747 #>  #> -- platelet (VI Rank: 16) -------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>              200 0.3059458 0.1594746 0.04880371 0.5761188 #>              257 0.3009282 0.1541210 0.04620275 0.5619634 #>              318 0.2977349 0.1524793 0.04545151 0.5500751 #>  #> -- trt (VI Rank: 17) ------------------------------------- #>  #>                  |---------------- risk ----------------| #>            Value      Mean    Median     25th %    75th % #>  d_penicill_main 0.3056548 0.1689712 0.04896262 0.5482101 #>          placebo 0.2996642 0.1451760 0.04475777 0.5498884 #>  #>  Predicted risk at time t = 1826.25 for top 17 predictors head(as.data.table(pd_smry)) #>    variable importance Value      Mean    Median     25th %    75th % #> 1:     bili 0.01854553  0.80 0.2290016 0.1148601 0.04327406 0.3528169 #> 2:     bili 0.01854553   1.4 0.2494666 0.1376638 0.05627886 0.3771831 #> 3:     bili 0.01854553   3.5 0.3704706 0.2889571 0.15656217 0.5533343 #> 4:      age 0.00896020    42 0.2704463 0.1295873 0.04026421 0.4548720 #> 5:      age 0.00896020    50 0.2984843 0.1625962 0.04439149 0.5203701 #> 6:      age 0.00896020    57 0.3281206 0.2112682 0.06424226 0.5718942 #>    pred_horizon level #> 1:      1826.25  <NA> #> 2:      1826.25  <NA> #> 3:      1826.25  <NA> #> 4:      1826.25  <NA> #> 5:      1826.25  <NA> #> 6:      1826.25  <NA>"},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"multiple-variables-jointly","dir":"Articles","previous_headings":"","what":"Multiple variables, jointly","title":"PD and ICE curves with ORSF","text":"PD can show expected value model’s predictions function specific predictor, function multiple predictors. instance, can estimate predicted risk joint function bili, edema, trt:  inspection, model’s predictions indicate slightly lower risk placebo group, seem change much different values bili edema. clear increase predicted risk higher levels edema higher levels bili slope predicted risk function bili appears highest among patients edema 0.5. effect bili modified edema 0.5? quick sanity check coxph suggests .","code":"pred_spec = list(bili = seq(1, 5, length.out = 20),                edema = levels(pbc_orsf_train$edema),                trt = levels(pbc_orsf$trt))  pd_bili_edema <- orsf_pd_oob(fit, pred_spec)  library(ggplot2)  ggplot(pd_bili_edema, aes(x = bili, y = medn, col = trt, linetype = edema)) +   geom_line() +   labs(y = 'Expected predicted risk') library(survival)  pbc_orsf$edema_05 <- ifelse(pbc_orsf$edema == '0.5', 'yes', 'no')  fit_cph <- coxph(Surv(time,status) ~ edema_05 * bili,                   data = pbc_orsf)  anova(fit_cph) #> Analysis of Deviance Table #>  Cox model: response is Surv(time, status) #> Terms added sequentially (first to last) #>  #>                loglik   Chisq Df Pr(>|Chi|)     #> NULL          -550.19                           #> edema_05      -546.83  6.7248  1   0.009508 **  #> bili          -513.59 66.4689  1  3.555e-16 *** #> edema_05:bili -510.54  6.1112  1   0.013433 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"individual-conditional-expectations-ice","dir":"Articles","previous_headings":"","what":"Individual conditional expectations (ICE)","title":"PD and ICE curves with ORSF","text":"Unlike partial dependence, shows expected prediction function one multiple predictors, individual conditional expectations (ICE) show prediction individual observation function predictor. Just like PD, can compute ICE using -bag, --bag, testing data, principles apply. ’ll use --bag estimates .","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"visualizing-ice-curves","dir":"Articles","previous_headings":"","what":"Visualizing ICE curves","title":"PD and ICE curves with ORSF","text":"Inspecting ICE curves observation can help identify whether heterogeneity model’s predictions. .e., effect variable follow pattern data, groups variable impacts risk differently? going turn boundary checking orsf_ice_oob setting boundary_checks = FALSE, allow generate ICE curves go beyond 90th percentile bili. id_variable identifier current value variable(s) data. redundant one variable, helpful multiple variables. id_row identifier observation original data. used group observation’s predictions together plots. plots, helpful scale ICE data. subtract initial value predicted risk (.e., bili = 1) observation’s conditional expectation values. , Every curve start 0 plot shows change predicted risk function bili. Now can visualize curves.  inspection figure, individual slopes cluster around overall trend - Good! small number individual slopes appear flat. may helpful investigate .","code":"pred_spec <- list(bili = seq(1, 10, length.out = 25))  ice_oob <- orsf_ice_oob(fit, pred_spec, boundary_checks = FALSE)  ice_oob #>       pred_horizon id_variable id_row bili       pred #>    1:      1826.25           1      1    1 0.91930989 #>    2:      1826.25           1      2    1 0.10293802 #>    3:      1826.25           1      3    1 0.68484802 #>    4:      1826.25           1      4    1 0.31939985 #>    5:      1826.25           1      5    1 0.07395545 #>   ---                                                 #> 6896:      1826.25          25    272   10 0.45183506 #> 6897:      1826.25          25    273   10 0.46421948 #> 6898:      1826.25          25    274   10 0.48277410 #> 6899:      1826.25          25    275   10 0.38452767 #> 6900:      1826.25          25    276   10 0.51664794 ice_oob[, pred := pred - pred[bili==1], by = id_row] library(ggplot2)  ggplot(ice_oob, aes(x = bili,                      y = pred,                      group = id_row)) +   geom_line(alpha = 0.15) +   labs(y = 'Change in predicted risk') +  geom_smooth(se = FALSE, aes(group = 1)) #> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'"},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"limitations-of-pd","dir":"Articles","previous_headings":"","what":"Limitations of PD","title":"PD and ICE curves with ORSF","text":"Partial dependence number known limitations assumptions users aware (see Hooker, 2021). particular, partial dependence less intuitive >2 predictors examined jointly, assumed feature(s) partial dependence computed correlated features (likely true many cases). Accumulated local effect plots can used (see ) case feature independence valid assumption.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"PD and ICE curves with ORSF","text":"Giles Hooker, Lucas Mentch, Siyu Zhou. Unrestricted Permutation forces Extrapolation: Variable Importance Requires least One Model, Free Variable Importance. arXiv e-prints 2021 Oct; arXiv-1905. URL: https://doi.org/10.48550/arXiv.1905.03151","code":""},{"path":"https://bcjaeger.github.io/aorsf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Byron Jaeger. Author, maintainer. Nicholas Pajewski. Contributor. Sawyer Welden. Contributor. Christopher Jackson. Reviewer. Marvin Wright. Reviewer. Lukas Burk. Reviewer.","code":""},{"path":"https://bcjaeger.github.io/aorsf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey , Pajewski NM. Accelerated interpretable oblique random survival forests. arXiv e-prints. 2022 Aug 3:arXiv-2208. Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min YI, Mcclure LA, Howard G, Simon N. Oblique Random Survival Forests. Annals Applied Statistics. 13(3): 1847-1883. URL https://doi.org/10.1214/19-AOAS1261 DOI: 10.1214/19-AOAS1261","code":"@Article{,   title = {Accelerated and interpretable oblique random survival forests},   author = {Byron C. Jaeger and Sawyer Welden and Kristin Lenoir and Jaime L. Speiser and Matthew W. Segar and Ambarish Pandey and Nicholas M. Pajewski},   journal = {arXiv},   year = {2022},   url = {https://arxiv.org/abs/2208.01129}, } @Article{,   title = {Oblique Random Survival Forests},   author = {Byron C. Jaeger and D. Leann Long and Dustin M. Long and Mario Sims and Jeff M. Szychowski and Yuan-I Min and Leslie A. Mcclure and George Howard and Noah Simon},   journal = {Annals of Applied Statistics},   year = {2019},   volume = {13},   number = {3},   pages = {1847--1883},   url = {https://doi.org/10.1214/19-AOAS1261}, }"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"aorsf-","dir":"","previous_headings":"","what":"Accelerated Oblique Random Survival Forests","title":"Accelerated Oblique Random Survival Forests","text":"Fit, interpret, make predictions oblique random survival forests (ORSFs).","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"why-aorsf","dir":"","previous_headings":"","what":"Why aorsf?","title":"Accelerated Oblique Random Survival Forests","text":"Hundreds times faster obliqueRSF.1 Accurate predictions censored outcomes.2 Negation importance, novel technique estimate variable importance ORSFs.2 Intuitive API formula based interface. Extensive input checks informative error messages.","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Accelerated Oblique Random Survival Forests","text":"can install aorsf CRAN using can install development version aorsf GitHub :","code":"install.packages(\"aorsf\") # install.packages(\"remotes\") remotes::install_github(\"ropensci/aorsf\")"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"what-is-an-oblique-decision-tree","dir":"","previous_headings":"","what":"What is an oblique decision tree?","title":"Accelerated Oblique Random Survival Forests","text":"Decision trees developed splitting set training data two new subsets, goal similarity within new subsets . splitting process repeated resulting subsets data stopping criterion met. new subsets data formed based single predictor, decision tree said axis-based splits data appear perpendicular axis predictor. linear combinations variables used instead single variable, tree oblique splits data neither parallel right angle axis. Figure: Decision trees classification axis-based splitting (left) oblique splitting (right). Cases orange squares; controls purple circles. trees partition predictor space defined variables X1 X2, oblique splits better job separating two classes.","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Accelerated Oblique Random Survival Forests","text":"orsf() function can fit several types ORSF ensembles. personal favorite accelerated ORSF great combination prediction accuracy computational efficiency (see arXiv paper).2","code":"library(aorsf)  set.seed(329730)  index_train <- sample(nrow(pbc_orsf), 150)   pbc_orsf_train <- pbc_orsf[index_train, ] pbc_orsf_test <- pbc_orsf[-index_train, ]  fit <- orsf(data = pbc_orsf_train,              formula = Surv(time, status) ~ . - id,             oobag_pred_horizon = 365.25 * 5)"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"inspect","dir":"","previous_headings":"Examples","what":"Inspect","title":"Accelerated Oblique Random Survival Forests","text":"Printing output orsf() give information descriptive statistics ensemble. See print.orsf_fit description line printed output. See orsf examples details controlling ORSF ensemble fits using prediction modeling workflows.","code":"fit #> ---------- Oblique random survival forest #>  #>      Linear combinations: Accelerated #>           N observations: 150 #>                 N events: 52 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 12 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.83 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"variable-importance","dir":"","previous_headings":"Examples","what":"Variable importance","title":"Accelerated Oblique Random Survival Forests","text":"importance individual variables can estimated three ways using aorsf: negation2: variable assessed separately multiplying variable’s coefficients -1 determining much model’s performance changes. worse model’s performance negating coefficients given variable, important variable. permutation: variable assessed separately randomly permuting variable’s values determining much model’s performance changes. worse model’s performance permuting values given variable, important variable. analysis variance (ANOVA)3: p-value computed coefficient linear combination variables decision tree. Importance individual predictor variable proportion times p-value coefficient < 0.01. can supply R function estimate --bag error using negation permutation importance. feature experimental may changed future (see oob vignette)","code":"orsf_vi_negate(fit) #>          bili           sex           age       ascites         edema  #>  0.0152354571  0.0138504155  0.0132568263  0.0059358924  0.0051286110  #>         stage      alk.phos        hepato       protime        copper  #>  0.0023743569  0.0011871785  0.0007914523  0.0005935892 -0.0001978631  #>           ast       albumin           trt      platelet          chol  #> -0.0005935892 -0.0021764939 -0.0041551247 -0.0043529877 -0.0051444400 orsf_vi_permute(fit) #>         bili      ascites          age          sex        edema      albumin  #>  0.010091017  0.007716660  0.007320934  0.006727345  0.004337159  0.003561535  #>        stage      protime       hepato         chol      spiders       copper  #>  0.003165809  0.002770083  0.002176494  0.001187178 -0.001780768 -0.002176494  #>     platelet          trt         trig  #> -0.002572220 -0.004155125 -0.004946577 orsf_vi_anova(fit) #>    ascites       bili      edema        sex        age     copper      stage  #> 0.35231788 0.33216374 0.31401592 0.22045995 0.19044776 0.18155620 0.16907605  #>        ast     hepato    albumin       chol       trig    protime    spiders  #> 0.14183124 0.13736655 0.12611012 0.11461988 0.10847044 0.10697115 0.08802817  #>   alk.phos   platelet        trt  #> 0.07943094 0.06150342 0.04411765"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"partial-dependence-pd","dir":"","previous_headings":"Examples","what":"Partial dependence (PD)","title":"Accelerated Oblique Random Survival Forests","text":"Partial dependence (PD) shows expected prediction model function single predictor multiple predictors. expectation marginalized values predictors, giving something like multivariable adjusted estimate model’s prediction. PD, see vignette","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"individual-conditional-expectations-ice","dir":"","previous_headings":"Examples","what":"Individual conditional expectations (ICE)","title":"Accelerated Oblique Random Survival Forests","text":"Unlike partial dependence, shows expected prediction function one multiple predictors, individual conditional expectations (ICE) show prediction individual observation function predictor. ICE, see vignette","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"comparison-to-existing-software","dir":"","previous_headings":"","what":"Comparison to existing software","title":"Accelerated Oblique Random Survival Forests","text":"Comparisons aorsf existing software presented arXiv paper. paper describes aorsf detail summary procedures used tree fitting algorithm runs general benchmark comparing aorsf obliqueRSF several learners reports prediction accuracy computational efficiency learners. runs simulation study comparing variable importance techniques ORSFs, axis based RSFs, boosted trees. reports probability variable importance technique rank relevant variable higher importance irrelevant variable. hands-comparison aorsf R packages provided orsf examples","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Accelerated Oblique Random Survival Forests","text":"Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min YI, Mcclure LA, Howard G, Simon N. Oblique random survival forests. Annals applied statistics 2019 Sep; 13(3):1847-83. DOI: 10.1214/19-AOAS1261 Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey , Pajewski NM. Accelerated interpretable oblique random survival forests. arXiv e-prints 2022 Aug; arXiv-2208. URL: https://arxiv.org/abs/2208.01129 Menze BH, Kelm BM, Splitthoff DN, Koethe U, Hamprecht FA. oblique random forests. Joint European Conference Machine Learning Knowledge Discovery Databases 2011 Sep 4; pp. 453-469. DOI: 10.1007/978-3-642-23783-6_29","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Accelerated Oblique Random Survival Forests","text":"developers aorsf receive financial support Center Biomedical Informatics, Wake Forest University School Medicine. also receive support National Center Advancing Translational Sciences National Institutes Health Award Number UL1TR001420. content solely responsibility authors necessarily represent official views National Institutes Health.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/aorsf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","title":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","text":"Fit, interpret, make predictions oblique random survival forests. Oblique decision trees notoriously slow compared axis based counterparts, 'aorsf' runs fast faster axis-based decision tree algorithms right-censored time--event outcomes. Methods accelerate interpret oblique random survival forest described Jaeger et al., (2022) arXiv:2208.01129.","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/aorsf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","text":"Maintainer: Byron Jaeger bjaeger@wakehealth.edu (ORCID) contributors: Nicholas Pajewski [contributor] Sawyer Welden swelden@wakehealth.edu [contributor] Christopher Jackson chris.jackson@mrc-bsu.cam.ac.uk [reviewer] Marvin Wright [reviewer] Lukas Burk [reviewer]","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.orsf_summary_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to data.table — as.data.table.orsf_summary_uni","title":"Coerce to data.table — as.data.table.orsf_summary_uni","text":"Convert 'orsf_summary' object data.table object.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.orsf_summary_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to data.table — as.data.table.orsf_summary_uni","text":"","code":"# S3 method for orsf_summary_uni as.data.table(x, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.orsf_summary_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to data.table — as.data.table.orsf_summary_uni","text":"x object class 'orsf_summary_uni' ... used","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.orsf_summary_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to data.table — as.data.table.orsf_summary_uni","text":"data.table","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.orsf_summary_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to data.table — as.data.table.orsf_summary_uni","text":"","code":"library(data.table)  object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  smry <- orsf_summarize_uni(object, n_variables = 3)  as.data.table(smry) #>    variable  importance value      mean      medn        lwr       upr #> 1:      age 0.014794749    42 0.2721364 0.1399795 0.04060086 0.4657994 #> 2:      age 0.014794749    50 0.2995472 0.1653576 0.04601056 0.5327553 #> 3:      age 0.014794749    57 0.3317606 0.2120473 0.06507594 0.5868480 #> 4:   copper 0.006772244    43 0.2629882 0.1347273 0.04440971 0.4678139 #> 5:   copper 0.006772244    74 0.2810489 0.1579098 0.05488218 0.4947588 #> 6:   copper 0.006772244   129 0.3363115 0.2154936 0.10453060 0.5632719 #> 7:  ascites 0.005730360     0 0.2966150 0.1549206 0.04447936 0.5489777 #> 8:  ascites 0.005730360     1 0.4534886 0.3598423 0.24975710 0.6428626 #>    pred_horizon level #> 1:         1788  <NA> #> 2:         1788  <NA> #> 3:         1788  <NA> #> 4:         1788  <NA> #> 5:         1788  <NA> #> 6:         1788  <NA> #> 7:         1788     0 #> 8:         1788     1"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Oblique Random Survival Forest (ORSF) — orsf","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Fit oblique random survival forest","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"","code":"orsf(   data,   formula,   control = orsf_control_fast(),   weights = NULL,   n_tree = 500,   n_split = 5,   n_retry = 3,   mtry = NULL,   leaf_min_events = 1,   leaf_min_obs = 5,   split_min_events = 5,   split_min_obs = 10,   split_min_stat = 3.841459,   oobag_pred_type = \"surv\",   oobag_pred_horizon = NULL,   oobag_eval_every = n_tree,   oobag_fun = NULL,   importance = \"anova\",   tree_seeds = NULL,   attach_data = TRUE,   no_fit = FALSE,   ... )  orsf_train(object)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"data data.frame, tibble, data.table contains relevant variables. formula (formula) response left hand side include time variable, followed status variable, may written inside call Surv (see examples). terms right names predictor variables. control (orsf_control) object returned one orsf_control functions: orsf_control_fast (default) uses single iteration Newton Raphson scoring identify linear combination predictors. orsf_control_cph uses Newton Raphson scoring convergence criteria met. orsf_control_net uses glmnet identify linear combinations predictors, similar Jaeger (2019). orsf_control_custom allows user apply function create linear combinations predictors. weights (numeric vector) Optional. given, input length equal nrow(data). Values weights treated like replication weights, .e., value 2 thing 2 observations data, containing copy corresponding person's data. Use weights cautiously, orsf count number observations events prior growing node tree, higher values weights lead deeper trees. n_tree (integer) number trees grow. Default n_tree = 500. n_split (integer) number cut-points assessed splitting node decision trees. Default n_split = 5. n_retry (integer) node can split, current linear combination inputs unable provide valid split, orsf try new linear combination based different set randomly selected predictors, n_retry times. Default n_retry = 3. Set n_retry = 0 prevent retries. mtry (integer) Number predictors randomly included candidates splitting node. default smallest integer greater square root number total predictors, .e., mtry = ceiling(sqrt(number predictors)) leaf_min_events (integer) minimum number events leaf node. Default leaf_min_events = 1 leaf_min_obs (integer) minimum number observations leaf node. Default leaf_min_obs = 5 split_min_events (integer) minimum number events required node consider splitting . Default split_min_events = 5 split_min_obs (integer) minimum number observations required node consider splitting . Default split_min_obs = 10. split_min_stat (double) minimum test statistic required split node. Default 3.841459 log-rank test, roughly p-value 0.05 oobag_pred_type (character) type --bag predictions compute fitting ensemble. Valid options 'none' : compute --bag predictions 'risk' : predict probability event oobag_pred_horizon. 'surv' : 1 - risk. 'chf'  : predict cumulative hazard function Mortality ('mort')implemented bag predictions yet, future update. oobag_pred_horizon (numeric) numeric value indicating time used --bag predictions. Default median observed times, .e., oobag_pred_horizon = median(time). oobag_eval_every (integer) --bag performance ensemble checked every oobag_eval_every trees. , oobag_eval_every = 10, --bag performance checked growing 10th tree, 20th tree, . Default oobag_eval_every = n_tree. oobag_fun (function) used evaluating --bag prediction accuracy every oobag_eval_every trees. oobag_fun = NULL (default), Harrell's C-statistic (1982) used evaluate accuracy. use oobag_fun note following: oobag_fun two inputs: y_mat s_vec y_mat two column matrix first column named 'time', second named 'status' s_vec numeric vector containing predicted survival probabilities. oobag_fun return numeric output length 1 details, see --bag vignette. importance (character) Indicate method variable importance: 'none': variable importance computed. 'anova': compute analysis variance (ANOVA) importance 'negate': compute negation importance 'permute': compute permutation importance details methods, see orsf_vi. tree_seeds (integer vector) Optional. specified, random seeds set using values tree_seeds[]  growing tree . Two forests grown number trees seeds exact --bag samples, making --bag error estimates forests comparable. NULL (default), seeds set training process. attach_data (logical) TRUE, copy training data attached output. helpful plan using functions like orsf_pd_oob orsf_summarize_uni interpret forest using training data. Default TRUE. no_fit (logical) TRUE, model fitting steps defined saved, training initiated. object returned can directly submitted orsf_train() long attach_data TRUE. ... arguments passed methods (currently used). object untrained 'aorsf' object, created setting no_fit = TRUE orsf().","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"accelerated oblique RSF object (aorsf)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"function based highly similar ORSF function obliqueRSF R package. primary difference function runs much faster. speed increase attributable better management memory (.e., unnecessary copies inputs) using Newton Raphson scoring algorithm identify linear combinations inputs rather performing penalized regression using routines glmnet.modified Newton Raphson scoring algorithm function applies adaptation C++ routine developed Terry M. Therneau fits Cox proportional hazards models (see survival::coxph() specifically survival::coxph.fit()).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"details-on-inputs","dir":"Reference","previous_headings":"","what":"Details on inputs","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"formula: response formula can survival object returned Surv function, can also just time status variables. .e., Surv(time, status) ~ . works just like time + status ~ . . symbol right hand side short-hand using variables data (omitting left hand side formula) predictors. order variables left hand side matters. .e., writing status + time ~ . make orsf assume status variable actually time variable. mtry: mtry parameter may temporarily reduced ensure least 2 events per predictor variable. occurs using orsf_control_cph coefficients Newton Raphson scoring algorithm may become unstable number covariates greater equal number events. reduction occur using orsf_control_net. oobag_fun: oobag_fun specified, used compute negation importance permutation importance, role ANOVA importance.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"what-is-an-oblique-decision-tree-","dir":"Reference","previous_headings":"","what":"What is an oblique decision tree?","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Decision trees developed splitting set training data two new subsets, goal similarity within new subsets . splitting process repeated resulting subsets data stopping criterion met. new subsets data formed based single predictor, decision tree said axis-based splits data appear perpendicular axis predictor. linear combinations variables used instead single variable, tree oblique splits data neither parallel right angle axis Figure : Decision trees classification axis-based splitting (left) oblique splitting (right). Cases orange squares; controls purple circles. trees partition predictor space defined variables X1 X2, oblique splits better job separating two classes.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"what-is-a-random-forest-","dir":"Reference","previous_headings":"","what":"What is a random forest?","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Random forests collections de-correlated decision trees. Predictions tree aggregated make ensemble prediction forest. details, see Breiman el, 2001.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"training-out-of-bag-error-and-testing","dir":"Reference","previous_headings":"","what":"Training, out-of-bag error, and testing","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"random forests, tree grown bootstrapped version training set. bootstrap samples selected replacement, bootstrapped training set contains two-thirds instances original training set. '--bag' data instances bootstrapped training set. tree random forest can make predictions --bag data, --bag predictions can aggregated make ensemble --bag prediction. Since --bag data used grow tree, accuracy ensemble --bag predictions approximate generalization error random forest. Generalization error refers error random forest's predictions applied predict outcomes data used train , .e., testing data.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"missing-data","dir":"Reference","previous_headings":"","what":"Missing data","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Data passed aorsf functions allowed missing values. user impute missing values using R package purpose, recipes mlr3pipelines.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"First load relevant packages   entry-point aorsf standard call orsf():   printing fit provides quick descriptive summaries:","code":"set.seed(329730) suppressPackageStartupMessages({  library(aorsf)  library(survival)  library(tidymodels)  library(tidyverse)  library(randomForestSRC)  library(ranger)  library(riskRegression)   library(obliqueRSF) }) fit <- orsf(pbc_orsf, Surv(time, status) ~ . - id) fit ## ---------- Oblique random survival forest ##  ##      Linear combinations: Accelerated ##           N observations: 276 ##                 N events: 111 ##                  N trees: 500 ##       N predictors total: 17 ##    N predictors per node: 5 ##  Average leaves per tree: 24 ## Min observations in leaf: 5 ##       Min events in leaf: 1 ##           OOB stat value: 0.84 ##            OOB stat type: Harrell's C-statistic ##      Variable importance: anova ##  ## -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"model-control","dir":"Reference","previous_headings":"","what":"Model control","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"examples make use orsf_control_ functions build compare models based --bag predictions. also standardize --bag samples using input argument tree_seeds","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"accelerated-linear-combinations","dir":"Reference","previous_headings":"","what":"Accelerated linear combinations","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"accelerated ORSF ensemble default nice balance computational speed prediction accuracy. runs single iteration Newton Raphson scoring Cox partial likelihood function find linear combinations predictors.","code":"fit_accel <- orsf(pbc_orsf,                    control = orsf_control_fast(),                   formula = Surv(time, status) ~ . - id,                   tree_seeds = 1:500)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"linear-combinations-with-cox-regression","dir":"Reference","previous_headings":"","what":"Linear combinations with Cox regression","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"orsf_control_cph runs Cox regression non-terminal node survival tree, using regression coefficients create linear combinations predictors:","code":"fit_cph <- orsf(pbc_orsf,                  control = orsf_control_cph(),                 formula = Surv(time, status) ~ . - id,                 tree_seeds = 1:500)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"linear-combinations-with-penalized-cox-regression","dir":"Reference","previous_headings":"","what":"Linear combinations with penalized cox regression","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"orsf_control_net runs penalized Cox regression non-terminal node survival tree, using regression coefficients create linear combinations predictors. can really helpful want feature selection within node, lot slower options.","code":"fit_net <- orsf(pbc_orsf,                  # select 3 predictors out of 5 to be used in                 # each linear combination of predictors.                 control = orsf_control_net(df_target = 3),                 formula = Surv(time, status) ~ . - id,                 tree_seeds = 1:500)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"linear-combinations-with-your-own-function","dir":"Reference","previous_headings":"","what":"Linear combinations with your own function","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Let’s make two customized functions identify linear combinations predictors. first uses random coefficients   second derives coefficients principal component analysis.   can plug functions orsf_control_custom(), pass result orsf():   fit seems work best example? Let’s find evaluating --bag survival predictions.   AUC values, highest lowest:     indices prediction accuracy:     inspection, PCA approach highest discrimination, showing can well just two line custom function. accelerated ORSF highest index prediction accuracy random coefficients generally don’t well.","code":"f_rando <- function(x_node, y_node, w_node){  matrix(runif(ncol(x_node)), ncol=1)  } f_pca <- function(x_node, y_node, w_node) {    # estimate two principal components.  pca <- stats::prcomp(x_node, rank. = 2)  # use the second principal component to split the node  pca$rotation[, 2L, drop = FALSE]  } fit_rando <- orsf(pbc_orsf,                   Surv(time, status) ~ . - id,                   control = orsf_control_custom(beta_fun = f_rando),                   tree_seeds = 1:500)  fit_pca <- orsf(pbc_orsf,                 Surv(time, status) ~ . - id,                 control = orsf_control_custom(beta_fun = f_pca),                 tree_seeds = 1:500) risk_preds <- list(  accel = 1 - fit_accel$pred_oobag,  cph   = 1 - fit_cph$pred_oobag,  net   = 1 - fit_net$pred_oobag,  rando = 1 - fit_rando$pred_oobag,  pca   = 1 - fit_pca$pred_oobag )  sc <- Score(object = risk_preds,              formula = Surv(time, status) ~ 1,              data = pbc_orsf,              summary = 'IPA',             times = fit_accel$pred_horizon) sc$AUC$score[order(-AUC)] ##     model times       AUC         se     lower     upper ##    <fctr> <num>     <num>      <num>     <num>     <num> ## 1:    pca  1788 0.9140542 0.01962854 0.8755830 0.9525254 ## 2:  accel  1788 0.9109875 0.02174062 0.8683766 0.9535983 ## 3:    net  1788 0.9081592 0.02161885 0.8657871 0.9505314 ## 4:    cph  1788 0.9072690 0.02122339 0.8656719 0.9488660 ## 5:  rando  1788 0.8681493 0.02418770 0.8207423 0.9155564 sc$Brier$score[order(-IPA), .(model, times, IPA)] ##         model times       IPA ##        <fctr> <num>     <num> ## 1:      accel  1788 0.4893270 ## 2:        net  1788 0.4842680 ## 3:        cph  1788 0.4689101 ## 4:        pca  1788 0.4238639 ## 5:      rando  1788 0.3395780 ## 6: Null model  1788 0.0000000"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"tidymodels","dir":"Reference","previous_headings":"","what":"tidymodels","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"example uses tidymodels functions stops short using official tidymodels workflow. working getting aorsf pulled censored package update real workflows happens!","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"comparing-orsf-with-other-learners","dir":"Reference","previous_headings":"","what":"Comparing ORSF with other learners","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Start recipe pre-process data   Next create 10-fold cross validation object pre-process data:     Define functions ‘workflow’ randomForestSRC, ranger, aorsf.   Run ‘workflows’ fold:   Next unnest column get back tibble testing data predictions.     finish aggregating predictions computing performance testing data. Note computing one statistic predictions instead computing one statistic fold. approach fine smaller testing sets /small event counts.     inspection, aorsf obtained slightly higher discrimination (AUC) aorsf obtained higher index prediction accuracy (IPA) Way go, aorsf","code":"imputer <- recipe(pbc_orsf, formula = time + status ~ .) %>%   step_impute_mean(all_numeric_predictors()) %>%  step_impute_mode(all_nominal_predictors()) # 10-fold cross validation; make a container for the pre-processed data analyses <- vfold_cv(data = pbc_orsf, v = 10) %>%  mutate(recipe = map(splits, ~prep(imputer, training = training(.x))),         train = map(recipe, juice),         test = map2(splits, recipe, ~bake(.y, new_data = testing(.x))))  analyses ## #  10-fold cross-validation  ## # A tibble: 10 x 5 ##    splits           id     recipe   train               test               ##    <list>           <chr>  <list>   <list>              <list>             ##  1 <split [248/28]> Fold01 <recipe> <tibble [248 x 20]> <tibble [28 x 20]> ##  2 <split [248/28]> Fold02 <recipe> <tibble [248 x 20]> <tibble [28 x 20]> ##  3 <split [248/28]> Fold03 <recipe> <tibble [248 x 20]> <tibble [28 x 20]> ##  4 <split [248/28]> Fold04 <recipe> <tibble [248 x 20]> <tibble [28 x 20]> ##  5 <split [248/28]> Fold05 <recipe> <tibble [248 x 20]> <tibble [28 x 20]> ##  6 <split [248/28]> Fold06 <recipe> <tibble [248 x 20]> <tibble [28 x 20]> ##  7 <split [249/27]> Fold07 <recipe> <tibble [249 x 20]> <tibble [27 x 20]> ##  8 <split [249/27]> Fold08 <recipe> <tibble [249 x 20]> <tibble [27 x 20]> ##  9 <split [249/27]> Fold09 <recipe> <tibble [249 x 20]> <tibble [27 x 20]> ## 10 <split [249/27]> Fold10 <recipe> <tibble [249 x 20]> <tibble [27 x 20]> rfsrc_wf <- function(train, test, pred_horizon){    # rfsrc does not like tibbles, so cast input data into data.frames  train <- as.data.frame(train)  test <- as.data.frame(test)    rfsrc(formula = Surv(time, status) ~ ., data = train) %>%    predictRisk(newdata = test, times = pred_horizon) %>%    as.numeric()   }  ranger_wf <- function(train, test, pred_horizon){    ranger(Surv(time, status) ~ ., data = train) %>%    predictRisk(newdata = test, times = pred_horizon) %>%    as.numeric()   }  aorsf_wf <- function(train, test, pred_horizon){    train %>%    orsf(Surv(time, status) ~ .,) %>%    predict(new_data = test, pred_horizon = pred_horizon) %>%    as.numeric()   } # 5 year risk prediction ph <- 365.25 * 5  results <- analyses %>%   transmute(test,             pred_aorsf = map2(train, test, aorsf_wf, pred_horizon = ph),            pred_rfsrc = map2(train, test, rfsrc_wf, pred_horizon = ph),            pred_ranger = map2(train, test, ranger_wf, pred_horizon = ph)) results <- results %>%   unnest(everything())  glimpse(results) ## Rows: 276 ## Columns: 23 ## $ id          <int> 7, 36, 52, 65, 67, 72, 79, 88, 89, 100, 127, 154, 161,~ ## $ trt         <fct> placebo, placebo, d_penicill_main, d_penicill_main, pl~ ## $ age         <dbl> 55.53457, 56.41068, 50.54073, 40.20260, 51.28816, 32.4~ ## $ sex         <fct> f, f, m, f, f, f, f, f, f, m, f, m, f, m, f, f, f, f, ~ ## $ ascites     <fct> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ ## $ hepato      <fct> 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, ~ ## $ spiders     <fct> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, ~ ## $ edema       <fct> 0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0~ ## $ bili        <dbl> 1.0, 0.3, 6.0, 1.2, 1.1, 0.5, 0.8, 0.6, 2.0, 2.3, 0.5,~ ## $ chol        <int> 322, 172, 614, 256, 466, 320, 315, 296, 408, 178, 268,~ ## $ albumin     <dbl> 4.09, 3.39, 3.70, 3.60, 3.91, 3.54, 4.24, 4.06, 3.65, ~ ## $ copper      <int> 52, 18, 158, 74, 84, 51, 13, 37, 50, 145, 9, 225, 4, 2~ ## $ alk.phos    <dbl> 824.0, 558.0, 5084.4, 724.0, 1787.0, 1243.0, 1637.0, 1~ ## $ ast         <dbl> 60.45, 71.30, 206.40, 141.05, 328.60, 122.45, 170.50, ~ ## $ trig        <int> 213, 96, 93, 108, 185, 80, 70, 83, 98, 122, 95, 75, 18~ ## $ platelet    <int> 204, 311, 362, 430, 261, 225, 426, 442, 200, 119, 453,~ ## $ protime     <dbl> 9.7, 10.6, 10.6, 10.0, 10.0, 10.0, 10.9, 12.0, 11.4, 1~ ## $ stage       <ord> 3, 2, 1, 1, 3, 3, 3, 3, 2, 4, 2, 3, 2, 4, 4, 3, 3, 3, ~ ## $ time        <int> 1832, 3611, 2386, 3992, 2769, 4184, 3707, 2452, 1741, ~ ## $ status      <dbl> 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, ~ ## $ pred_aorsf  <dbl> 0.14427839, 0.01870334, 0.51377784, 0.04334777, 0.2191~ ## $ pred_rfsrc  <dbl> 0.14732022, 0.03156261, 0.55773866, 0.06502143, 0.1619~ ## $ pred_ranger <dbl> 0.14870388, 0.01662689, 0.57519043, 0.05876898, 0.1488~ Score(  object = list(aorsf = results$pred_aorsf,                rfsrc = results$pred_rfsrc,                ranger = results$pred_ranger),  formula = Surv(time, status) ~ 1,   data = results,   summary = 'IPA',  times = ph ) ##  ## Metric AUC: ##  ## Results by model: ##  ##     model times    AUC  lower  upper ##    <fctr> <num> <char> <char> <char> ## 1:  aorsf  1826   91.2   87.0   95.4 ## 2:  rfsrc  1826   90.5   86.4   94.6 ## 3: ranger  1826   90.3   86.2   94.5 ##  ## Results of model comparisons: ##  ##    times  model reference delta.AUC  lower  upper     p ##    <num> <fctr>    <fctr>    <char> <char> <char> <num> ## 1:  1826  rfsrc     aorsf      -0.7   -2.3    0.8   0.4 ## 2:  1826 ranger     aorsf      -0.9   -2.3    0.5   0.2 ## 3:  1826 ranger     rfsrc      -0.1   -1.1    0.9   0.8  ##  ## NOTE: Values are multiplied by 100 and given in %.  ## NOTE: The higher AUC the better.  ##  ## Metric Brier: ##  ## Results by model: ##  ##         model   times  Brier  lower  upper    IPA ##        <fctr>   <num> <char> <char> <char> <char> ## 1: Null model 1826.25   20.5   18.1   22.9    0.0 ## 2:      aorsf 1826.25   10.5    8.3   12.7   48.7 ## 3:      rfsrc 1826.25   11.6    9.5   13.6   43.6 ## 4:     ranger 1826.25   11.5    9.5   13.6   43.6 ##  ## Results of model comparisons: ##  ##      times  model  reference delta.Brier  lower  upper            p ##      <num> <fctr>     <fctr>      <char> <char> <char>        <num> ## 1: 1826.25  aorsf Null model       -10.0  -12.6   -7.3 1.430444e-13 ## 2: 1826.25  rfsrc Null model        -8.9  -11.2   -6.7 5.508455e-15 ## 3: 1826.25 ranger Null model        -8.9  -11.3   -6.6 5.511591e-14 ## 4: 1826.25  rfsrc      aorsf         1.1    0.2    1.9 1.141214e-02 ## 5: 1826.25 ranger      aorsf         1.0    0.3    1.7 3.742797e-03 ## 6: 1826.25 ranger      rfsrc        -0.0   -0.5    0.5 9.730271e-01  ##  ## NOTE: Values are multiplied by 100 and given in %.  ## NOTE: The lower Brier the better, the higher IPA the better."},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"mlr-pipelines","dir":"Reference","previous_headings":"","what":"mlr3 pipelines","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Warning: code may may run depending current version mlr3proba. First load additional mlr3 libraries.   Next ’ll define tasks learners engage .   Now can make benchmark designed compare three favorite learners:   Let’s look overall results:     inspection, aorsf appears higher expected value ‘surv.cindex’ (higher better) aorsf appears lower expected value ‘surv.graf’ (lower better) aorsf lowest training time. lower training time aorsf likely due fact many unique event times benchmark tasks. ranger rfsrc create grids time points based unique event time leaf decision tree, whereas aorsf also uses grid restricts unique event times among observations current leaf.","code":"suppressPackageStartupMessages({  library(mlr3verse)  library(mlr3proba)  library(mlr3extralearners)  library(mlr3viz)  library(mlr3benchmark) }) # Mayo Clinic Primary Biliary Cholangitis Data task_pbc <-   TaskSurv$new(   id = 'pbc',     backend = select(pbc_orsf, -id) %>%     mutate(stage = as.numeric(stage)),     time = \"time\",    event = \"status\"  )  # Veteran's Administration Lung Cancer Trial data(veteran, package = \"randomForestSRC\")  task_veteran <-   TaskSurv$new(   id = 'veteran',     backend = veteran,     time = \"time\",    event = \"status\"  )  # NKI 70 gene signature data_nki <- OpenML::getOMLDataSet(data.id = 1228)  task_nki <-   TaskSurv$new(   id = 'nki',     backend = data_nki$data,     time = \"time\",    event = \"event\"  )  # Gene Expression-Based Survival Prediction in Lung Adenocarcinoma data_lung <- OpenML::getOMLDataSet(data.id = 1245)  task_lung <-   TaskSurv$new(   id = 'nki',     backend = data_lung$data %>%     mutate(OS_event = as.numeric(OS_event) -1),     time = \"OS_years\",    event = \"OS_event\"  )   # Chemotherapy for Stage B/C colon cancer # (there are two rows per person, one for death  #  and the other for recurrence, hence the two tasks)  task_colon_death <-  TaskSurv$new(   id = 'colon_death',     backend = survival::colon %>%    filter(etype == 2) %>%     drop_na() %>%     # drop id, redundant variables    select(-id, -study, -node4, -etype),    mutate(OS_event = as.numeric(OS_event) -1),     time = \"time\",    event = \"status\"  )  task_colon_recur <-  TaskSurv$new(   id = 'colon_death',     backend = survival::colon %>%    filter(etype == 1) %>%     drop_na() %>%     # drop id, redundant variables    select(-id, -study, -node4, -etype),    mutate(OS_event = as.numeric(OS_event) -1),     time = \"time\",    event = \"status\"  )  # putting them all together tasks <- list(task_pbc,               task_veteran,               task_nki,               task_lung,               task_colon_death,               task_colon_recur,               # add a few more pre-made ones               tsk(\"actg\"),               tsk('gbcs'),               tsk('grace'),               tsk(\"unemployment\"),               tsk(\"whas\")) # Learners with default parameters learners <- lrns(c(\"surv.ranger\", \"surv.rfsrc\", \"surv.aorsf\"))  # Brier (Graf) score, c-index and training time as measures measures <- msrs(c(\"surv.graf\", \"surv.cindex\", \"time_train\"))  # Benchmark with 5-fold CV design <- benchmark_grid(   tasks = tasks,   learners = learners,   resamplings = rsmps(\"cv\", folds = 5) )  benchmark_result <- benchmark(design)  bm_scores <- benchmark_result$score(measures, predict_sets = \"test\") bm_scores %>%  select(task_id, learner_id, surv.graf, surv.cindex, time_train) %>%  group_by(learner_id) %>%   filter(!is.infinite(surv.graf)) %>%   summarize(   across(    .cols = c(surv.graf, surv.cindex, time_train),    .fns = mean,     na.rm = TRUE   )  ) ## # A tibble: 3 x 4 ##   learner_id  surv.graf surv.cindex time_train ##   <chr>           <dbl>       <dbl>      <dbl> ## 1 surv.aorsf      0.151       0.729      0.345 ## 2 surv.ranger     0.167       0.706      2.54  ## 3 surv.rfsrc      0.156       0.715      0.783"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Harrell FE, Califf RM, Pryor DB, Lee KL, Rosati RA. Evaluating Yield Medical Tests. JAMA 1982; 247(18):2543-2546. DOI: 10.1001/jama.1982.03320430047030 Breiman L. Random forests. Machine learning 2001 Oct; 45(1):5-32. DOI: 10.1023/:1010933404324 Ishwaran H, Kogalur UB, Blackstone EH, Lauer MS. Random survival forests. Annals applied statistics 2008 Sep; 2(3):841-60. DOI: 10.1214/08-AOAS169 Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min YI, Mcclure LA, Howard G, Simon N. Oblique random survival forests. Annals applied statistics 2019 Sep; 13(3):1847-83. DOI: 10.1214/19-AOAS1261 Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey , Pajewski NM. Accelerated interpretable oblique random survival forests. arXiv e-prints 2022 Aug; arXiv-2208. URL: https://arxiv.org/abs/2208.01129","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":null,"dir":"Reference","previous_headings":"","what":"Cox regression ORSF control — orsf_control_cph","title":"Cox regression ORSF control — orsf_control_cph","text":"Use coefficients proportional hazards model create linear combinations predictor variables fitting orsf model.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cox regression ORSF control — orsf_control_cph","text":"","code":"orsf_control_cph(method = \"efron\", eps = 1e-09, iter_max = 20, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cox regression ORSF control — orsf_control_cph","text":"method (character) character string specifying method tie handling. ties, methods equivalent. Valid options 'breslow' 'efron'. Efron approximation default accurate dealing tied event times similar computational efficiency compared Breslow method. eps (double) using Newton Raphson scoring identify linear combinations inputs, iteration continues algorithm relative change  log partial likelihood less eps, absolute change less sqrt(eps). Must positive. default value 1e-09 used consistency survival::coxph.control. iter_max (integer) iteration continues convergence (see eps ) number attempted iterations equal iter_max. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cox regression ORSF control — orsf_control_cph","text":"object class 'orsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cox regression ORSF control — orsf_control_cph","text":"code  survival package modified make routine. details Cox proportional hazards model, see coxph /Therneau Grambsch (2000).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cox regression ORSF control — orsf_control_cph","text":"Therneau T.M., Grambsch P.M. (2000) Cox Model. : Modeling Survival Data: Extending Cox Model. Statistics Biology Health. Springer, New York, NY. DOI: 10.1007/978-1-4757-3294-8_3","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cox regression ORSF control — orsf_control_cph","text":"","code":"orsf(data = pbc_orsf,      formula = Surv(time, status) ~ . - id,      control = orsf_control_cph()) #> ---------- Oblique random survival forest #>  #>      Linear combinations: Cox regression #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom ORSF control — orsf_control_custom","title":"Custom ORSF control — orsf_control_custom","text":"Custom ORSF control","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom ORSF control — orsf_control_custom","text":"","code":"orsf_control_custom(beta_fun, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom ORSF control — orsf_control_custom","text":"beta_fun (function) function define coefficients used linear combinations predictor variables. beta_fun must accept three inputs named x_node, y_node w_node, expect following types dimensions: x_node (matrix; n rows, p columns) y_node (matrix; n rows, 2 columns) w_node (matrix; n rows, 1 column) addition, beta_fun must return matrix p rows 1 column. conditions met, orsf_control_custom() let know. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom ORSF control — orsf_control_custom","text":"object class 'orsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom ORSF control — orsf_control_custom","text":"Two customized functions identify linear combinations predictors shown . first uses random coefficients second derives coefficients principal component analysis.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"random-coefficients","dir":"Reference","previous_headings":"","what":"Random coefficients","title":"Custom ORSF control — orsf_control_custom","text":"f_rando() function get random coefficients:   can plug f_rando orsf_control_custom(), pass result orsf():","code":"f_rando <- function(x_node, y_node, w_node){  matrix(runif(ncol(x_node)), ncol=1)  } library(aorsf)  fit_rando <- orsf(pbc_orsf,                   Surv(time, status) ~ . - id,                   control = orsf_control_custom(beta_fun = f_rando),                   n_tree = 500)  fit_rando ## ---------- Oblique random survival forest ##  ##      Linear combinations: Custom user function ##           N observations: 276 ##                 N events: 111 ##                  N trees: 500 ##       N predictors total: 17 ##    N predictors per node: 5 ##  Average leaves per tree: 21 ## Min observations in leaf: 5 ##       Min events in leaf: 1 ##           OOB stat value: 0.79 ##            OOB stat type: Harrell's C-statistic ##      Variable importance: anova ##  ## -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"principal-components","dir":"Reference","previous_headings":"","what":"Principal components","title":"Custom ORSF control — orsf_control_custom","text":"Follow steps , starting custom function:   plug function orsf_control_custom() pass result orsf():","code":"f_pca <- function(x_node, y_node, w_node) {     # estimate two principal components.  pca <- stats::prcomp(x_node, rank. = 2)  # use the second principal component to split the node  pca$rotation[, 2L, drop = FALSE]   } fit_pca <- orsf(pbc_orsf,                 Surv(time, status) ~ . - id,                 control = orsf_control_custom(beta_fun = f_pca),                 n_tree = 500)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"evaluate","dir":"Reference","previous_headings":"","what":"Evaluate","title":"Custom ORSF control — orsf_control_custom","text":"well two customized ORSFs ? Let’s compute indices prediction accuracy based --bag predictions:   PCA ORSF quite well! (higher IPA better)","code":"library(riskRegression) library(survival)  risk_preds <- list(rando = 1 - fit_rando$pred_oobag,                     pca = 1 - fit_pca$pred_oobag)  sc <- Score(object = risk_preds,              formula = Surv(time, status) ~ 1,              data = pbc_orsf,              summary = 'IPA',             times = fit_pca$pred_horizon) sc$Brier ##  ## Results by model: ##  ##         model times  Brier  lower  upper    IPA ##        <fctr> <num> <char> <char> <char> <char> ## 1: Null model  1788 20.479 18.089 22.869  0.000 ## 2:      rando  1788 13.615 11.480 15.750 33.518 ## 3:        pca  1788 11.669  9.739 13.600 43.019 ##  ## Results of model comparisons: ##  ##    times  model  reference delta.Brier   lower  upper            p ##    <num> <fctr>     <fctr>      <char>  <char> <char>        <num> ## 1:  1788  rando Null model      -6.864  -8.894 -4.834 3.445348e-11 ## 2:  1788    pca Null model      -8.810 -10.808 -6.812 5.575502e-18 ## 3:  1788    pca      rando      -1.946  -2.848 -1.044 2.362068e-05  ##  ## NOTE: Values are multiplied by 100 and given in %.  ## NOTE: The lower Brier the better, the higher IPA the better."},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Accelerated ORSF control — orsf_control_fast","title":"Accelerated ORSF control — orsf_control_fast","text":"Accelerated ORSF control","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accelerated ORSF control — orsf_control_fast","text":"","code":"orsf_control_fast(method = \"efron\", do_scale = TRUE, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_fast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accelerated ORSF control — orsf_control_fast","text":"method (character) character string specifying method tie handling. ties, methods equivalent. Valid options 'breslow' 'efron'. Efron approximation default accurate dealing tied event times similar computational efficiency compared Breslow method. do_scale (logical) TRUE, values predictors scaled prior instance Newton Raphson scoring, using summary values data current node decision tree. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_fast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accelerated ORSF control — orsf_control_fast","text":"object class 'orsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_fast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accelerated ORSF control — orsf_control_fast","text":"code  survival package modified make routine. Adjust do_scale risk. Setting do_scale = FALSE reduce computation time also make orsf model dependent scale data, default value TRUE. good idea center scale predictors prior running orsf() plan setting do_scale = FALSE.","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_fast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accelerated ORSF control — orsf_control_fast","text":"","code":"orsf(data = pbc_orsf,      formula = Surv(time, status) ~ . - id,      control = orsf_control_fast()) #> ---------- Oblique random survival forest #>  #>      Linear combinations: Accelerated #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Penalized Cox regression ORSF control — orsf_control_net","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"Penalized Cox regression ORSF control","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"","code":"orsf_control_net(alpha = 1/2, df_target = NULL, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"alpha (double) elastic net mixing parameter. value 1 gives lasso penalty, value 0 gives ridge penalty. multiple values alpha given, penalized model fit using alpha value prior splitting node. df_target (integer) Preferred number variables used linear combination. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"object class 'orsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"df_target less mtry, separate argument orsf indicates number variables chosen random prior finding linear combination variables.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"Simon N, Friedman J, Hastie T, Tibshirani R. Regularization paths Cox's proportional hazards model via coordinate descent. Journal statistical software 2011 Mar; 39(5):1. DOI: 10.18637/jss.v039.i05","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"","code":"# orsf_control_net() is considerably slower than orsf_control_cph(), # The example uses n_tree = 25 so that my examples run faster, # but you should use at least 500 trees in applied settings.  orsf(data = pbc_orsf,      formula = Surv(time, status) ~ . - id,      n_tree = 25,      control = orsf_control_net()) #> ---------- Oblique random survival forest #>  #>      Linear combinations: Penalized Cox regression #>           N observations: 276 #>                 N events: 111 #>                  N trees: 25 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 22 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.58 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_ice_oob.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF Individual Conditional Expectations — orsf_ice_oob","title":"ORSF Individual Conditional Expectations — orsf_ice_oob","text":"Compute individual conditional expectations ORSF model. Unlike partial dependence, shows expected prediction function one multiple predictors, individual conditional expectations (ICE) show prediction individual observation function predictor. can compute individual conditional expectations three ways using random forest: using -bag predictions training data using --bag predictions training data using predictions new set data See examples details","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_ice_oob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF Individual Conditional Expectations — orsf_ice_oob","text":"","code":"orsf_ice_oob(   object,   pred_spec,   pred_horizon = NULL,   pred_type = \"risk\",   expand_grid = TRUE,   boundary_checks = TRUE,   ... )  orsf_ice_inb(   object,   pred_spec,   pred_horizon = NULL,   pred_type = \"risk\",   expand_grid = TRUE,   boundary_checks = TRUE,   ... )  orsf_ice_new(   object,   pred_spec,   new_data,   pred_horizon = NULL,   pred_type = \"risk\",   na_action = \"fail\",   expand_grid = TRUE,   boundary_checks = TRUE,   ... )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_ice_oob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF Individual Conditional Expectations — orsf_ice_oob","text":"object (orsf_fit) trained oblique random survival forest (see orsf). pred_spec (named list data.frame). pred_spec named list, item list vector values used points partial dependence function. name item list indicate variable modified take corresponding values. pred_spec data.frame, columns indicate variable names, values indicate variable values, partial dependence computed using inputs row. pred_horizon (double) value vector indicating time(s) predictions calibrated . E.g., predicting risk incident heart failure within next 10 years, pred_horizon = 10. pred_horizon can NULL pred_type 'mort', since mortality predictions aggregated event times pred_type (character) type predictions compute. Valid options 'risk' : probability event pred_horizon. 'surv' : 1 - risk. 'chf': cumulative hazard function 'mort': mortality prediction expand_grid (logical) TRUE, partial dependence computed possible combinations inputs pred_spec. FALSE, partial dependence computed variable pred_spec, separately. boundary_checks (logical) TRUE, pred_spec checked make sure requested values 10th 90th percentile object's training data. FALSE, checks skipped. ... arguments passed methods (currently used). new_data data.frame, tibble, data.table compute predictions . na_action (character) happen new_data contains missing values (.e., NA values). Valid options : 'fail' : error thrown new_data contains NA values 'omit' : rows new_data incomplete data dropped","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_ice_oob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF Individual Conditional Expectations — orsf_ice_oob","text":"data.table containing individual conditional expectations specified variable(s) specified prediction horizon(s).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_ice_oob.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF Individual Conditional Expectations — orsf_ice_oob","text":"Begin fitting ORSF ensemble     Use ensemble compute ICE values using --bag predictions:     Much detailed examples given vignette","code":"library(aorsf)  set.seed(329)  fit <- orsf(data = pbc_orsf, formula = Surv(time, status) ~ . - id)  fit ## ---------- Oblique random survival forest ##  ##      Linear combinations: Accelerated ##           N observations: 276 ##                 N events: 111 ##                  N trees: 500 ##       N predictors total: 17 ##    N predictors per node: 5 ##  Average leaves per tree: 24 ## Min observations in leaf: 5 ##       Min events in leaf: 1 ##           OOB stat value: 0.84 ##            OOB stat type: Harrell's C-statistic ##      Variable importance: anova ##  ## ----------------------------------------- pred_spec <- list(bili = seq(1, 10, length.out = 25))  ice_oob <- orsf_ice_oob(fit, pred_spec, boundary_checks = FALSE)  ice_oob ##       pred_horizon id_variable id_row  bili      pred ##              <num>       <int>  <int> <num>     <num> ##    1:         1788           1      1     1 0.9066901 ##    2:         1788           1      2     1 0.1018084 ##    3:         1788           1      3     1 0.7839188 ##    4:         1788           1      4     1 0.3901363 ##    5:         1788           1      5     1 0.1250285 ##   ---                                                 ## 6896:         1788          25    272    10 0.3948899 ## 6897:         1788          25    273    10 0.4759938 ## 6898:         1788          25    274    10 0.4406426 ## 6899:         1788          25    275    10 0.3330580 ## 6900:         1788          25    276    10 0.5652151"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_oob.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF partial dependence — orsf_pd_oob","title":"ORSF partial dependence — orsf_pd_oob","text":"Compute partial dependence ORSF model. Partial dependence (PD) shows expected prediction model function single predictor multiple predictors. expectation marginalized values predictors, giving something like multivariable adjusted estimate model's prediction. can compute partial dependence three ways using random forest: using -bag predictions training data using --bag predictions training data using predictions new set data See examples details","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_oob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF partial dependence — orsf_pd_oob","text":"","code":"orsf_pd_oob(   object,   pred_spec,   pred_horizon = NULL,   pred_type = \"risk\",   expand_grid = TRUE,   prob_values = c(0.025, 0.5, 0.975),   prob_labels = c(\"lwr\", \"medn\", \"upr\"),   boundary_checks = TRUE,   ... )  orsf_pd_inb(   object,   pred_spec,   pred_horizon = NULL,   pred_type = \"risk\",   expand_grid = TRUE,   prob_values = c(0.025, 0.5, 0.975),   prob_labels = c(\"lwr\", \"medn\", \"upr\"),   boundary_checks = TRUE,   ... )  orsf_pd_new(   object,   pred_spec,   new_data,   pred_horizon = NULL,   pred_type = \"risk\",   na_action = \"fail\",   expand_grid = TRUE,   prob_values = c(0.025, 0.5, 0.975),   prob_labels = c(\"lwr\", \"medn\", \"upr\"),   boundary_checks = TRUE,   ... )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_oob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF partial dependence — orsf_pd_oob","text":"object (orsf_fit) trained oblique random survival forest (see orsf). pred_spec (named list data.frame). pred_spec named list, item list vector values used points partial dependence function. name item list indicate variable modified take corresponding values. pred_spec data.frame, columns indicate variable names, values indicate variable values, partial dependence computed using inputs row. pred_horizon (double) value vector indicating time(s) predictions calibrated . E.g., predicting risk incident heart failure within next 10 years, pred_horizon = 10. pred_horizon can NULL pred_type 'mort', since mortality predictions aggregated event times pred_type (character) type predictions compute. Valid options 'risk' : probability event pred_horizon. 'surv' : 1 - risk. 'chf': cumulative hazard function 'mort': mortality prediction expand_grid (logical) TRUE, partial dependence computed possible combinations inputs pred_spec. FALSE, partial dependence computed variable pred_spec, separately. prob_values (numeric) vector values 0 1, indicating quantiles used summarize partial dependence values set inputs. prob_values length prob_labels. quantiles calculated based predictions object set values indicated pred_spec. prob_labels (character) vector labels length prob_values, label indicating corresponding value prob_values labelled summarized outputs. prob_labels length prob_values. boundary_checks (logical) TRUE, pred_spec checked make sure requested values 10th 90th percentile object's training data. FALSE, checks skipped. ... arguments passed methods (currently used). new_data data.frame, tibble, data.table compute predictions . na_action (character) happen new_data contains missing values (.e., NA values). Valid options : 'fail' : error thrown new_data contains NA values 'omit' : rows new_data incomplete data dropped","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_oob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF partial dependence — orsf_pd_oob","text":"data.table containing partial dependence values specified variable(s) specified prediction horizon(s).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_oob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORSF partial dependence — orsf_pd_oob","text":"Partial dependence number known limitations assumptions users aware (see Hooker, 2021). particular, partial dependence less intuitive >2 predictors examined jointly, assumed feature(s) partial dependence computed correlated features (likely true many cases). Accumulated local effect plots can used (see ) case feature independence valid assumption.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_oob.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF partial dependence — orsf_pd_oob","text":"Begin fitting ORSF ensemble:","code":"library(aorsf)  set.seed(329730)  index_train <- sample(nrow(pbc_orsf), 150)   pbc_orsf_train <- pbc_orsf[index_train, ] pbc_orsf_test <- pbc_orsf[-index_train, ]  fit <- orsf(data = pbc_orsf_train,              formula = Surv(time, status) ~ . - id,             oobag_pred_horizon = 365.25 * 5)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_oob.html","id":"three-ways-to-compute-pd-and-ice","dir":"Reference","previous_headings":"","what":"Three ways to compute PD and ICE","title":"ORSF partial dependence — orsf_pd_oob","text":"can compute partial dependence ICE three ways aorsf: using -bag predictions training data     using --bag predictions training data     using predictions new set data     -bag partial dependence indicates relationships model learned training. helpful goal interpret model. --bag partial dependence indicates relationships model learned training using --bag data simulates application model new data. want test model’s reliability fairness new data don’t access large testing set. new data partial dependence shows model predicts outcomes observations seen. helpful want test model’s reliability fairness.","code":"pd_train <- orsf_pd_inb(fit, pred_spec = list(bili = 1:5))  pd_train ##    pred_horizon  bili      mean        lwr       medn       upr ##           <num> <int>     <num>      <num>      <num>     <num> ## 1:      1826.25     1 0.2065186 0.01461416 0.09406926 0.8053158 ## 2:      1826.25     2 0.2352372 0.02673697 0.12477942 0.8206148 ## 3:      1826.25     3 0.2754197 0.04359767 0.17630939 0.8406553 ## 4:      1826.25     4 0.3303309 0.09237920 0.24319095 0.8544871 ## 5:      1826.25     5 0.3841395 0.15224112 0.30174988 0.8663482 pd_train <- orsf_pd_oob(fit, pred_spec = list(bili = 1:5))  pd_train ##    pred_horizon  bili      mean        lwr       medn       upr ##           <num> <int>     <num>      <num>      <num>     <num> ## 1:      1826.25     1 0.2075896 0.01389732 0.09063976 0.7998756 ## 2:      1826.25     2 0.2352634 0.02628113 0.12935779 0.8152149 ## 3:      1826.25     3 0.2750782 0.04254451 0.18877830 0.8371582 ## 4:      1826.25     4 0.3302680 0.08806724 0.24827784 0.8441472 ## 5:      1826.25     5 0.3846734 0.14808075 0.29926304 0.8562432 pd_test <- orsf_pd_new(fit,                         new_data = pbc_orsf_test,                         pred_spec = list(bili = 1:5))  pd_test ##    pred_horizon  bili      mean        lwr      medn       upr ##           <num> <int>     <num>      <num>     <num>     <num> ## 1:      1826.25     1 0.2541661 0.01581296 0.1912170 0.8103449 ## 2:      1826.25     2 0.2824737 0.03054392 0.2304441 0.8413602 ## 3:      1826.25     3 0.3205550 0.04959123 0.2736161 0.8495418 ## 4:      1826.25     4 0.3743186 0.10474085 0.3501337 0.8619464 ## 5:      1826.25     5 0.4258793 0.16727203 0.4032790 0.8626002"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_oob.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ORSF partial dependence — orsf_pd_oob","text":"Giles Hooker, Lucas Mentch, Siyu Zhou. Unrestricted Permutation forces Extrapolation: Variable Importance Requires least One Model, Free Variable Importance. arXiv e-prints 2021 Oct; arXiv-1905. URL: https://doi.org/10.48550/arXiv.1905.03151","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale input data — orsf_scale_cph","title":"Scale input data — orsf_scale_cph","text":"functions exported users may access internal routines used scale inputs orsf_control_cph used.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale input data — orsf_scale_cph","text":"","code":"orsf_scale_cph(x_mat, w_vec = NULL)  orsf_unscale_cph(x_mat)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale input data — orsf_scale_cph","text":"x_mat (numeric matrix) matrix values scaled unscaled. Note orsf_unscale_cph accept x_mat inputs attribute containing transform values, added automatically orsf_scale_cph. w_vec (numeric vector) optional vector weights. weights supplied (default), observations equally weighted. supplied, w_vec must length equal nrow(x_mat).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale input data — orsf_scale_cph","text":"scaled unscaled x_mat.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scale input data — orsf_scale_cph","text":"data transformed first subtracting mean multiplying scale. inverse transform can completed using orsf_unscale_cph dividing column corresponding scale adding mean. values means scales stored attribute output returned orsf_scale_cph (see examples)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale input data — orsf_scale_cph","text":"","code":"x_mat <- as.matrix(pbc_orsf[, c('bili', 'age', 'protime')])  head(x_mat) #>   bili      age protime #> 1 14.5 58.76523    12.2 #> 2  1.1 56.44627    10.6 #> 3  1.4 70.07255    12.0 #> 4  1.8 54.74059    10.3 #> 5  3.4 38.10541    10.9 #> 7  1.0 55.53457     9.7  x_scaled <- orsf_scale_cph(x_mat)  head(x_scaled) #>             bili        age    protime #> [1,]  3.77308887  1.0412574  1.9694656 #> [2,] -0.75476469  0.7719344 -0.1822316 #> [3,] -0.65339483  2.3544852  1.7005035 #> [4,] -0.51823502  0.5738373 -0.5856748 #> [5,]  0.02240421 -1.3581657  0.2212116 #> [6,] -0.78855464  0.6660494 -1.3925613  attributes(x_scaled) # note the transforms attribute #> $dim #> [1] 276   3 #>  #> $dimnames #> $dimnames[[1]] #> NULL #>  #> $dimnames[[2]] #> [1] \"bili\"    \"age\"     \"protime\" #>  #>  #> $transforms #>           mean     scale #> [1,]  3.333696 0.3378995 #> [2,] 49.799661 0.1161396 #> [3,] 10.735507 1.3448108 #>   x_unscaled <- orsf_unscale_cph(x_scaled)  head(x_unscaled) #>      bili      age protime #> [1,] 14.5 58.76523    12.2 #> [2,]  1.1 56.44627    10.6 #> [3,]  1.4 70.07255    12.0 #> [4,]  1.8 54.74059    10.3 #> [5,]  3.4 38.10541    10.9 #> [6,]  1.0 55.53457     9.7  # numeric difference in x_mat and x_unscaled should be practically 0 max(abs(x_mat - x_unscaled)) #> [1] 8.881784e-16"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF summary; univariate — orsf_summarize_uni","title":"ORSF summary; univariate — orsf_summarize_uni","text":"Summarize univariate information ORSF object","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF summary; univariate — orsf_summarize_uni","text":"","code":"orsf_summarize_uni(   object,   n_variables = NULL,   pred_horizon = NULL,   pred_type = \"risk\",   importance = \"negate\",   ... )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF summary; univariate — orsf_summarize_uni","text":"object (orsf_fit) trained oblique random survival forest (see orsf). n_variables (integer) many variables summarized? Setting input lower number reduce computation time. pred_horizon (double) value vector indicating time(s) predictions calibrated . E.g., predicting risk incident heart failure within next 10 years, pred_horizon = 10. pred_horizon can NULL pred_type 'mort', since mortality predictions aggregated event times pred_type (character) type predictions compute. Valid options 'risk' : probability event pred_horizon. 'surv' : 1 - risk. 'chf': cumulative hazard function 'mort': mortality prediction importance (character) Indicate method variable importance: 'none': variable importance computed. 'anova': compute analysis variance (ANOVA) importance 'negate': compute negation importance 'permute': compute permutation importance details methods, see orsf_vi. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF summary; univariate — orsf_summarize_uni","text":"object class 'orsf_summary', includes data importance individual predictors. expected values predictions specific values predictors.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORSF summary; univariate — orsf_summarize_uni","text":"pred_horizon left unspecified, median value time--event variable object's training data used. recommended always specify prediction horizon, median time may especially meaningful horizon compute predicted risk values . object already variable importance values, can safely bypass computation variable importance function setting importance = 'none'.","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF summary; univariate — orsf_summarize_uni","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  # since anova importance was used to make object, we can # safely say importance = 'none' and skip computation of # variable importance while running orsf_summarize_uni  orsf_summarize_uni(object, n_variables = 3, importance = 'none') #>  #> -- ascites (VI Rank: 1) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2988734 0.1565107 0.04838908 0.5438776 #>      1 0.4652325 0.3768515 0.26089998 0.6644161 #>  #> -- bili (VI Rank: 2) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2348415 0.1248111 0.04242497 0.3704788 #>    1.4 0.2554369 0.1467167 0.05736559 0.4037614 #>    3.5 0.3743213 0.2791126 0.15719697 0.5695323 #>  #> -- edema (VI Rank: 3) -------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2946010 0.1557690 0.04570908 0.5525338 #>    0.5 0.3563384 0.2452132 0.09172773 0.6146329 #>      1 0.4364419 0.3319119 0.21536127 0.6559667 #>  #>  Predicted risk at time t = 1788 for top 3 predictors   # however, if we want to summarize object according to variables # ranked by negation importance, we can compute negation importance # within orsf_summarize_uni() as follows:  orsf_summarize_uni(object, n_variables = 3, importance = 'negate') #>  #> -- bili (VI Rank: 1) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2348415 0.1248111 0.04242497 0.3704788 #>    1.4 0.2554369 0.1467167 0.05736559 0.4037614 #>    3.5 0.3743213 0.2791126 0.15719697 0.5695323 #>  #> -- age (VI Rank: 2) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     42 0.2757913 0.1406331 0.04087123 0.4763200 #>     50 0.3029770 0.1654510 0.04605775 0.5255141 #>     57 0.3362026 0.2265172 0.07039550 0.5605616 #>  #> -- protime (VI Rank: 3) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     10 0.2874810 0.1512387 0.04467148 0.5378211 #>     11 0.2974656 0.1572634 0.04831998 0.5386115 #>     11 0.3197237 0.1845319 0.06358945 0.5753133 #>  #>  Predicted risk at time t = 1788 for top 3 predictors"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate training time — orsf_time_to_train","title":"Estimate training time — orsf_time_to_train","text":"Estimate training time","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate training time — orsf_time_to_train","text":"","code":"orsf_time_to_train(object, n_tree_subset = 50)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate training time — orsf_time_to_train","text":"object untrained aorsf object n_tree_subset (integer)  many trees fit order estimate time needed train object. default value 50, usually gives good enough approximation.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate training time — orsf_time_to_train","text":"difftime object.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate training time — orsf_time_to_train","text":"","code":"# specify but do not train the model by setting no_fit = TRUE. object <- orsf(pbc_orsf, Surv(time, status) ~ . - id,                n_tree = 500, no_fit = TRUE)  # grow 50 trees to approximate the time it will take to grow 500 trees time_estimated <- orsf_time_to_train(object, n_tree_subset = 50)  print(time_estimated) #> Time difference of 0.5500638 secs  # let's see how close the approximation was time_true_start <- Sys.time() fit <- orsf_train(object) time_true_stop <- Sys.time()  time_true <- time_true_stop - time_true_start  print(time_true) #> Time difference of 0.5146589 secs  # error abs(time_true - time_estimated) #> Time difference of 0.03540492 secs"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF variable importance — orsf_vi","title":"ORSF variable importance — orsf_vi","text":"Estimate importance individual variables using oblique random survival forests.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF variable importance — orsf_vi","text":"","code":"orsf_vi(object, group_factors = TRUE, importance = NULL, oobag_fun = NULL, ...)  orsf_vi_negate(object, group_factors = TRUE, oobag_fun = NULL, ...)  orsf_vi_permute(object, group_factors = TRUE, oobag_fun = NULL, ...)  orsf_vi_anova(object, group_factors = TRUE, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF variable importance — orsf_vi","text":"object (orsf_fit) trained oblique random survival forest (see orsf). group_factors (logical) TRUE, importance factor variables reported overall aggregating importance individual levels factor. FALSE, importance individual factor levels returned. importance (character) Indicate method variable importance: 'anova': compute analysis variance (ANOVA) importance 'negate': compute negation importance 'permute': compute permutation importance oobag_fun (function) used evaluating --bag prediction accuracy negating coefficients (importance = 'negate') permuting values predictor (importance = 'permute') oobag_fun = NULL (default), Harrell's C-statistic (1982) used evaluate accuracy. use oobag_fun note following: oobag_fun two inputs: y_mat s_vec y_mat two column matrix first column named 'time', second named 'status' s_vec numeric vector containing predicted survival probabilities. oobag_fun return numeric output length 1 oobag_fun used created object initial value --bag prediction accuracy consistent values computed variable importance estimated. details, see --bag vignette. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF variable importance — orsf_vi","text":"orsf_vi functions return named numeric vector. Names vector predictor variables used object Values vector estimated importance given predictor. returned vector sorted highest lowest value, higher values indicating higher importance.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORSF variable importance — orsf_vi","text":"orsf_fit object fitted importance = 'anova', 'negate', 'permute', output vector importance values based requested type importance. However, may still want call orsf_vi() output want group factor levels one overall importance value. orsf_vi() general purpose function extract compute variable importance estimates 'orsf_fit' object (see orsf). orsf_vi_negate(), orsf_vi_permute(), orsf_vi_anova() wrappers orsf_vi(). way functions work depends whether object given already variable importance estimates (see examples).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"variable-importance-methods","dir":"Reference","previous_headings":"","what":"Variable importance methods","title":"ORSF variable importance — orsf_vi","text":"negation importance: variable assessed separately multiplying variable's coefficients -1 determining much model's performance changes. worse model's performance negating coefficients given variable, important variable. technique promising b/c require permutation emphasizes variables larger coefficients linear combinations, also relatively new studied much permutation importance. See Jaeger, 2022 details technique. permutation importance: variable assessed separately randomly permuting variable's values determining much model's performance changes. worse model's performance permuting values given variable, important variable. technique flexible, intuitive, frequently used. also several known limitations analysis variance (ANOVA) importance: p-value computed coefficient linear combination variables decision tree. Importance individual predictor variable proportion times p-value coefficient < 0.01. technique efficient computationally, may effective permutation negation terms selecting signal noise variables. See Menze, 2011 details technique.","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"anova-importance","dir":"Reference","previous_headings":"","what":"ANOVA importance","title":"ORSF variable importance — orsf_vi","text":"default variable importance technique, ANOVA, calculated fit ORSF ensemble.     ANOVA default fast, may decisive permutation negation techniques variable selection.","code":"fit <- orsf(pbc_orsf,                     Surv(time, status) ~ . - id)  fit ## ---------- Oblique random survival forest ##  ##      Linear combinations: Accelerated ##           N observations: 276 ##                 N events: 111 ##                  N trees: 500 ##       N predictors total: 17 ##    N predictors per node: 5 ##  Average leaves per tree: 24 ## Min observations in leaf: 5 ##       Min events in leaf: 1 ##           OOB stat value: 0.84 ##            OOB stat type: Harrell's C-statistic ##      Variable importance: anova ##  ## -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"raw-vi-values","dir":"Reference","previous_headings":"","what":"Raw VI values","title":"ORSF variable importance — orsf_vi","text":"‘raw’ variable importance values stored fit object     ‘raw’ values factors aggregated single value. Currently one value k-1 levels k level factor. example, can see edema_1 edema_0.5 importance values edema factor variable levels 0, 0.5, 1.","code":"fit$importance ##     edema_1   ascites_1        bili      copper         age  ##  0.39603233  0.35528942  0.27837977  0.19605331  0.18822292  ##     albumin     protime        chol   edema_0.5       stage  ##  0.17033964  0.15320911  0.14883599  0.14599194  0.13627743  ##   spiders_1         ast    hepato_1       sex_f        trig  ##  0.13495783  0.12754159  0.12057626  0.10669014  0.09723320  ##    alk.phos    platelet trt_placebo  ##  0.09183673  0.07599581  0.06846999"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"collapse-vi-across-factor-levels","dir":"Reference","previous_headings":"","what":"Collapse VI across factor levels","title":"ORSF variable importance — orsf_vi","text":"get aggregated values across levels factor, use orsf_vi() group_factors set TRUE (default)","code":"orsf_vi(fit) ##    ascites       bili      edema     copper        age    albumin  ## 0.35528942 0.27837977 0.24719876 0.19605331 0.18822292 0.17033964  ##    protime       chol      stage    spiders        ast     hepato  ## 0.15320911 0.14883599 0.13627743 0.13495783 0.12754159 0.12057626  ##        sex       trig   alk.phos   platelet        trt  ## 0.10669014 0.09723320 0.09183673 0.07599581 0.06846999"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"add-vi-to-an-orsf","dir":"Reference","previous_headings":"","what":"Add VI to an ORSF","title":"ORSF variable importance — orsf_vi","text":"can fit ORSF without VI, add VI later","code":"fit_no_vi <- orsf(pbc_orsf,                   Surv(time, status) ~ . - id,                   importance = 'none')  # Note: you can't call orsf_vi_anova() on fit_no_vi because anova # VI can only be computed while the forest is being grown.  orsf_vi_negate(fit_no_vi) ##          bili           age        copper       protime       ascites  ##  0.0164096687  0.0119295687  0.0105230256  0.0095853303  0.0053136070  ##         edema           sex       spiders      alk.phos        hepato  ##  0.0036428720  0.0029693686  0.0027609919  0.0025005209  0.0022400500  ##         stage       albumin           ast          trig           trt  ##  0.0018753907  0.0009897895  0.0005730360 -0.0013544488 -0.0017191081  ##      platelet          chol  ## -0.0031256512 -0.0040633465 orsf_vi_permute(fit_no_vi) ##          bili           age       protime        copper         stage  ##  0.0152115024  0.0098458012  0.0057824547  0.0039070640  0.0037507814  ##       ascites        hepato       albumin         edema      alk.phos  ##  0.0033340279  0.0026047093  0.0024484268  0.0020949305  0.0014586372  ##          trig          chol       spiders           trt           sex  ##  0.0011981663  0.0004688477  0.0002083767  0.0000000000 -0.0004167535  ##      platelet  ## -0.0014586372"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"orsf-and-vi-all-at-once","dir":"Reference","previous_headings":"","what":"ORSF and VI all at once","title":"ORSF variable importance — orsf_vi","text":"fit ORSF compute vi time     can still get negation VI fit, needs computed","code":"fit_permute_vi <- orsf(pbc_orsf,                         Surv(time, status) ~ . - id,                         importance = 'permute')  # get the vi instantly (i.e., it doesn't need to be computed again) orsf_vi_permute(fit_permute_vi) ##          bili           age       albumin         stage       ascites  ##  0.0102625547  0.0082308814  0.0047926651  0.0044280058  0.0034903105  ##        copper         edema           sex          chol           ast  ##  0.0030214628  0.0021730718  0.0019795791  0.0019274849  0.0013023547  ##       protime      platelet       spiders           trt          trig  ##  0.0010939779  0.0004167535  0.0003125651 -0.0001041884 -0.0002083767  ##      alk.phos        hepato  ## -0.0009897895 -0.0015628256 orsf_vi_negate(fit_permute_vi) ##          bili           age       ascites       protime           sex  ##  0.0152635966  0.0103146489  0.0056782663  0.0051052303  0.0044801000  ##         stage        copper         edema       spiders       albumin  ##  0.0039591582  0.0031777454  0.0027361851  0.0008335070 -0.0003125651  ##          chol           ast        hepato          trig      alk.phos  ## -0.0005209419 -0.0006251302 -0.0011981663 -0.0029172744 -0.0032819337  ##           trt      platelet  ## -0.0048447593 -0.0054698896"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ORSF variable importance — orsf_vi","text":"Harrell FE, Califf RM, Pryor DB, Lee KL, Rosati RA. Evaluating Yield Medical Tests. JAMA 1982; 247(18):2543-2546. DOI: 10.1001/jama.1982.03320430047030 Breiman L. Random forests. Machine learning 2001 Oct; 45(1):5-32. DOI: 10.1023/:1010933404324 Menze BH, Kelm BM, Splitthoff DN, Koethe U, Hamprecht FA. oblique random forests. Joint European Conference Machine Learning Knowledge Discovery Databases 2011 Sep 4; pp. 453-469. DOI: 10.1007/978-3-642-23783-6_29 Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey , Pajewski NM. Accelerated interpretable oblique random survival forests. arXiv e-prints 2022 Aug; arXiv-2208. URL: https://arxiv.org/abs/2208.01129","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"data light modification survival::pbc data. modifications :","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"","code":"pbc_orsf"},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"data frame 276 rows 20 variables: id case number time number days registration earlier death, transplantion, study analysis July, 1986 status status endpoint, 0 censored transplant, 1 dead trt randomized treatment group: D-penicillmain placebo age years sex m/f ascites presence ascites hepato presence hepatomegaly enlarged liver spiders blood vessel malformations skin edema 0 edema, 0.5 untreated successfully treated, 1 edema despite diuretic therapy bili serum bilirubin (mg/dl) chol serum cholesterol (mg/dl) albumin serum albumin (g/dl) copper urine copper (ug/day) alk.phos alkaline phosphotase (U/liter) ast aspartate aminotransferase, called SGOT (U/ml) trig triglycerides (mg/dl) platelet platelet count protime standardized blood clotting time stage histologic stage disease (needs biopsy)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"T Therneau P Grambsch (2000), Modeling Survival Data: Extending Cox Model, Springer-Verlag, New York. ISBN: 0-387-98784-3.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"removed rows missing data converted status 0 censor transplant, 1 dead converted stage ordered factor. converted trt, ascites, hepato, spiders, edema factors.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.orsf_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute predictions using ORSF — predict.orsf_fit","title":"Compute predictions using ORSF — predict.orsf_fit","text":"Predicted risk survival (someday also hazard mortality) ORSF model.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.orsf_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute predictions using ORSF — predict.orsf_fit","text":"","code":"# S3 method for orsf_fit predict(   object,   new_data,   pred_horizon = NULL,   pred_type = \"risk\",   na_action = \"fail\",   boundary_checks = TRUE,   ... )"},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.orsf_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute predictions using ORSF — predict.orsf_fit","text":"object (orsf_fit) trained oblique random survival forest (see orsf). new_data data.frame, tibble, data.table compute predictions . pred_horizon (double) value vector indicating time(s) predictions calibrated . E.g., predicting risk incident heart failure within next 10 years, pred_horizon = 10. pred_horizon can NULL pred_type 'mort', since mortality predictions aggregated event times pred_type (character) type predictions compute. Valid options 'risk' : probability event pred_horizon. 'surv' : 1 - risk. 'chf': cumulative hazard function 'mort': mortality prediction na_action (character) happen new_data contains missing values (.e., NA values). Valid options : 'fail' : error thrown new_data contains NA values 'pass' : output NA rows new_data 1 NA value predictors used object. 'omit' : rows new_data incomplete data dropped boundary_checks (logical) TRUE, pred_horizon checked make sure requested values less maximum observed time object's training data. FALSE, checks skipped. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.orsf_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute predictions using ORSF — predict.orsf_fit","text":"matrix predictions. Column j matrix corresponds value j pred_horizon. Row matrix corresponds row new_data.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.orsf_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute predictions using ORSF — predict.orsf_fit","text":"new_data must columns equivalent types data used train object. Also, factors new_data must levels data used train object. pred_horizon values exceed maximum follow-time object's training data, truly want , set boundary_checks = FALSE can use pred_horizon large want. Note predictions beyond maximum follow-time object's training data equal predictions maximum follow-time, aorsf estimate survival beyond maximum observed time. unspecified, pred_horizon may automatically specified value used oobag_pred_horizon object created (see orsf).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.orsf_fit.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute predictions using ORSF — predict.orsf_fit","text":"Begin fitting ORSF ensemble:   Predict risk, survival, cumulative hazard one several times:             Predict mortality, defined number events forest’s population observations characteristics like current observation. type prediction require specify prediction horizon","code":"library(aorsf)  set.seed(329730)  index_train <- sample(nrow(pbc_orsf), 150)   pbc_orsf_train <- pbc_orsf[index_train, ] pbc_orsf_test <- pbc_orsf[-index_train, ]  fit <- orsf(data = pbc_orsf_train,              formula = Surv(time, status) ~ . - id,             oobag_pred_horizon = 365.25 * 5) # predicted risk, the default predict(fit,          new_data = pbc_orsf_test[1:5, ],          pred_type = 'risk',          pred_horizon = c(500, 1000, 1500)) ##             [,1]       [,2]       [,3] ## [1,] 0.502277249 0.78369254 0.92143996 ## [2,] 0.035699097 0.07776627 0.14863153 ## [3,] 0.110355739 0.26854128 0.40820574 ## [4,] 0.011659607 0.02787088 0.07267587 ## [5,] 0.006644573 0.01591640 0.04903247 # predicted survival, i.e., 1 - risk predict(fit,          new_data = pbc_orsf_test[1:5, ],          pred_type = 'surv',         pred_horizon = c(500, 1000, 1500)) ##           [,1]      [,2]       [,3] ## [1,] 0.4977228 0.2163075 0.07856004 ## [2,] 0.9643009 0.9222337 0.85136847 ## [3,] 0.8896443 0.7314587 0.59179426 ## [4,] 0.9883404 0.9721291 0.92732413 ## [5,] 0.9933554 0.9840836 0.95096753 # predicted cumulative hazard function # (expected number of events for person i at time j) predict(fit,          new_data = pbc_orsf_test[1:5, ],          pred_type = 'chf',         pred_horizon = c(500, 1000, 1500)) ##             [,1]       [,2]       [,3] ## [1,] 0.705240501 1.37551172 1.79408459 ## [2,] 0.037859536 0.09860152 0.20087409 ## [3,] 0.131539617 0.38704960 0.68840843 ## [4,] 0.011659607 0.02870233 0.08408614 ## [5,] 0.006644573 0.01789893 0.05801293 predict(fit,          new_data = pbc_orsf_test[1:5, ],          pred_type = 'mort') ##           [,1] ## [1,] 71.355153 ## [2,] 10.811443 ## [3,] 27.509084 ## [4,]  5.930542 ## [5,]  3.891028"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect your ORSF model — print.orsf_fit","title":"Inspect your ORSF model — print.orsf_fit","text":"Printing ORSF model tells : Linear combinations: identified? N observations: Number rows training data N events: Number events training data N trees: Number trees forest N predictors total: Total number columns predictor matrix N predictors per node: Number variables used linear combinations Average leaves per tree: proxy depth trees Min observations leaf: See leaf_min_obs orsf Min events leaf: See leaf_min_events orsf OOB stat value: --bag error fitting trees OOB stat type: --bag error computed? Variable importance: variable importance computed?","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect your ORSF model — print.orsf_fit","text":"","code":"# S3 method for orsf_fit print(x, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect your ORSF model — print.orsf_fit","text":"x (orsf_fit) oblique random survival forest (ORSF; see orsf). ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect your ORSF model — print.orsf_fit","text":"x, invisibly.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect your ORSF model — print.orsf_fit","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id, n_tree = 5)  print(object) #> ---------- Oblique random survival forest #>  #>      Linear combinations: Accelerated #>           N observations: 276 #>                 N events: 111 #>                  N trees: 5 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 23 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.71 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_summary_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ORSF summary — print.orsf_summary_uni","title":"Print ORSF summary — print.orsf_summary_uni","text":"Print ORSF summary","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_summary_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print ORSF summary — print.orsf_summary_uni","text":"","code":"# S3 method for orsf_summary_uni print(x, n_variables = NULL, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_summary_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ORSF summary — print.orsf_summary_uni","text":"x object class 'orsf_summary' n_variables number variables print ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_summary_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ORSF summary — print.orsf_summary_uni","text":"invisibly, x","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_summary_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print ORSF summary — print.orsf_summary_uni","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  smry <- orsf_summarize_uni(object, n_variables = 3)  print(smry) #>  #> -- bili (VI Rank: 1) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2335994 0.1252466 0.04276339 0.3850247 #>    1.4 0.2547917 0.1486339 0.05897157 0.4179021 #>    3.5 0.3674010 0.2758439 0.15987503 0.5660375 #>  #> -- age (VI Rank: 2) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     42 0.2702333 0.1272002 0.03910208 0.4661615 #>     50 0.2998134 0.1638834 0.04411596 0.5170532 #>     57 0.3342958 0.2167148 0.07232662 0.5746904 #>  #> -- copper (VI Rank: 3) ------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     43 0.2652409 0.1422542 0.04088186 0.4684904 #>     74 0.2812730 0.1599898 0.05391896 0.5005060 #>    129 0.3357834 0.2209811 0.09931916 0.5578152 #>  #>  Predicted risk at time t = 1788 for top 3 predictors"},{"path":"https://bcjaeger.github.io/aorsf/news/index.html","id":"aorsf-003","dir":"Changelog","previous_headings":"","what":"aorsf 0.0.3","title":"aorsf 0.0.3","text":"Added clarification docs pros/cons different variable importance techniques Added regression tests aorsf versus obliqueRSF (similar) Additional support tests functions long right hand sides Updated --bag vignette appropriate custom functions. Allow status values input data general, .e., just 0 1. Allow missing values predict functions, including partial dependence.","code":""},{"path":"https://bcjaeger.github.io/aorsf/news/index.html","id":"aorsf-002","dir":"Changelog","previous_headings":"","what":"aorsf 0.0.2","title":"aorsf 0.0.2","text":"CRAN release: 2022-09-05 Modified unit tests compatibility extra checks run CRAN.","code":""},{"path":"https://bcjaeger.github.io/aorsf/news/index.html","id":"aorsf-001","dir":"Changelog","previous_headings":"","what":"aorsf 0.0.1","title":"aorsf 0.0.1","text":"CRAN release: 2022-08-23 Added orsf_control_custom(), allows users submit custom functions identifying linear combinations inputs growing oblique decision trees. Added weights input orsf, allowing users fit orsf specific data training set. Added chf mort options predict.orsf_fit(). Mortality predictions fully implemented yet - supported partial dependence --bag error estimates. features added future update.","code":""},{"path":"https://bcjaeger.github.io/aorsf/news/index.html","id":"aorsf-0009000","dir":"Changelog","previous_headings":"","what":"aorsf 0.0.0.9000","title":"aorsf 0.0.0.9000","text":"Core features implemented: fit, interpret, predict using oblique random survival forests. Vignettes + Readme covering usage core features. Website hosted GitHub pages, managed pkgdown.","code":""}]
