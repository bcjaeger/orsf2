[{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to aorsf","title":"Contributing to aorsf","text":"Want contribute aorsf? Great! aorsf initially stable state development, great deal active subsequent development envisioned. outline propose change aorsf. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to aorsf","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to aorsf","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to aorsf","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"bcjaeger/aorsf\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to aorsf","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to aorsf","text":"Please note aorsf project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://bcjaeger.github.io/aorsf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 aorsf authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"background-orsf","dir":"Articles","previous_headings":"","what":"Background: ORSF","title":"Introduction to aorsf","text":"oblique random survival forest (ORSF) extension axis-based RSF algorithm. Axis based RSFs can fit several R packages, including RandomForestSRC, party, ranger. However, apart aorsf obliqueRSF, R packages fit ORSFs.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"what-is-an-oblique-decision-tree","dir":"Articles","previous_headings":"","what":"What is an oblique decision tree?","title":"Introduction to aorsf","text":"Decision trees developed splitting set training data two new subsets, goal similarity within new subsets . splitting process repeated resulting subsets data stopping criterion met. new subsets data formed based single predictor, decision tree said axis-based splits data appear perpendicular axis predictor. linear combinations variables used instead single variable, tree oblique splits data neither parallel right angle axis. Decision trees classification axis-based splitting (left) oblique splitting (right). Cases orange squares; controls purple circles. trees partition predictor space defined variables X1 X2, oblique splits better job separating two classes.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"accelerated-orsf","dir":"Articles","previous_headings":"","what":"Accelerated ORSF","title":"Introduction to aorsf","text":"purpose aorsf (‘’ short accelerated) provide routines fit ORSFs scale adequately large data sets. example, aorsf::orsf() runs hundreds times faster predecessor, obliqueRSF::ORSF(). fit accelerated ORSF model, use orsf function: may notice first input aorsf data. design choice makes easier use orsf pipes (.e., %>% |>). instance,","code":"library(aorsf) library(ggplot2)  set.seed(329)  orsf_fit <- orsf(data = pbc_orsf,                   formula = Surv(time, status) ~ . - id,                   n_tree = 2500)  orsf_fit #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 2500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> ----------------------------------------- library(dplyr)  orsf_fit <- pbc_orsf |>   select(-id) |>   orsf(formula = Surv(time, status) ~ .)"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"interpretation","dir":"Articles","previous_headings":"","what":"Interpretation","title":"Introduction to aorsf","text":"aorsf includes several functions dedicated interpretation ORSFs, estimation partial dependence variable importance.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"variable-importance","dir":"Articles","previous_headings":"Interpretation","what":"Variable importance","title":"Introduction to aorsf","text":"aorsf provides multiple ways compute variable importance. compute negation importance, ORSF multiplies coefficient variable -1 re-computes --sample (sometimes referred --bag) accuracy ORSF model. can also compute variable importance using permutation, classical approach. faster alternative permutation negation importance ANOVA importance, computes proportion times variable obtains low p-value (p < 0.01) forest grown.","code":"orsf_vi_negate(orsf_fit) #>          bili           age           sex        copper       ascites  #>  0.0131798291  0.0099499896  0.0070848093  0.0058866431  0.0043759116  #>       spiders       protime         edema           ast       albumin  #>  0.0030214628  0.0025526151  0.0017811250  0.0010939779 -0.0004688477  #>        hepato          chol      alk.phos          trig      platelet  #> -0.0011460721 -0.0015628256 -0.0019795791 -0.0028130861 -0.0041154407  #>           trt  #> -0.0041675349 orsf_vi_permute(orsf_fit) #>          bili           age        copper       ascites         stage  #>  0.0090122942  0.0079704105  0.0058866431  0.0027609919  0.0025526151  #>          chol       albumin       protime           sex       spiders  #>  0.0025005209  0.0018232965  0.0011981663  0.0007814128  0.0007293186  #>           ast      platelet         edema        hepato      alk.phos  #>  0.0006251302 -0.0003646593 -0.0004291569 -0.0007293186 -0.0011981663  #>          trig           trt  #> -0.0015107314 -0.0029172744 orsf_vi_anova(orsf_fit) #>    ascites       bili      edema     copper    albumin        age      stage  #> 0.30967826 0.24619998 0.21284981 0.17863634 0.15186989 0.14669863 0.14480409  #>    protime    spiders     hepato       chol        sex        ast       trig  #> 0.12863221 0.12539359 0.12171568 0.11761006 0.11391341 0.11385624 0.07588287  #>   alk.phos        trt   platelet  #> 0.06324233 0.06046357 0.05202554"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"partial-dependence","dir":"Articles","previous_headings":"Interpretation","what":"Partial dependence","title":"Introduction to aorsf","text":"Partial dependence shows expected prediction ORSF model given set predictor values. orsf_pd_summary() shows summary values predictions given set predictor values  orsf_pd_ice() shows predictions observation specified predictors fixed specified predictor values.","code":"# make a list containing the variable values you # want to compute partial dependence for pd_spec <- list(edema = c(\"0\", \"0.5\", \"1\"),                 bili = seq(0.6, 7.1, by = 0.1))  # orsf_pd_summary automatically computes pd for all combinations # in the list (this can be turned off with expand_grid = FALSE) pd_data <- orsf_pd_summary(object = orsf_fit,                             pd_spec = pd_spec,                            expand_grid = TRUE,                             pred_horizon = 365.25 * 5)  ggplot(pd_data) +  aes(x = bili, y = mean, col = edema) +  geom_line() +   labs(y = 'Predicted risk',       x = 'Bilirubin',       title = 'Partial dependence of bilirubin and edema') +  scale_y_continuous(limits = c(0, 1)) # make a list containing the variable values you # want to compute partial dependence for pd_spec <- list(edema = c(\"0\", \"0.5\", \"1\"),                 bili = seq(0.6, 7.1, by = 0.1))  # orsf_pd_summary automatically computes pd for all combinations # in the list (this can be turned off with expand_grid = FALSE) pd_data <- orsf_pd_ice(object = orsf_fit,                         pd_spec = pd_spec,                        expand_grid = TRUE,                         pred_horizon = 365.25 * 5)  pd_data$edema = paste(\"Edema =\", pd_data$edema)  ggplot(pd_data) +  aes(x = bili, y = pred, group = id_row) +  geom_line(color = 'grey', alpha = 0.25) +   geom_smooth(group = 1) +  labs(y = 'Predicted risk',       x = 'Bilirubin',       title = 'Partial dependence of bilirubin and edema') +  scale_y_continuous(limits = c(0, 1)) +  facet_wrap(~ edema) #> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"summarize-orsf-models","dir":"Articles","previous_headings":"Interpretation","what":"Summarize ORSF models","title":"Introduction to aorsf","text":"Getting straight variable importance partial dependence direct way can often helpful exploratory analyses. want lot information just little code, orsf_summarize_uni() tool :","code":"orsf_summarize_uni(orsf_fit,                     n_variables = 5,                     pred_horizon = 365.25 * 5) #>  #> -- bili (VI Rank: 1) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2429583 0.1284750 0.04840256 0.3928055 #>    1.4 0.2596384 0.1457900 0.05914073 0.4120615 #>    3.5 0.3458558 0.2498307 0.13723033 0.5227983 #>  #> -- age (VI Rank: 2) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     42 0.2674831 0.1409063 0.04296130 0.4512338 #>     50 0.2945834 0.1737065 0.05097475 0.5017808 #>     57 0.3276076 0.2193830 0.07385959 0.5367037 #>  #> -- sex (VI Rank: 3) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      m 0.3560382 0.2469748 0.12206421 0.5731464 #>      f 0.2912662 0.1552082 0.05092011 0.5253999 #>  #> -- copper (VI Rank: 4) ------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     43 0.2626844 0.1415148 0.04755781 0.4371901 #>     74 0.2792341 0.1554124 0.05827489 0.4609205 #>    129 0.3265006 0.2159967 0.10072831 0.5345941 #>  #> -- ascites (VI Rank: 5) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2931932 0.1576125 0.05434581 0.5253999 #>      1 0.4279745 0.3372134 0.21379450 0.6286554 #>  #>  Predicted risk at time t = 1826.25 for top 5 predictors"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"what-about-the-original-orsf","dir":"Articles","previous_headings":"","what":"What about the original ORSF?","title":"Introduction to aorsf","text":"original ORSF (.e., obliqueRSF) used glmnet find linear combinations inputs. aorsf allows users implement approach using orsf_control_net() function: net forests fit lot faster original ORSF function obliqueRSF. However, net forests still much slower cph ones:","code":"orsf_net <- orsf(data = pbc_orsf,                   formula = Surv(time, status) ~ . - id,                   control = orsf_control_net(),                  n_tree = 50) # tracking how long it takes to fit 50 glmnet trees print(  t1 <- system.time(   orsf(data = pbc_orsf,         formula = Surv(time, status) ~ . - id,         control = orsf_control_net(),        n_tree = 50)  ) ) #>    user  system elapsed  #>   3.171   0.000   3.172  # and how long it takes to fit 50 cph trees print(  t2 <- system.time(   orsf(data = pbc_orsf,         formula = Surv(time, status) ~ . - id,         control = orsf_control_cph(),        n_tree = 50)  ) ) #>    user  system elapsed  #>   0.053   0.000   0.053  t1['elapsed'] / t2['elapsed'] #>  elapsed  #> 59.84906"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"aorsf-and-other-machine-learning-software","dir":"Articles","previous_headings":"","what":"aorsf and other machine learning software","title":"Introduction to aorsf","text":"Generally, aorsf follows conventions set R packages randomForest randomForestSRC. example, print method aorsf models similar randomForestSRC models, specification computing variable importance objects returned variable importance functions. Similar randomForestSRC, aorsf allows recommends partial dependence estimated using --bag data. unique feature aorsf fitting oblique random survival forests fast maintaining strong prediction accuracy. RLT obliqueRSF fit oblique random survival forests, aorsf faster. ranger randomForestSRC fit survival forests, neither package supports oblique splitting. obliqueRF fits oblique random forests classification regression, survival. PPforest fits oblique random forests classification survival. default prediction behavior aorsf models produce predicted risk specific prediction horizon, default ranger randomForestSRC.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"out-of-bag-data","dir":"Articles","previous_headings":"","what":"Out-of-bag data","title":"Out-of-bag predictions and evaluation","text":"random forests, tree grown bootstrapped version training set. bootstrap samples selected replacement, bootstrapped training set contains two-thirds instances original training set. ‘--bag’ data instances bootstrapped training set.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"out-of-bag-predictions-and-error","dir":"Articles","previous_headings":"","what":"Out-of-bag predictions and error","title":"Out-of-bag predictions and evaluation","text":"tree random forest can make predictions --bag data, --bag predictions can aggregated make ensemble --bag prediction. Since --bag data used grow tree, accuracy ensemble --bag predictions approximate generalization error random forest. --bag prediction error plays central role routines estimate variable importance, e.g. negation importance. Let’s fit oblique random survival forest plot distribution ensemble --bag predictions.  surprisingly, survival predictions 0 1. Next, let’s check --bag accuracy fit: --bag estimate Harrell’s C-statistic (default method evaluate --bag predictions) 0.836841.","code":"fit <- orsf(data = pbc_orsf,              formula = Surv(time, status) ~ . - id,             oobag_pred_horizon = 3500)  hist(fit$surv_oobag,       main = 'Ensemble out-of-bag survival predictions at t=3,500') # what function is used to evaluate out-of-bag predictions? fit$eval_oobag$stat_type #> [1] \"Harrell's C-statistic\"  # what is the output from this function? fit$eval_oobag$stat_values #>          [,1] #> [1,] 0.836841"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"monitoring-out-of-bag-error","dir":"Articles","previous_headings":"","what":"Monitoring out-of-bag error","title":"Out-of-bag predictions and evaluation","text":"--bag data set contains one-third training set, --bag error estimate usually converges stable value trees added forest. want monitor convergence --bag error oblique random survival forest, can set oobag_eval_every compute --bag error every oobag_eval_every tree. example, let’s compute --bag error fitting tree forest 50 trees:  general, least 500 trees recommended random forest fit. ’re just using 50 case better illustration --bag error curve. Also, helps make run-times low whenever need re-compile package vignettes.","code":"fit <- orsf(data = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 50,             oobag_pred_horizon = 3500,             oobag_eval_every = 1)  plot(  x = seq(1, 50, by = 1),  y = fit$eval_oobag$stat_values,   main = 'Out-of-bag C-statistic computed after each new tree is grown.',  xlab = 'Number of trees grown',  ylab = fit$eval_oobag$stat_type )"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"user-supplied-out-of-bag-evaluation-functions","dir":"Articles","previous_headings":"","what":"User-supplied out-of-bag evaluation functions","title":"Out-of-bag predictions and evaluation","text":"cases, may want use function compute --bag error. example, simple (incorrect) way compute Brier score. (incorrect account censoring) two ways apply function compute --bag error. First, can apply function --bag survival predictions stored ‘aorsf’ objects, e.g: Second, can pass function orsf(), used place Harrell’s C-statistic:  Let’s run one example showing can done using functions packages, e.g., survivalROC survivalROC package:","code":"oobag_fun_brier <- function(y_mat, s_vec){   # risk = 1 - survival   r_vec <- 1 - s_vec   # mean of the squared differences between predicted and observed risk  mean( (y_mat[, 'status'] - r_vec)^2 )   } oobag_fun_brier(y_mat = fit$data[, c('time', 'status')],                 s_vec = fit$surv_oobag) #> [1] 0.185614 fit <- orsf(data = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 50,             oobag_pred_horizon = 3500,             oobag_fun = oobag_fun_brier,             oobag_eval_every = 1)  plot(  x = seq(1, 50, by = 1),  y = fit$eval_oobag$stat_values,   main = 'Out-of-bag error computed after each new tree is grown.',  sub = 'For the Brier score, lower values indicate more accurate predictions',  xlab = 'Number of trees grown',  ylab = \"Brier score\" ) oobag_fun_sroc <- function(y_mat, s_vec){   score <- survivalROC::survivalROC(   Stime = y_mat[, 'time'],   status = y_mat[, 'status'],   # risk = 1 - survival   marker = 1 - s_vec,   # important!! Make sure this matches the time you used in orsf   predict.time = 3500,   # nearest neighbor estimation for censoring   method = \"NNE\",   # value taken from ?survivalROC examples   span = 0.25 * nrow(y_mat)^(-0.20)  )    # oobag_fun needs to return a numeric value of length 1  score$AUC  }  fit <- orsf(data = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 50,             oobag_pred_horizon = 3500,             oobag_fun = oobag_fun_sroc,             oobag_eval_every = 1)  plot(  x = seq(50),  y = fit$eval_oobag$stat_values,   main = 'Out-of-bag time-dependent AUC\\ncomputed after each new tree is grown.',  xlab = 'Number of trees grown',  ylab = \"AUC at t = 3,500\" )"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"specific-instructions-on-user-supplied-functions","dir":"Articles","previous_headings":"User-supplied out-of-bag evaluation functions","what":"Specific instructions on user-supplied functions","title":"Out-of-bag predictions and evaluation","text":"User-supplied functions must: exactly two arguments named y_mat s_vec. return numeric output length 1 either conditions true, error occur. simple test make sure user-supplied function work aorsf package :","code":"# Helper code to make sure your oobag_fun function will work with aorsf  # time and status values test_time <- seq(from = 1, to = 5, length.out = 100) test_status <- rep(c(0,1), each = 50)  # y-matrix is presumed to contain time and status (with column names) y_mat <- cbind(time = test_time, status = test_status) # s_vec is presumed to be a vector of survival probabilities s_vec <- seq(0.9, 0.1, length.out = 100)  # see 1 in the checklist above names(formals(oobag_fun_sroc)) == c(\"y_mat\", \"s_vec\") #> [1] TRUE TRUE  test_output <- oobag_fun_sroc(y_mat = y_mat, s_vec = s_vec)  # test output should be numeric is.numeric(test_output) #> [1] TRUE # test_output should be a numeric value of length 1 length(test_output) == 1 #> [1] TRUE"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"user-supplied-functions-for-negation-importance-","dir":"Articles","previous_headings":"","what":"User-supplied functions for negation importance.","title":"Out-of-bag predictions and evaluation","text":"Negation importance based --bag error, course may curious negation importance computed using different statistics. workflow exactly example , except specify importance = 'negate' fit model. Also, speed computations, going monitor --bag error .","code":"fit_sroc <- orsf(data = pbc_orsf,                  formula = Surv(time, status) ~ . - id,                  n_tree = 50,                  oobag_pred_horizon = 3500,                  oobag_fun = oobag_fun_sroc,                  importance = 'negate')  fit_sroc$importance #>       albumin          bili         sex_f           ast       protime  #>  4.483660e-02  4.002740e-02  1.629882e-02  1.249086e-02  9.364510e-03  #>      hepato_1     ascites_1     edema_0.5         stage       edema_1  #> -9.255176e-05 -6.659719e-04 -2.234946e-03 -3.569191e-03 -7.016375e-03  #>      alk.phos      platelet           age          chol     spiders_1  #> -7.176547e-03 -7.981141e-03 -9.845010e-03 -9.890304e-03 -1.713659e-02  #>          trig        copper   trt_placebo  #> -1.767163e-02 -2.627493e-02 -3.953151e-02"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"multiple-functions-for-negation-importance","dir":"Articles","previous_headings":"User-supplied functions for negation importance.","what":"Multiple functions for negation importance","title":"Out-of-bag predictions and evaluation","text":"’d like compute several types negation importance model, can done using orsf_vi_negate(), allows specify --bag function just orsf() : discrepancies methods ranking important variables. simulation study determine method estimating --bag error better job discriminating important unimportant variables helpful.","code":"fit <- orsf(data = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 500,             oobag_pred_horizon = 3500)  # use default technique (harrell's C-statistic) orsf_vi_negate(fit) #>          bili           age           sex       albumin        copper  #>  0.0164096687  0.0162012919  0.0090122942  0.0077099396  0.0053657012  #>         stage       ascites        hepato           ast       spiders  #>  0.0039070640  0.0038549698  0.0036465930  0.0035944989  0.0027088977  #>           trt         edema          trig          chol      alk.phos  #>  0.0021879558  0.0020763254  0.0005730360  0.0003646593  0.0003125651  #>      platelet  #> -0.0031777454  # use C-statistic from survivalROC orsf_vi_negate(fit, oobag_fun = oobag_fun_sroc) #>      albumin      protime          ast          sex         bili     platelet  #>  0.031560062  0.026389021  0.021451189  0.018932784  0.012866681  0.009808440  #>      ascites     alk.phos         trig       hepato        edema      spiders  #>  0.004024116  0.003295607  0.001604744  0.001549874 -0.001430838 -0.001696256  #>        stage       copper          age         chol          trt  #> -0.003726355 -0.004762028 -0.008133899 -0.013460249 -0.019145473  # you can also use custom functions for permutation importance orsf_vi_permute(fit, oobag_fun = oobag_fun_sroc) #>         stage           ast      alk.phos        hepato          bili  #>  2.200321e-02  2.120122e-02  1.955655e-02  1.624146e-02  1.543919e-02  #>       protime          trig          chol         edema       spiders  #>  1.107202e-02  6.556621e-03  5.734156e-03  4.473523e-03  2.790647e-03  #>       albumin       ascites        copper      platelet           trt  #>  2.579848e-03 -9.603405e-05 -1.253437e-03 -2.154845e-03 -3.603000e-03  #>           sex           age  #> -9.205894e-03 -1.325183e-02"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"i-really-need-to-use","dir":"Articles","previous_headings":"","what":"I really need to use","title":"Out-of-bag predictions and evaluation","text":"can use package whatsoever evaluate --bag predictions. can access final --bag survival predictions aorsf model like : notes remember evaluating --bag error surv_oobag: oobag_pred_horizon input orsf() determines prediction horizon --bag predictions. prediction horizon critical input evaluation predictions time--event outcomes. functions expect predicted risk (.e., 1 - predicted survival), others expect predicted survival. cases, also able use package whatsoever compute negation importance. One exception point riskRegression. experimented riskRegression found functions work expect try run C++. think may due riskRegression’s internal use data.table modification reference, certainty yet.","code":"surv_oobag <- fit$surv_oobag  surv_oobag[1:5, ] #> [1] 0.0113255 0.4646616 0.1911075 0.1998621 0.3396515"},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"background-partial-dependence","dir":"Articles","previous_headings":"","what":"Background: Partial dependence","title":"Compute partial dependence with ORSF","text":"Partial dependence plots show average marginal effect combination features imparts predicted risk. Individual conditional expectation plots narrow focus individual datapoints.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"getting-partial-dependence-from-an-aorsf-object","dir":"Articles","previous_headings":"","what":"Getting partial dependence from an aorsf object","title":"Compute partial dependence with ORSF","text":"First fit accelerated ORSF model pbc_orsf, modification Mayo Clinic Primary Biliary Cholangitis data: view partial dependence predicted risk combination blood vessel malformations skin (spiders) urine copper (copper), use orsf_pd_summary. pd_spec argument contains variable values want compute partial dependence . default oobag == TRUE, meaning partial dependence calculated using bag training data. keep set TRUE computing partial dependence using training data. expand_grid == TRUE tells orsf_pd_summary use combinations values pd_spec.  Next lets look Individual Conditional Expectation (ICE). instance dataset represented one line showing change prediction dependent change feature. orsf_pd_ice allows use multiple features, recommended view one time. plot can see data point’s predicted survival changes copper changes.","code":"set.seed(123)  orsf_fit <- orsf(data = pbc_orsf,                  formula = Surv(time, status) ~ . -id,                  n_tree = 2500) pd_spec <- list(spiders = c(\"0\", \"1\"),                 copper = seq(45, 130, by = 10))  pd_data <- orsf_pd_summary(object = orsf_fit,                            pd_spec = pd_spec,                            oobag = TRUE,                            expand_grid = TRUE)  ggplot(pd_data) +  aes(x = copper, y = mean, col = spiders) +  geom_line() +   labs(y = 'Predicted risk',       x = 'Urine Copper',       title = 'Partial dependence of copper and spiders') ice_data <- orsf_pd_ice(object = orsf_fit,                        pd_spec = list(copper = seq(45, 130, by = 10)),                        expand_grid = TRUE)  ggplot(ice_data[id_row %in% c(1:30)]) +  aes(x=copper, y=pred, group=id_row) +  geom_line() +  labs(y = 'Predicted risk',      x = 'Urine Copper',      title = 'Individual conditional expectation of copper',      subtitle = 'Data for 30 patients are shown')"},{"path":"https://bcjaeger.github.io/aorsf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Byron Jaeger. Author, maintainer. Nicholas Pajewski. Contributor. Sawyer Welden. Contributor. Christopher Jackson. Reviewer.","code":""},{"path":"https://bcjaeger.github.io/aorsf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey , Pajewski NM. Accelerated interpretable oblique random survival forests. arXiv e-prints. 2022 Aug 3:arXiv-2208. Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min YI, Mcclure LA, Howard G, Simon N. Oblique Random Survival Forests. Annals Applied Statistics. 13(3): 1847-1883. URL https://doi.org/10.1214/19-AOAS1261 DOI: 10.1214/19-AOAS1261","code":"@Article{,   title = {Accelerated and interpretable oblique random survival forests},   author = {Byron C. Jaeger and Sawyer Welden and Kristin Lenoir and Jaime L. Speiser and Matthew W. Segar and Ambarish Pandey and Nicholas M. Pajewski},   journal = {arXiv},   year = {2022},   url = {https://arxiv.org/abs/2208.01129}, } @Article{,   title = {Oblique Random Survival Forests},   author = {Byron C. Jaeger and D. Leann Long and Dustin M. Long and Mario Sims and Jeff M. Szychowski and Yuan-I Min and Leslie A. Mcclure and George Howard and Noah Simon},   journal = {Annals of Applied Statistics},   year = {2019},   volume = {13},   number = {3},   pages = {1847--1883},   url = {https://doi.org/10.1214/19-AOAS1261}, }"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"aorsf-","dir":"","previous_headings":"","what":"Accelerated Oblique Random Survival Forests","title":"Accelerated Oblique Random Survival Forests","text":"aorsf provides optimized software fit, interpret, make predictions oblique random survival forests (ORSFs).","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"why-aorsf","dir":"","previous_headings":"","what":"Why aorsf?","title":"Accelerated Oblique Random Survival Forests","text":"400 times faster obliqueRSF (see Jaeger, 2019). accurate predictions time--event outcomes. negation importance, novel technique estimate variable importance ORSFs. intuitive API formula based interface. extensive input checks + informative error messages.","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Accelerated Oblique Random Survival Forests","text":"can install development version aorsf GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"bcjaeger/aorsf\")"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Accelerated Oblique Random Survival Forests","text":"orsf() function used fit ORSFs. Printing output orsf() give descriptive statistics ensemble. interpreting fit? use orsf_vi_negate() orsf_vi_anova() variable importance use orsf_pd_ice() orsf_pd_summary() individual aggregated partial dependence values. use orsf_summarize_uni() show top predictor variables ORSF model expected predicted risk specific values predictors. (term ‘uni’ short univariate.)","code":"library(aorsf)  fit <- orsf(data = pbc_orsf,             formula = Surv(time, status) ~ . - id)  print(fit) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>  #> ----------------------------------------- orsf_vi_negate(fit) #>          bili           age        copper           sex       ascites  #>  0.0143259012  0.0135965826  0.0082829756  0.0078662221  0.0050010419  #>         stage       spiders       protime           ast         edema  #>  0.0041675349  0.0040112523  0.0036986872  0.0036465930  0.0027833180  #>          chol      alk.phos        hepato       albumin          trig  #>  0.0007293186  0.0006251302  0.0005730360  0.0004688477 -0.0017712023  #>      platelet           trt  #> -0.0032298395 -0.0036986872 orsf_pd_summary(fit, pd_spec = list(bili = c(1:5))) #>     bili      mean        lwr      medn       upr #>    <int>     <num>      <num>     <num>     <num> #> 1:     1 0.2469777 0.01345288 0.1315400 0.8857421 #> 2:     2 0.2839531 0.02911864 0.1684011 0.8986682 #> 3:     3 0.3241288 0.04961583 0.2261766 0.9148388 #> 4:     4 0.3645008 0.07139964 0.2834042 0.9188526 #> 5:     5 0.3974148 0.09856039 0.3182883 0.9282819 # take a look at the top 5 variables  # for continuous predictors, see expected risk at 25/50/75th quantile # for categorical predictors, see expected risk in specified category  orsf_summarize_uni(object = fit, n_variables = 5) #>  #> -- bili (VI Rank: 1) ---------------------------- #>  #>         |---------------- risk ----------------| #>   Value      Mean    Median     25th %    75th % #>  <char>     <num>     <num>      <num>     <num> #>    0.80 0.2426995 0.1308204 0.05059714 0.3869034 #>     1.4 0.2594904 0.1421002 0.06048081 0.4252482 #>     3.5 0.3457362 0.2538523 0.13447505 0.5257414 #>  #> -- age (VI Rank: 2) ----------------------------- #>  #>         |---------------- risk ----------------| #>   Value      Mean    Median     25th %    75th % #>  <char>     <num>     <num>      <num>     <num> #>      42 0.2659744 0.1379398 0.04009427 0.4327782 #>      50 0.2950065 0.1664274 0.05262147 0.4928079 #>      57 0.3286207 0.2179738 0.07502315 0.5466582 #>  #> -- copper (VI Rank: 3) -------------------------- #>  #>         |---------------- risk ----------------| #>   Value      Mean    Median     25th %    75th % #>  <char>     <num>     <num>      <num>     <num> #>      43 0.2630432 0.1471669 0.04848619 0.4517837 #>      74 0.2799984 0.1593967 0.06055610 0.4846709 #>     129 0.3257924 0.2135642 0.09899796 0.5250845 #>  #> -- sex (VI Rank: 4) ----------------------------- #>  #>         |---------------- risk ----------------| #>   Value      Mean    Median     25th %    75th % #>  <char>     <num>     <num>      <num>     <num> #>       m 0.3538255 0.2450266 0.12591346 0.5722112 #>       f 0.2907292 0.1571660 0.05143278 0.5015086 #>  #> -- ascites (VI Rank: 5) ------------------------- #>  #>         |---------------- risk ----------------| #>   Value      Mean    Median     25th %    75th % #>  <char>     <num>     <num>      <num>     <num> #>       0 0.2924870 0.1591568 0.05274239 0.5167522 #>       1 0.4295291 0.3452233 0.21235610 0.6302404 #>  #>  Predicted risk at time t = 1788 for top 5 predictors"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"comparison-to-existing-software","dir":"","previous_headings":"","what":"Comparison to existing software","title":"Accelerated Oblique Random Survival Forests","text":"Jaeger (2022) describes aorsf detail, summary procedures used tree fitting algorithm general benchmark comparing aorsf obliqueRSF (several learners) terms prediction accuracy computational efficiency.","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Accelerated Oblique Random Survival Forests","text":"Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min YI, Mcclure LA, Howard G, Simon N. Oblique random survival forests. Annals Applied Statistics. 2019 Sep;13(3):1847-83. URL: https://doi.org/10.1214/19-AOAS1261 DOI: 10.1214/19-AOAS1261 Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey , Pajewski NM. Accelerated interpretable oblique random survival forests. arXiv e-prints. 2022 Aug 3:arXiv-2208. URL: https://arxiv.org/abs/2208.01129","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Accelerated Oblique Random Survival Forests","text":"developers aorsf receive financial support Center Biomedical Informatics, Wake Forest University School Medicine. also receive support National Center Advancing Translational Sciences National Institutes Health Award Number UL1TR001420. content solely responsibility authors necessarily represent official views National Institutes Health.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/aorsf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","title":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","text":"Fit, interpret, make predictions oblique random survival forests. Oblique decision trees notoriously slow compared axis based counterparts, 'aorsf' runs fast faster axis-based decision tree algorithms right-censored time--event outcomes.","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/aorsf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","text":"Maintainer: Byron Jaeger bjaeger@wakehealth.edu (ORCID) contributors: Nicholas Pajewski [contributor] Sawyer Welden swelden@wakehealth.edu [contributor] Christopher Jackson chris.jackson@mrc-bsu.cam.ac.uk [reviewer]","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.aorsf_summary_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to data.table — as.data.table.aorsf_summary_uni","title":"Coerce to data.table — as.data.table.aorsf_summary_uni","text":"Convert 'aorsf_summary' object data.table object.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.aorsf_summary_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to data.table — as.data.table.aorsf_summary_uni","text":"","code":"# S3 method for aorsf_summary_uni as.data.table(x, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.aorsf_summary_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to data.table — as.data.table.aorsf_summary_uni","text":"x object class 'aorsf_summary_uni' ... used","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.aorsf_summary_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to data.table — as.data.table.aorsf_summary_uni","text":"data.table","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.aorsf_summary_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to data.table — as.data.table.aorsf_summary_uni","text":"","code":"library(data.table)  object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  smry <- orsf_summarize_uni(object, n_variables = 3)  as.data.table(smry) #>    variable  importance value      mean      medn        lwr       upr level #> 1:     bili 0.015419879  0.80 0.2434205 0.1299289 0.04482333 0.3904000  <NA> #> 2:     bili 0.015419879   1.4 0.2617031 0.1541416 0.06096435 0.4181001  <NA> #> 3:     bili 0.015419879   3.5 0.3479698 0.2549847 0.14018588 0.5370119  <NA> #> 4:      age 0.008335070    42 0.2689790 0.1446642 0.04237017 0.4486990  <NA> #> 5:      age 0.008335070    50 0.2948567 0.1777016 0.05065291 0.4855830  <NA> #> 6:      age 0.008335070    57 0.3285040 0.2192016 0.06890803 0.5514212  <NA> #> 7:   copper 0.007918316    43 0.2656110 0.1515880 0.04515994 0.4596518  <NA> #> 8:   copper 0.007918316    74 0.2823392 0.1667959 0.05628894 0.4887066  <NA> #> 9:   copper 0.007918316   129 0.3297014 0.2226223 0.09439605 0.5438170  <NA>"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Oblique Random Survival Forest (ORSF) — orsf","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"oblique random survival forest (ORSF) extension RSF algorithm developed Ishwaran et al maintained RandomForestSRC package. difference ORSF RSF ORSF uses linear combinations input variables whereas RSF uses single variable growing new nodes survival decision trees. linear combination expression constructed set terms multiplying term constant adding results (e.g. linear combination x y expression form ax + , b constants). details ORSF algorithm, see Jaeger et al, 2019. orsf() function implements novel algorithm speeds ORSF algorithm described Jaeger et al (see details).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"","code":"orsf(   data,   formula,   control = orsf_control_cph(),   weights = NULL,   n_tree = 500,   n_split = 5,   n_retry = 3,   mtry = NULL,   leaf_min_events = 1,   leaf_min_obs = 5,   split_min_events = 5,   split_min_obs = 10,   split_min_stat = 3.841459,   oobag_pred = TRUE,   oobag_pred_horizon = NULL,   oobag_eval_every = n_tree,   oobag_fun = NULL,   importance = \"anova\",   tree_seeds = NULL,   attach_data = TRUE,   no_fit = FALSE,   ... )  orsf_train(object)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"data (data.frame) contains relevant variables. formula (formula) formula object, response left ~ operator, terms right (see details). Variables right hand size ~ can numeric, integer, factor variables. Factors may ordered unordered. control aorsf_control object, created orsf_control_net orsf_control_cph. Default control = orsf_control_cph(). weights (double) optional vector weights. given, input vector length equal number rows data. values weights treated like replication weights, .e., weight value 2 thing 2 observations data, containing copy corresponding person's data. Use input cautiously, orsf count number observations events prior growing node tree, higher values weights lead deeper trees. n_tree (integer) number trees grow. Default n_tree = 500. n_split (integer) number cut-points assessed splitting node decision trees. Default n_split = 5. n_retry (integer) node can split, current linear combination inputs unable provide valid split, orsf try new linear combination based different set randomly selected predictors, n_retry pred_horizon. n_retry = 0 retry mechanic applied. Default n_retry = 3. mtry (integer) Number variables randomly selected candidates splitting node. default smallest integer greater square root number features, .e., mtry = ceiling(sqrt(number predictors)) leaf_min_events (integer) minimum number events leaf node. Default leaf_min_events = 1 leaf_min_obs (integer) minimum number observations leaf node. Default leaf_min_obs = 5 split_min_events (integer) minimum number events required split node. Default split_min_events = 5 split_min_obs (integer) minimum number observations required split node. Default split_min_obs = 10. split_min_stat (double) minimum test statistic required split node. Default 3.841459 log-rank test, roughly p-value 0.05 oobag_pred (logical) TRUE --bag predictions returned aorsf object. Default TRUE. oobag_pred_horizon (numeric) numeric value indicating time used --bag predictions. Default median observed times, .e., oobag_pred_horizon = median(time). oobag_eval_every (integer) --bag performance ensemble checked every oobag_eval_every trees. , oobag_eval_every = 10, --bag performance checked growing 10th tree, 20th tree, . Default oobag_eval_every = n_tree, --bag performance assessed growing trees. oobag_fun (function) function measure accuracy --bag predictions. oobag_fun = NULL (default), --bag predictions evaluated using Harrell's C-statistic. details see vignette --bag predictions: importance (character) Indicate method variable importance: 'none': variable importance computed. 'anova': use analysis variance (ANOVA) method 'negate': compute negation importance 'permute': compute permutation importance tree_seeds (integer vector) specified, random seeds set using values tree_seeds[]  growing tree . Two forests grown number trees seeds exact --bag samples , many cases, random sets candidate predictors. design makes comparisons --bag error two random forests meaningful, since --bag performance random forest depends somewhat observations picked --bag samples. tree_seeds NULL (default), seeds set training process. attach_data (logical) TRUE, copy training data attached output. helpful plan using functions like orsf_pd_summary interpret fitted forest using training data. Default TRUE. no_fit (logical) TRUE, pre-processing steps defined parametrized, training initiated. object returned can directly submitted orsf_train() long attach_data TRUE. ... arguments passed methods (currently used). object untrained 'aorsf' object, created setting no_fit = TRUE orsf().","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"accelerated oblique RSF object (aorsf)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"function based highly similar ORSF function obliqueRSF R package. primary difference function runs much faster. speed increase attributable better management memory (.e., unnecessary copies inputs) using Newton Raphson scoring algorithm identify linear combinations inputs rather performing penalized regression using routines glmnet.modified Newton Raphson scoring algorithm function applies adaptation C++ routine developed Terry M. Therneau fits Cox proportional hazards models (see survival::coxph() specifically survival::coxph.fit()). comments inputs formula: response formula can survival object returned survival::Surv function, can also just time status variables. example, Surv(time, status) ~ . works just like time + status ~ .. thing can break input putting variables wrong order, .e., writing status + time ~ . make orsf assume status variable actually time variable. mtry: mtry parameter may temporarily reduced ensure least 2 events per predictor variable. occurs using orsf_control_cph coefficients Newton Raphson scoring algorithm may become unstable number covariates greater equal number events. reduction occur using orsf_control_net. oobag_fun: function must two inputs: y_mat s_vec. input y_mat presumed matrix two columns named time (first column) status (second column). input s_vec presumed numeric vector containing predicted survival probabilities y_mat. oobag_fun specified, used computation negation importance permutation importance, role ANOVA importance. importance: See orsf_vi descriptions available methods. oblique decision tree? Decision trees developed splitting set training data two new subsets, goal similarity within new subsets . splitting process repeated resulting subsets data stopping criterion met. new subsets data formed based single predictor, decision tree said axis-based splits data appear perpendicular axis predictor. linear combinations variables used instead single variable, tree oblique splits data neither parallel right angle axis Figure : Decision trees classification axis-based splitting (left) oblique splitting (right). Cases orange squares; controls purple circles. trees partition predictor space defined variables X1 X2, oblique splits better job separating two classes.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Breiman L. Random forests. Machine learning. 2001 Oct;45(1):5-32. DOI: 10.1023/:1010933404324 Ishwaran H, Kogalur UB, Blackstone EH, Lauer MS. Random survival forests. Annals applied statistics. 2008 Sep;2(3):841-60. DOI: 10.1214/08-AOAS169 Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min YI, Mcclure LA, Howard G, Simon N. Oblique random survival forests. Annals applied statistics. 2019 Sep;13(3):1847-83. DOI: 10.1214/19-AOAS1261 Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar M, Pandey , Pajewski NM. Accelerated interpretable oblique random survival forests. arXiv e-prints. 2022 Aug 3:arXiv-2208. URL: https://arxiv.org/abs/2208.01129 Harrell FE, Califf RM, Pryor DB, Lee KL, Rosati RA. Evaluating Yield Medical Tests. JAMA. 1982;247(18):2543–2546. DOI: 10.1001/jama.1982.03320430047030","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":null,"dir":"Reference","previous_headings":"","what":"Cox proportional hazards control — orsf_control_cph","title":"Cox proportional hazards control — orsf_control_cph","text":"Use Newton-Raphson scoring identify linear combinations input variables fitting orsf model. details Newton-Raphson scoring Cox proportional hazards model, see Therneau Grambsch (2000).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cox proportional hazards control — orsf_control_cph","text":"","code":"orsf_control_cph(   method = \"efron\",   eps = 1e-09,   iter_max = 20,   do_scale = TRUE,   ... )  orsf_control_fast(method = \"efron\", do_scale = TRUE, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cox proportional hazards control — orsf_control_cph","text":"method (character) character string specifying method tie handling. ties, methods equivalent. Valid options 'breslow' 'efron'. Efron approximation default accurate dealing tied event times similar computational efficiency compared Breslow method. eps (double) using Newton Raphson scoring identify linear combinations inputs, iteration continues algorithm relative change  log partial likelihood less eps, absolute change less sqrt(eps). Must positive. default value 1e-09 used consistency survival::coxph.control. iter_max (integer) using Newton Raphson scoring identify linear combinations inputs, iteration continues convergence (see eps ) number attempted iterations equal iter_max. default value 1 used computational efficiency. do_scale (logical) TRUE, values predictors scaled prior running Newton Raphson scoring. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cox proportional hazards control — orsf_control_cph","text":"object class 'aorsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cox proportional hazards control — orsf_control_cph","text":"Setting do_scale FALSE reduce computation time also make orsf model dependent scale data, default value TRUE.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cox proportional hazards control — orsf_control_cph","text":"Therneau T.M., Grambsch P.M. (2000) Cox Model. : Modeling Survival Data: Extending Cox Model. Statistics Biology Health. Springer, New York, NY. DOI: 10.1007/978-1-4757-3294-8_3","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cox proportional hazards control — orsf_control_cph","text":"","code":"orsf(data = pbc_orsf,      formula = Surv(time, status) ~ . - id,      control = orsf_control_cph()) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom control of oblique decision trees — orsf_control_custom","title":"Custom control of oblique decision trees — orsf_control_custom","text":"Custom control oblique decision trees","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom control of oblique decision trees — orsf_control_custom","text":"","code":"orsf_control_custom(beta_fun, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom control of oblique decision trees — orsf_control_custom","text":"beta_fun (function) function define coefficients used linear combinations predictor variables. beta_fun must accept three inputs named x_node, y_node w_node, expect following types dimensions: x_node (matrix; n rows, p columns) y_node (matrix; n rows, 2 columns) w_node (matrix; n rows, 1 column) addition, beta_fun must return matrix p rows 1 column. conditions met, orsf_control_custom() let know. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom control of oblique decision trees — orsf_control_custom","text":"object class 'aorsf_control', used input control argument orsf.","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom control of oblique decision trees — orsf_control_custom","text":"","code":"# fit an oblique random survival forest using random coefficients to # generate linear combinations of predictor variables. First, define # a function that supplies the random coefficients:  f <- function(x_node, y_node, w_node) { matrix(runif(ncol(x_node)), ncol=1) }  # next, plug the function into orsf_control_custom(), which is in turn # passed into orsf():  fit_rando <- orsf(pbc_orsf,                   Surv(time, status) ~ .,                   control = orsf_control_custom(beta_fun = f),                   n_tree = 500)  # last, check the out-of-bag performance. # it's surprising how well the random approach works.  fit_rando$eval_oobag #> $stat_values #>           [,1] #> [1,] 0.7821421 #>  #> $stat_type #> [1] \"Harrell's C-statistic\" #>"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Elastic net control — orsf_control_net","title":"Elastic net control — orsf_control_net","text":"Elastic net control","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elastic net control — orsf_control_net","text":"","code":"orsf_control_net(alpha = 1/2, df_target = NULL, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Elastic net control — orsf_control_net","text":"alpha elastic net mixing parameter. value 1 gives lasso penalty, value 0 gives ridge penalty. multiple values alpha given, penalized model fit using alpha value prior splitting node. df_target Preferred number variables used linear combination. Note: less mtry, separate argument orsf indicates number variables chosen random prior finding linear combination variables. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Elastic net control — orsf_control_net","text":"object class 'aorsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Elastic net control — orsf_control_net","text":"Simon N, Friedman J, Hastie T, Tibshirani R. Regularization paths Cox’s proportional hazards model via coordinate descent. Journal statistical software. 2011 Mar;39(5):1. DOI: 10.18637/jss.v039.i05","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elastic net control — orsf_control_net","text":"","code":"# orsf_control_net() is considerably slower than orsf_control_cph(), # The example uses n_tree = 25 so that my examples run faster, # but you should use at least 500 trees in applied settings.  orsf(data = pbc_orsf,      formula = Surv(time, status) ~ . - id,      n_tree = 25,      control = orsf_control_net()) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 25 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 25 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.57 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF partial dependence — orsf_pd_summary","title":"ORSF partial dependence — orsf_pd_summary","text":"Compute partial dependence using oblique random survival forests.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF partial dependence — orsf_pd_summary","text":"","code":"orsf_pd_summary(   object,   pd_data = NULL,   pd_spec,   pred_horizon = NULL,   pred_type = \"risk\",   expand_grid = TRUE,   prob_values = c(0.025, 0.5, 0.975),   prob_labels = c(\"lwr\", \"medn\", \"upr\"),   oobag = TRUE,   boundary_checks = TRUE,   ... )  orsf_pd_ice(   object,   pd_data = NULL,   pd_spec,   pred_horizon = NULL,   pred_type = \"risk\",   expand_grid = TRUE,   oobag = TRUE,   boundary_checks = TRUE,   ... )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF partial dependence — orsf_pd_summary","text":"object (aorsf) oblique random survival forest (ORSF; see orsf). pd_data (data frame) used compute partial dependence. NULL, training data object used. training data attached object (see attach_data input orsf), error triggered. pd_spec (named list data.frame). pd_spec named list, item list vector values used points partial dependence function. name item list indicate variable modified take corresponding values. pd_spec data.frame, columns indicate variable names, values indicate variable values, partial dependence computed using inputs row. pred_horizon (double) single time vector times indicating time(s) predicted risk survival probabilities computed . pred_type (character) type predictions return. Valid options 'risk' : probability event pred_horizon. 'survival' : 1 - risk. expand_grid (logical) TRUE, partial dependence computed possible combinations inputs pd_spec. FALSE, partial dependence computed variable pd_spec, separately. prob_values (numeric) vector values 0 1, indicating quantiles used summarize partial dependence values set inputs. prob_values length prob_labels. quantiles calculated based predictions object set values indicated pd_spec. prob_labels (character) vector labels length prob_values, label indicating corresponding value prob_values labelled summarized outputs. prob_labels length prob_values. oobag (logical) TRUE, partial dependence computed using bag training data. set oobag = TRUE computing partial dependence using training data object. boundary_checks (logical) TRUE, pd_spec vetted make sure requested values 10th 90th percentile object's training data. FALSE, checks skipped. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF partial dependence — orsf_pd_summary","text":"orsf_pd_summary: data.table containing summarized partial dependence values. orsf_pd_ice: data.table individual conditional expectations (ICE).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF partial dependence — orsf_pd_summary","text":"","code":"fit <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  orsf_pd_summary(fit, pd_spec = list(bili = c(1,2,3,4,5,6)), pred_horizon = 1000) #>    bili      mean         lwr       medn       upr #> 1:    1 0.1414261 0.003363801 0.05262032 0.7370185 #> 2:    2 0.1608725 0.008698997 0.07611968 0.7551452 #> 3:    3 0.1842611 0.015997914 0.09903191 0.7712079 #> 4:    4 0.2018791 0.021742810 0.11800991 0.7834886 #> 5:    5 0.2202310 0.028950105 0.14326000 0.7974560 #> 6:    6 0.2414512 0.048921537 0.17279537 0.8211173  # more points for a plot pd_spec <- list(bili = seq(1, 6, length.out = 20)) data_ice <- orsf_pd_ice(fit, pd_spec = pd_spec, pred_horizon = c(1000))  head(data_ice) #>    id_variable id_row bili       pred #> 1:           1      1    1 0.77675417 #> 2:           1      2    1 0.04084906 #> 3:           1      3    1 0.37170322 #> 4:           1      4    1 0.17648965 #> 5:           1      5    1 0.04397940 #> 6:           1      6    1 0.02059820  library(ggplot2)  ggplot(data_ice) +  aes(x = bili, y = pred, group = id_row) +  geom_line(alpha = 0.4, color = 'grey') +  geom_smooth(aes(group = 1), color = 'black', se = FALSE) +  theme_bw() +  theme(panel.grid = element_blank()) #> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale input data — orsf_scale_cph","title":"Scale input data — orsf_scale_cph","text":"functions exported users may access internal routines used scale inputs orsf_control_cph used.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale input data — orsf_scale_cph","text":"","code":"orsf_scale_cph(x_mat, w_vec = NULL)  orsf_unscale_cph(x_mat)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale input data — orsf_scale_cph","text":"x_mat (numeric matrix) matrix values scaled unscaled. Note orsf_unscale_cph accept x_mat inputs attribute containing transform values, added automatically orsf_scale_cph. w_vec (numeric vector) optional vector weights. weights supplied (default), observations equally weighted. supplied, w_vec must length equal nrow(x_mat).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale input data — orsf_scale_cph","text":"scaled unscaled x_mat.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scale input data — orsf_scale_cph","text":"data transformed first subtracting mean multiplying scale. inverse transform can completed using orsf_unscale_cph dividing column corresponding scale adding mean. values means scales stored attribute output returned orsf_scale_cph (see examples)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale input data — orsf_scale_cph","text":"","code":"x_mat <- as.matrix(pbc_orsf[, c('bili', 'age', 'protime')])  head(x_mat) #>   bili      age protime #> 1 14.5 58.76523    12.2 #> 2  1.1 56.44627    10.6 #> 3  1.4 70.07255    12.0 #> 4  1.8 54.74059    10.3 #> 5  3.4 38.10541    10.9 #> 7  1.0 55.53457     9.7  x_scaled <- orsf_scale_cph(x_mat)  head(x_scaled) #>             bili        age    protime #> [1,]  3.77308887  1.0412574  1.9694656 #> [2,] -0.75476469  0.7719344 -0.1822316 #> [3,] -0.65339483  2.3544852  1.7005035 #> [4,] -0.51823502  0.5738373 -0.5856748 #> [5,]  0.02240421 -1.3581657  0.2212116 #> [6,] -0.78855464  0.6660494 -1.3925613  attributes(x_scaled) # note the transforms attribute #> $dim #> [1] 276   3 #>  #> $dimnames #> $dimnames[[1]] #> NULL #>  #> $dimnames[[2]] #> [1] \"bili\"    \"age\"     \"protime\" #>  #>  #> $transforms #>           mean     scale #> [1,]  3.333696 0.3378995 #> [2,] 49.799661 0.1161396 #> [3,] 10.735507 1.3448108 #>   x_unscaled <- orsf_unscale_cph(x_scaled)  head(x_unscaled) #>      bili      age protime #> [1,] 14.5 58.76523    12.2 #> [2,]  1.1 56.44627    10.6 #> [3,]  1.4 70.07255    12.0 #> [4,]  1.8 54.74059    10.3 #> [5,]  3.4 38.10541    10.9 #> [6,]  1.0 55.53457     9.7  # numeric difference in x_mat and x_unscaled should be practically 0 max(abs(x_mat - x_unscaled)) #> [1] 8.881784e-16"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF summary of univariate information — orsf_summarize_uni","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"ORSF summary univariate information","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"","code":"orsf_summarize_uni(   object,   n_variables = NULL,   pred_horizon = NULL,   pred_type = \"risk\",   importance = \"negate\",   ... )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"object untrained 'aorsf' object, created setting no_fit = TRUE orsf(). n_variables (integer) many variables summarized? Setting input lower number reduce computation time. pred_horizon (double) single time vector times indicating time(s) predicted risk survival probabilities computed . pred_type (character) type predictions return. Valid options 'risk' : probability event pred_horizon. 'survival' : 1 - risk. importance (character) Indicate method variable importance: 'none': variable importance computed. 'anova': use analysis variance (ANOVA) method 'negate': compute negation importance 'permute': compute permutation importance ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"object class 'aorsf_summary'","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"pred_horizon left unspecified, median value time--event variable object's training data used. recommended always specify prediction horizon, median time may especially meaningful horizon compute predicted risk values . object already variable importance values, can safely bypass computation variable importance function setting importance = 'none'.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  # since anova importance was used to make object, we can # safely say importance = 'none' and skip computation of # variable importance while running orsf_summarize_uni  orsf_summarize_uni(object, n_variables = 3, importance = 'none') #>  #> -- ascites (VI Rank: 1) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median    25th %    75th % #>      0 0.2925329 0.1447637 0.0477302 0.5261323 #>      1 0.4298299 0.3432156 0.2210465 0.6200380 #>  #> -- bili (VI Rank: 2) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2456252 0.1292100 0.04629683 0.3927846 #>    1.4 0.2619139 0.1501665 0.05936350 0.4149281 #>    3.5 0.3442971 0.2497378 0.12709419 0.5330062 #>  #> -- edema (VI Rank: 3) -------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2875434 0.1431046 0.04612244 0.5116349 #>    0.5 0.3474938 0.2308744 0.09374743 0.6041167 #>      1 0.4231069 0.3220317 0.20224183 0.6378430 #>  #>  Predicted risk at time t = 1788 for top 3 predictors   # however, if we want to summarize object according to variables # ranked by negation importance, we can compute negation importance # within orsf_summarize_uni() as follows:  orsf_summarize_uni(object, n_variables = 3, importance = 'negate') #>  #> -- bili (VI Rank: 1) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2456252 0.1292100 0.04629683 0.3927846 #>    1.4 0.2619139 0.1501665 0.05936350 0.4149281 #>    3.5 0.3442971 0.2497378 0.12709419 0.5330062 #>  #> -- age (VI Rank: 2) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     42 0.2668746 0.1367166 0.03809386 0.4382776 #>     50 0.2943134 0.1647486 0.04785454 0.5054427 #>     57 0.3281074 0.2207080 0.07260990 0.5164827 #>  #> -- sex (VI Rank: 3) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      m 0.3572792 0.2481976 0.12304532 0.5750532 #>      f 0.2916351 0.1431046 0.04657855 0.5116349 #>  #>  Predicted risk at time t = 1788 for top 3 predictors"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate training time — orsf_time_to_train","title":"Estimate training time — orsf_time_to_train","text":"Estimate training time","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate training time — orsf_time_to_train","text":"","code":"orsf_time_to_train(object, n_tree_subset = 50)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate training time — orsf_time_to_train","text":"object untrained aorsf object n_tree_subset (integer)  many trees fit order estimate time needed train object. default value 50, usually gives good enough approximation.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate training time — orsf_time_to_train","text":"difftime object.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate training time — orsf_time_to_train","text":"","code":"# specify but do not train the model by setting no_fit = TRUE. object <- orsf(pbc_orsf, Surv(time, status) ~ . - id,                n_tree = 500, no_fit = TRUE)  # grow 50 trees to approximate the time it will take to grow 500 trees time_estimated <- orsf_time_to_train(object, n_tree_subset = 50)  print(time_estimated) #> Time difference of 0.7675271 secs  # let's see how close the approximation was time_true_start <- Sys.time() fit <- orsf_train(object) time_true_stop <- Sys.time()  time_true <- time_true_stop - time_true_start  print(time_true) #> Time difference of 0.7746694 secs  # error abs(time_true - time_estimated) #> Time difference of 0.007142305 secs"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF variable importance — orsf_vi","title":"ORSF variable importance — orsf_vi","text":"Estimate importance individual variables using oblique random survival forests. orsf_vi() general purpose function extract compute variable importance (VI) estimates aorsf object (see orsf). three functions orsf_vi_negate(), orsf_vi_permute(), orsf_vi_anova() convenient wrappers orsf_vi(). way functions work depends whether object given already VI estimates (see examples).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF variable importance — orsf_vi","text":"","code":"orsf_vi(object, group_factors = TRUE, importance = NULL, oobag_fun = NULL, ...)  orsf_vi_negate(object, group_factors = TRUE, oobag_fun = NULL, ...)  orsf_vi_permute(object, group_factors = TRUE, oobag_fun = NULL, ...)  orsf_vi_anova(object, group_factors = TRUE, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF variable importance — orsf_vi","text":"object object class 'aorsf'. group_factors (logical) TRUE, importance factor variables reported overall aggregating importance individual levels factor. FALSE, importance individual factor levels returned. importance (character) Indicate method variable importance: 'none': variable importance computed. 'anova': use analysis variance (ANOVA) method 'negate': compute negation importance 'permute': compute permutation importance oobag_fun (function) function measure accuracy --bag predictions. oobag_fun = NULL (default), --bag predictions evaluated using Harrell's C-statistic. details see vignette --bag predictions: ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF variable importance — orsf_vi","text":"named vector. Names indicate predictors, values indicate importance. vector sorted highest lowest value, higher values indicating higher importance.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORSF variable importance — orsf_vi","text":"negation importance: variable assessed separately multiplying variable's coefficients -1 determining much model's performance changes. worse model's performance negating coefficients given variable, important variable. permutation importance: variable assessed separately randomly permuting variable's values determining much model's performance changes. worse model's performance permuting values given variable, important variable. ANOVA importance: ANOVA importance computes p-value coefficient linear combination variables decision tree oblique random forest. Following definition proposed Menze et al, ANOVA importance aorsf individual variable proportion times p-value coefficient < 0.01.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ORSF variable importance — orsf_vi","text":"Menze, Bjoern H., et al. oblique random forests. Joint European Conference Machine Learning Knowledge Discovery Databases. Springer, Berlin, Heidelberg, 2011. DOI: 10.1007/978-3-642-23783-6_29 Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey , Pajewski NM. Accelerated interpretable oblique random survival forests. arXiv e-prints. 2022 Aug 3:arXiv-2208. URL: https://arxiv.org/abs/2208.01129","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF variable importance — orsf_vi","text":"","code":"# first workflow ------------------------------------------------------------- # fit an aorsf object using default values, and get the default vi (anova)  fit_default <- orsf(pbc_orsf,                     Surv(time, status) ~ . - id)  # the printed output will indicate the type of vi used  fit_default #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------  # the 'raw' vi values are stored in fit_default:  fit_default$importance #>     edema_1   ascites_1        bili      copper       stage     albumin  #>  0.34791667  0.29622396  0.24143384  0.17886179  0.15694943  0.15283843  #>   edema_0.5         age     protime    hepato_1   spiders_1       sex_f  #>  0.13363229  0.13223140  0.13029909  0.13000616  0.12612333  0.11610619  #>        chol         ast        trig trt_placebo    alk.phos    platelet  #>  0.11416710  0.11241218  0.07848761  0.05849582  0.05805627  0.04715998   # these are 'raw' because the vi values for factors have not been # aggregated into a single vi value. Currently there is one vi value # for k-1 levels of a k level factor. For example, you can see edema_1 # and edema_0.5 in the importance values above because edema is a factor # variable with levels of 0, 0.5, and 1. To get aggregated values of vi # across all levels of each factor, just call orsf_vi with group_factors # set to TRUE (the default)  orsf_vi(fit_default) #>    ascites       bili      edema     copper      stage    albumin        age  #> 0.29622396 0.24143384 0.22036644 0.17886179 0.15694943 0.15283843 0.13223140  #>    protime     hepato    spiders        sex       chol        ast       trig  #> 0.13029909 0.13000616 0.12612333 0.11610619 0.11416710 0.11241218 0.07848761  #>        trt   alk.phos   platelet  #> 0.05849582 0.05805627 0.04715998   # orsf_vi knows that fit_default was fit using anova vi # to verify this, see that orsf_vi and orsf_vi_anova are the same  orsf_vi_anova(fit_default) #>    ascites       bili      edema     copper      stage    albumin        age  #> 0.29622396 0.24143384 0.22036644 0.17886179 0.15694943 0.15283843 0.13223140  #>    protime     hepato    spiders        sex       chol        ast       trig  #> 0.13029909 0.13000616 0.12612333 0.11610619 0.11416710 0.11241218 0.07848761  #>        trt   alk.phos   platelet  #> 0.05849582 0.05805627 0.04715998     # second workflow ------------------------------------------------------------ # fit an aorsf object without vi, then add vi later  fit_no_vi <- orsf(pbc_orsf,                   Surv(time, status) ~ . - id,                   importance = 'none')  # Note: you can't call orsf_vi_anova() on fit_no_vi because anova # VI can only be computed while the forest is being grown.  orsf_vi_negate(fit_no_vi) #>          bili           age           sex       spiders       ascites  #>  0.0138049594  0.0092727652  0.0067201500  0.0039070640  0.0038028756  #>         stage         edema       protime       albumin        hepato  #>  0.0023442384  0.0022847022  0.0022400500  0.0018232965  0.0010939779  #>        copper           ast      alk.phos          chol           trt  #>  0.0009376954 -0.0019274849 -0.0020316733 -0.0025005209 -0.0041675349  #>      platelet          trig  #> -0.0045842884 -0.0048447593   orsf_vi_permute(fit_no_vi) #>          bili           age         stage        copper       protime  #>  0.0114086268  0.0082308814  0.0034903105  0.0026047093  0.0019795791  #>         edema       ascites       albumin          chol           ast  #>  0.0011634368  0.0010418837  0.0008335070  0.0005730360  0.0004688477  #>        hepato           sex      alk.phos       spiders      platelet  #>  0.0002083767  0.0001041884 -0.0005209419 -0.0006772244 -0.0008856012  #>          trig           trt  #> -0.0020837675 -0.0023963326   # third workflow ------------------------------------------------------------ # fit an aorsf object and compute vi at the same time  fit_permute_vi <- orsf(pbc_orsf,                        Surv(time, status) ~ . - id,                        importance = 'permute')  # get the vi instantly (i.e., it doesn't need to be computed again)  orsf_vi_permute(fit_permute_vi) #>          bili           age        copper         stage       ascites  #>  0.0124505105  0.0105230256  0.0082308814  0.0061992082  0.0041675349  #>       protime           ast           sex       albumin        hepato  #>  0.0034903105  0.0025526151  0.0019795791  0.0011981663  0.0006251302  #>      platelet         edema          chol       spiders           trt  #>  0.0004167535  0.0002654323 -0.0005209419 -0.0009897895 -0.0014065430  #>      alk.phos          trig  #> -0.0020837675 -0.0039591582   # You can still get negation vi from this fit, but it needs to be computed  orsf_vi_negate(fit_permute_vi) #>          bili           age           sex        copper       ascites  #>  0.0146384663  0.0110960617  0.0053136070  0.0037507814  0.0034382163  #>       protime       albumin       spiders         edema           ast  #>  0.0024484268  0.0018753907  0.0017191081  0.0017091854  0.0014586372  #>         stage        hepato      platelet          chol          trig  #>  0.0005730360  0.0004688477 -0.0010939779 -0.0018753907 -0.0029172744  #>           trt      alk.phos  #> -0.0030735570 -0.0040633465"},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"data light modification survival::pbc data. modifications :","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"","code":"pbc_orsf"},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"data frame 276 rows 20 variables: id case number time number days registration earlier death, transplantion, study analysis July, 1986 status status endpoint, 0 censored transplant, 1 dead trt randomized treatment group: D-penicillmain placebo age years sex m/f ascites presence ascites hepato presence hepatomegaly enlarged liver spiders blood vessel malformations skin edema 0 edema, 0.5 untreated successfully treated, 1 edema despite diuretic therapy bili serum bilirubin (mg/dl) chol serum cholesterol (mg/dl) albumin serum albumin (g/dl) copper urine copper (ug/day) alk.phos alkaline phosphotase (U/liter) ast aspartate aminotransferase, called SGOT (U/ml) trig triglycerides (mg/dl) platelet platelet count protime standardized blood clotting time stage histologic stage disease (needs biopsy)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"T Therneau P Grambsch (2000), Modeling Survival Data: Extending Cox Model, Springer-Verlag, New York. ISBN: 0-387-98784-3.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"removed rows missing data converted status 0 censor transplant, 1 dead converted stage ordered factor. converted trt, ascites, hepato, spiders, edema factors.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict using oblique random survival forest — predict.aorsf","title":"Predict using oblique random survival forest — predict.aorsf","text":"Predict using oblique random survival forest","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict using oblique random survival forest — predict.aorsf","text":"","code":"# S3 method for aorsf predict(object, new_data, pred_horizon, pred_type = \"risk\", ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict using oblique random survival forest — predict.aorsf","text":"object (aorsf) oblique random survival forest (ORSF; see orsf). new_data (data.frame) data compute predictions . Must columns equivalent types data used train object. Also, factors new_data must levels data used train object. Last, missing data supported. pred_horizon (double) single time vector times indicating time(s) predicted risk survival probabilities computed . pred_type (character) type predictions return. Valid options 'risk' : probability event pred_horizon. 'survival' : 1 - risk. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict using oblique random survival forest — predict.aorsf","text":"matrix predictions. Column j matrix corresponds value j pred_horizon. Row matrix corresponds row new_data.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict using oblique random survival forest — predict.aorsf","text":"pred_horizon values must exceed maximum follow-time object's training data. Also, pred_horizon values must entered ascending order.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict using oblique random survival forest — predict.aorsf","text":"","code":"# indices of data used for training the model train <- seq(1, nrow(pbc_orsf), by = 2)  # indices of data used to test the trained model. test <- seq(2, nrow(pbc_orsf), by = 2)  fit <- orsf(pbc_orsf[train, ], Surv(time, status) ~ . - id)  preds <- predict(fit,                  new_data = pbc_orsf[test, ],                  pred_horizon = c(500, 1500, 2500))  head(preds) #>             [,1]       [,2]       [,3] #> [1,] 0.048075242 0.13594175 0.30684350 #> [2,] 0.202105458 0.48255657 0.61847203 #> [3,] 0.015630968 0.07588460 0.23388110 #> [4,] 0.070472509 0.19714858 0.39718682 #> [5,] 0.063276208 0.13144116 0.25210881 #> [6,] 0.009308691 0.01558699 0.08546368"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF presentation — print.aorsf","title":"ORSF presentation — print.aorsf","text":"ORSF presentation","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF presentation — print.aorsf","text":"","code":"# S3 method for aorsf print(x, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF presentation — print.aorsf","text":"x object class 'aorsf' ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF presentation — print.aorsf","text":"nothing - just print output console","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF presentation — print.aorsf","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id, n_tree = 5)  print(object) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 5 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.73 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ORSF summary — print.aorsf_summary_uni","title":"Print ORSF summary — print.aorsf_summary_uni","text":"Print ORSF summary","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print ORSF summary — print.aorsf_summary_uni","text":"","code":"# S3 method for aorsf_summary_uni print(x, n_variables = NULL, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ORSF summary — print.aorsf_summary_uni","text":"x object class 'aorsf_summary' n_variables number variables print ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ORSF summary — print.aorsf_summary_uni","text":"nothing - output printed console.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print ORSF summary — print.aorsf_summary_uni","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  smry <- orsf_summarize_uni(object, n_variables = 3)  print(smry) #>  #> -- age (VI Rank: 1) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     42 0.2652882 0.1307125 0.03988664 0.4613187 #>     50 0.2935355 0.1696215 0.04639685 0.5057519 #>     57 0.3286915 0.2263466 0.07071218 0.5424121 #>  #> -- bili (VI Rank: 2) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2387630 0.1169947 0.04070766 0.3918094 #>    1.4 0.2572327 0.1349342 0.05970425 0.4054231 #>    3.5 0.3449055 0.2462436 0.12523459 0.5345332 #>  #> -- sex (VI Rank: 3) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      m 0.3515453 0.2348130 0.11237503 0.5679315 #>      f 0.2912432 0.1378172 0.04601731 0.5412043 #>  #>  Predicted risk at time t = 1788 for top 3 predictors"},{"path":"https://bcjaeger.github.io/aorsf/news/index.html","id":"aorsf-0009000","dir":"Changelog","previous_headings":"","what":"aorsf 0.0.0.9000","title":"aorsf 0.0.0.9000","text":"Core features implemented: fit, interpret, predict using oblique random survival forests. Vignettes + Readme covering usage core features. Website hosted GitHub pages, managed pkgdown.","code":""},{"path":"https://bcjaeger.github.io/aorsf/news/index.html","id":"aorsf-001","dir":"Changelog","previous_headings":"","what":"aorsf 0.0.1","title":"aorsf 0.0.1","text":"Added orsf_control_custom(), allows users submit custom functions identifying linear combinations inputs growing oblique decision trees. Added weights input orsf, allowing users fit orsf specific data training set.","code":""}]
