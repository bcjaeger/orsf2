[{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to aorsf","title":"Contributing to aorsf","text":"Want contribute aorsf? Great! aorsf initially stable state development, great deal active subsequent development envisioned. outline propose change aorsf. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to aorsf","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to aorsf","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to aorsf","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"bcjaeger/aorsf\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to aorsf","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to aorsf","text":"Please note aorsf project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://bcjaeger.github.io/aorsf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 aorsf authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"background-orsf","dir":"Articles","previous_headings":"","what":"Background: ORSF","title":"Introduction to aorsf","text":"oblique random survival forest (ORSF) extension axis-based RSF algorithm. Axis based RSFs can fit several R packages, including RandomForestSRC, party, ranger. However, apart aorsf obliqueRSF, R packages fit ORSFs.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"what-is-an-oblique-decision-tree","dir":"Articles","previous_headings":"","what":"What is an oblique decision tree?","title":"Introduction to aorsf","text":"Decision trees developed splitting set training data two new subsets, goal similarity within new subsets . splitting process repeated resulting subsets data stopping criterion met. new subsets data formed based single predictor, decision tree said axis-based splits data appear perpendicular axis predictor. linear combinations variables used instead single variable, tree oblique splits data neither parallel right angle axis. Decision trees classification axis-based splitting (left) oblique splitting (right). Cases orange squares; controls purple circles. trees partition predictor space defined variables X1 X2, oblique splits better job separating two classes.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"accelerated-orsf","dir":"Articles","previous_headings":"","what":"Accelerated ORSF","title":"Introduction to aorsf","text":"purpose aorsf (‘’ short accelerated) provide routines fit ORSFs scale adequately large data sets. example, aorsf::orsf() runs hundreds times faster predecessor, obliqueRSF::ORSF(). fit accelerated ORSF model, use orsf function: may notice first input aorsf data. design choice makes easier use orsf pipes (.e., %>% |>). instance,","code":"library(aorsf) library(ggplot2)  set.seed(329)  orsf_fit <- orsf(data = pbc_orsf,                   formula = Surv(time, status) ~ . - id,                   n_tree = 2500)  orsf_fit #> ---------- Oblique random survival forest #>  #>      Linear combinations: Accelerated #>           N observations: 276 #>                 N events: 111 #>                  N trees: 2500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> ----------------------------------------- library(dplyr)  orsf_fit <- pbc_orsf |>   select(-id) |>   orsf(formula = Surv(time, status) ~ .)"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"interpretation","dir":"Articles","previous_headings":"","what":"Interpretation","title":"Introduction to aorsf","text":"aorsf includes several functions dedicated interpretation ORSFs, estimation partial dependence variable importance.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"variable-importance","dir":"Articles","previous_headings":"Interpretation","what":"Variable importance","title":"Introduction to aorsf","text":"aorsf provides multiple ways compute variable importance. compute negation importance, ORSF multiplies coefficient variable -1 re-computes --sample (sometimes referred --bag) accuracy ORSF model. can also compute variable importance using permutation, classical approach. faster alternative permutation negation importance ANOVA importance, computes proportion times variable obtains low p-value (p < 0.01) forest grown.","code":"orsf_vi_negate(orsf_fit) #>          bili           age       ascites       protime        copper  #>  0.0134923942  0.0085434466  0.0057824547  0.0046363826  0.0037507814  #>       spiders         edema         stage           sex           ast  #>  0.0036465930  0.0028751029  0.0022921442  0.0016670140  0.0012502605  #>        hepato      alk.phos          chol          trig           trt  #> -0.0003125651 -0.0012502605 -0.0017191081 -0.0018232965 -0.0026568035  #>      platelet  #> -0.0028130861 orsf_vi_permute(orsf_fit) #>          bili           age         stage        copper       albumin  #>  0.0122421338  0.0090122942  0.0042717233  0.0039591582  0.0039070640  #>       ascites          chol       protime         edema        hepato  #>  0.0025005209  0.0022400500  0.0021358616  0.0006635807  0.0006251302  #>       spiders           ast      alk.phos      platelet           sex  #>  0.0004688477 -0.0001041884 -0.0001562826 -0.0006772244 -0.0007814128  #>           trt          trig  #> -0.0015107314 -0.0017712023 orsf_vi_anova(orsf_fit) #>    ascites       bili      edema     copper        age    albumin    protime  #> 0.37535240 0.28802725 0.25071311 0.19946642 0.18231113 0.17848411 0.15620772  #>      stage       chol        ast    spiders        sex     hepato       trig  #> 0.14307743 0.14234894 0.12985129 0.12727497 0.11925957 0.11285150 0.10276701  #>   alk.phos   platelet        trt  #> 0.09960634 0.07668127 0.06754044"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"partial-dependence","dir":"Articles","previous_headings":"Interpretation","what":"Partial dependence","title":"Introduction to aorsf","text":"Partial dependence shows expected prediction ORSF model given set predictor values. orsf_pd_summary() shows summary values predictions given set predictor values  orsf_pd_ice() shows predictions observation specified predictors fixed specified predictor values.","code":"# make a list containing the variable values you # want to compute partial dependence for pd_spec <- list(edema = c(\"0\", \"0.5\", \"1\"),                 bili = seq(0.6, 7.1, by = 0.1))  # orsf_pd_summary automatically computes pd for all combinations # in the list (this can be turned off with expand_grid = FALSE) pd_data <- orsf_pd_summary(object = orsf_fit,                             pd_spec = pd_spec,                            expand_grid = TRUE,                             pred_horizon = 365.25 * 5)  ggplot(pd_data) +  aes(x = bili, y = mean, col = edema) +  geom_line() +   labs(y = 'Predicted risk',       x = 'Bilirubin',       title = 'Partial dependence of bilirubin and edema') +  scale_y_continuous(limits = c(0, 1)) # make a list containing the variable values you # want to compute partial dependence for pd_spec <- list(edema = c(\"0\", \"0.5\", \"1\"),                 bili = seq(0.6, 7.1, by = 0.1))  # orsf_pd_summary automatically computes pd for all combinations # in the list (this can be turned off with expand_grid = FALSE) pd_data <- orsf_pd_ice(object = orsf_fit,                         pd_spec = pd_spec,                        expand_grid = TRUE,                         pred_horizon = 365.25 * 5)  pd_data$edema = paste(\"Edema =\", pd_data$edema)  ggplot(pd_data) +  aes(x = bili, y = pred, group = id_row) +  geom_line(color = 'grey', alpha = 0.25) +   geom_smooth(group = 1) +  labs(y = 'Predicted risk',       x = 'Bilirubin',       title = 'Partial dependence of bilirubin and edema') +  scale_y_continuous(limits = c(0, 1)) +  facet_wrap(~ edema) #> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"summarize-orsf-models","dir":"Articles","previous_headings":"Interpretation","what":"Summarize ORSF models","title":"Introduction to aorsf","text":"Getting straight variable importance partial dependence direct way can often helpful exploratory analyses. want lot information just little code, orsf_summarize_uni() tool :","code":"orsf_summarize_uni(orsf_fit,                     n_variables = 5,                     pred_horizon = 365.25 * 5) #>  #> -- bili (VI Rank: 1) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2321709 0.1250703 0.04511286 0.3822285 #>    1.4 0.2526454 0.1452361 0.05893072 0.4017982 #>    3.5 0.3716990 0.2879513 0.16520375 0.5483311 #>  #> -- age (VI Rank: 2) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     42 0.2738421 0.1429054 0.04190491 0.4670137 #>     50 0.3012377 0.1711906 0.04922133 0.5312928 #>     57 0.3324703 0.2206562 0.07135028 0.5659502 #>  #> -- ascites (VI Rank: 3) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2962853 0.1559449 0.04856002 0.5312403 #>      1 0.4707099 0.3853747 0.27346654 0.6542754 #>  #> -- protime (VI Rank: 4) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     10 0.2836244 0.1532223 0.04709130 0.5059426 #>     11 0.2956075 0.1611090 0.05140038 0.5249728 #>     11 0.3168198 0.1890442 0.06756468 0.5346692 #>  #> -- copper (VI Rank: 5) ------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     43 0.2656012 0.1388691 0.04530208 0.4752255 #>     74 0.2823505 0.1590903 0.05506762 0.5037839 #>    129 0.3358382 0.2179729 0.10527331 0.5494800 #>  #>  Predicted risk at time t = 1826.25 for top 5 predictors"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"what-about-the-original-orsf","dir":"Articles","previous_headings":"","what":"What about the original ORSF?","title":"Introduction to aorsf","text":"original ORSF (.e., obliqueRSF) used glmnet find linear combinations inputs. aorsf allows users implement approach using orsf_control_net() function: net forests fit lot faster original ORSF function obliqueRSF. However, net forests still much slower cph ones:","code":"orsf_net <- orsf(data = pbc_orsf,                   formula = Surv(time, status) ~ . - id,                   control = orsf_control_net(),                  n_tree = 50) # tracking how long it takes to fit 50 glmnet trees print(  t1 <- system.time(   orsf(data = pbc_orsf,         formula = Surv(time, status) ~ . - id,         control = orsf_control_net(),        n_tree = 50)  ) ) #>    user  system elapsed  #>   3.160   0.004   3.164  # and how long it takes to fit 50 cph trees print(  t2 <- system.time(   orsf(data = pbc_orsf,         formula = Surv(time, status) ~ . - id,         control = orsf_control_cph(),        n_tree = 50)  ) ) #>    user  system elapsed  #>   0.054   0.000   0.054  t1['elapsed'] / t2['elapsed'] #>  elapsed  #> 58.59259"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"aorsf-and-other-machine-learning-software","dir":"Articles","previous_headings":"","what":"aorsf and other machine learning software","title":"Introduction to aorsf","text":"Generally, aorsf follows conventions set R packages randomForest randomForestSRC. example, print method aorsf models similar randomForestSRC models, specification computing variable importance objects returned variable importance functions. Similar randomForestSRC, aorsf allows recommends partial dependence estimated using --bag data. unique feature aorsf fitting oblique random survival forests fast maintaining strong prediction accuracy. RLT obliqueRSF fit oblique random survival forests, aorsf faster. ranger randomForestSRC fit survival forests, neither package supports oblique splitting. obliqueRF fits oblique random forests classification regression, survival. PPforest fits oblique random forests classification survival. default prediction behavior aorsf models produce predicted risk specific prediction horizon, default ranger randomForestSRC.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"out-of-bag-data","dir":"Articles","previous_headings":"","what":"Out-of-bag data","title":"Out-of-bag predictions and evaluation","text":"random forests, tree grown bootstrapped version training set. bootstrap samples selected replacement, bootstrapped training set contains two-thirds instances original training set. ‘--bag’ data instances bootstrapped training set.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"out-of-bag-predictions-and-error","dir":"Articles","previous_headings":"","what":"Out-of-bag predictions and error","title":"Out-of-bag predictions and evaluation","text":"tree random forest can make predictions --bag data, --bag predictions can aggregated make ensemble --bag prediction. Since --bag data used grow tree, accuracy ensemble --bag predictions approximate generalization error random forest. --bag prediction error plays central role routines estimate variable importance, e.g. negation importance. Let’s fit oblique random survival forest plot distribution ensemble --bag predictions.  surprisingly, survival predictions 0 1. Next, let’s check --bag accuracy fit: --bag estimate Harrell’s C-statistic (default method evaluate --bag predictions) 0.8424151.","code":"fit <- orsf(data = pbc_orsf,              formula = Surv(time, status) ~ . - id,             oobag_pred_horizon = 3500)  hist(fit$surv_oobag,       main = 'Ensemble out-of-bag survival predictions at t=3,500') # what function is used to evaluate out-of-bag predictions? fit$eval_oobag$stat_type #> [1] \"Harrell's C-statistic\"  # what is the output from this function? fit$eval_oobag$stat_values #>           [,1] #> [1,] 0.8424151"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"monitoring-out-of-bag-error","dir":"Articles","previous_headings":"","what":"Monitoring out-of-bag error","title":"Out-of-bag predictions and evaluation","text":"--bag data set contains one-third training set, --bag error estimate usually converges stable value trees added forest. want monitor convergence --bag error oblique random survival forest, can set oobag_eval_every compute --bag error every oobag_eval_every tree. example, let’s compute --bag error fitting tree forest 50 trees:  general, least 500 trees recommended random forest fit. ’re just using 50 case better illustration --bag error curve. Also, helps make run-times low whenever need re-compile package vignettes.","code":"fit <- orsf(data = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 50,             oobag_pred_horizon = 3500,             oobag_eval_every = 1)  plot(  x = seq(1, 50, by = 1),  y = fit$eval_oobag$stat_values,   main = 'Out-of-bag C-statistic computed after each new tree is grown.',  xlab = 'Number of trees grown',  ylab = fit$eval_oobag$stat_type )"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"user-supplied-out-of-bag-evaluation-functions","dir":"Articles","previous_headings":"","what":"User-supplied out-of-bag evaluation functions","title":"Out-of-bag predictions and evaluation","text":"cases, may want use function compute --bag error. example, simple (incorrect) way compute Brier score. (incorrect account censoring) two ways apply function compute --bag error. First, can apply function --bag survival predictions stored ‘aorsf’ objects, e.g: Second, can pass function orsf(), used place Harrell’s C-statistic:  Let’s run one example showing can done using functions packages, e.g., survivalROC survivalROC package:","code":"oobag_fun_brier <- function(y_mat, s_vec){   # risk = 1 - survival   r_vec <- 1 - s_vec   # mean of the squared differences between predicted and observed risk  mean( (y_mat[, 'status'] - r_vec)^2 )   } oobag_fun_brier(y_mat = fit$data[, c('time', 'status')],                 s_vec = fit$surv_oobag) #> [1] 0.1883014 fit <- orsf(data = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 50,             oobag_pred_horizon = 3500,             oobag_fun = oobag_fun_brier,             oobag_eval_every = 1)  plot(  x = seq(1, 50, by = 1),  y = fit$eval_oobag$stat_values,   main = 'Out-of-bag error computed after each new tree is grown.',  sub = 'For the Brier score, lower values indicate more accurate predictions',  xlab = 'Number of trees grown',  ylab = \"Brier score\" ) oobag_fun_sroc <- function(y_mat, s_vec){   score <- survivalROC::survivalROC(   Stime = y_mat[, 'time'],   status = y_mat[, 'status'],   # risk = 1 - survival   marker = 1 - s_vec,   # important!! Make sure this matches the time you used in orsf   predict.time = 3500,   # nearest neighbor estimation for censoring   method = \"NNE\",   # value taken from ?survivalROC examples   span = 0.25 * nrow(y_mat)^(-0.20)  )    # oobag_fun needs to return a numeric value of length 1  score$AUC  }  fit <- orsf(data = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 50,             oobag_pred_horizon = 3500,             oobag_fun = oobag_fun_sroc,             oobag_eval_every = 1)  plot(  x = seq(50),  y = fit$eval_oobag$stat_values,   main = 'Out-of-bag time-dependent AUC\\ncomputed after each new tree is grown.',  xlab = 'Number of trees grown',  ylab = \"AUC at t = 3,500\" )"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"specific-instructions-on-user-supplied-functions","dir":"Articles","previous_headings":"User-supplied out-of-bag evaluation functions","what":"Specific instructions on user-supplied functions","title":"Out-of-bag predictions and evaluation","text":"User-supplied functions must: exactly two arguments named y_mat s_vec. return numeric output length 1 either conditions true, error occur. simple test make sure user-supplied function work aorsf package :","code":"# Helper code to make sure your oobag_fun function will work with aorsf  # time and status values test_time <- seq(from = 1, to = 5, length.out = 100) test_status <- rep(c(0,1), each = 50)  # y-matrix is presumed to contain time and status (with column names) y_mat <- cbind(time = test_time, status = test_status) # s_vec is presumed to be a vector of survival probabilities s_vec <- seq(0.9, 0.1, length.out = 100)  # see 1 in the checklist above names(formals(oobag_fun_sroc)) == c(\"y_mat\", \"s_vec\") #> [1] TRUE TRUE  test_output <- oobag_fun_sroc(y_mat = y_mat, s_vec = s_vec)  # test output should be numeric is.numeric(test_output) #> [1] TRUE # test_output should be a numeric value of length 1 length(test_output) == 1 #> [1] TRUE"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"user-supplied-functions-for-negation-importance-","dir":"Articles","previous_headings":"","what":"User-supplied functions for negation importance.","title":"Out-of-bag predictions and evaluation","text":"Negation importance based --bag error, course may curious negation importance computed using different statistics. workflow exactly example , except specify importance = 'negate' fit model. Also, speed computations, going monitor --bag error .","code":"fit_sroc <- orsf(data = pbc_orsf,                  formula = Surv(time, status) ~ . - id,                  n_tree = 50,                  oobag_pred_horizon = 3500,                  oobag_fun = oobag_fun_sroc,                  importance = 'negate')  fit_sroc$importance #>       albumin          bili           ast      alk.phos      hepato_1  #>  0.0379634276  0.0316997924  0.0271673088  0.0112709875  0.0094966141  #>       protime       edema_1          chol     ascites_1         sex_f  #>  0.0083200400  0.0058016147  0.0010510861 -0.0004874355 -0.0010981234  #>          trig     edema_0.5   trt_placebo     spiders_1         stage  #> -0.0017035457 -0.0055293964 -0.0061937088 -0.0083773097 -0.0106469149  #>      platelet        copper           age  #> -0.0153962562 -0.0253255087 -0.0387641533"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"multiple-functions-for-negation-importance","dir":"Articles","previous_headings":"User-supplied functions for negation importance.","what":"Multiple functions for negation importance","title":"Out-of-bag predictions and evaluation","text":"’d like compute several types negation importance model, can done using orsf_vi_negate(), allows specify --bag function just orsf() : discrepancies methods ranking important variables. simulation study determine method estimating --bag error better job discriminating important unimportant variables helpful.","code":"fit <- orsf(data = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 500,             oobag_pred_horizon = 3500)  # use default technique (harrell's C-statistic) orsf_vi_negate(fit) #>          bili           age       protime       albumin       ascites  #>  0.0131277349  0.0089602000  0.0088560117  0.0076578454  0.0069285268  #>        copper       spiders         stage         edema        hepato  #>  0.0060950198  0.0046363826  0.0042717233  0.0033985255  0.0031256512  #>           sex           ast           trt      platelet          chol  #>  0.0014586372  0.0009897895  0.0006772244 -0.0022921442 -0.0025005209  #>      alk.phos          trig  #> -0.0031777454 -0.0065117733  # use C-statistic from survivalROC orsf_vi_negate(fit, oobag_fun = oobag_fun_sroc) #>         bili          ast      albumin     platelet        stage       hepato  #>  0.032004337  0.021802994  0.015074720  0.011315914  0.007944728  0.006677208  #>     alk.phos        edema      protime       copper      ascites      spiders  #>  0.003228737 -0.001571924 -0.002745921 -0.003582678 -0.005291935 -0.008233614  #>         chol         trig          sex          age          trt  #> -0.008343405 -0.013240503 -0.015234041 -0.020054626 -0.022717354  # you can also use custom functions for permutation importance orsf_vi_permute(fit, oobag_fun = oobag_fun_sroc) #>         bili      protime      albumin        stage          ast       hepato  #>  0.039307097  0.023130244  0.017871691  0.017356387  0.016413172  0.011296050  #>      ascites     alk.phos         chol        edema          trt         trig  #>  0.007645312  0.006685030  0.004775614  0.003533057 -0.001701021 -0.004988692  #>          sex     platelet          age      spiders       copper  #> -0.006098869 -0.007214259 -0.007875281 -0.011003649 -0.011485252"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"i-really-need-to-use","dir":"Articles","previous_headings":"","what":"I really need to use","title":"Out-of-bag predictions and evaluation","text":"can use package whatsoever evaluate --bag predictions. can access final --bag survival predictions aorsf model like : notes remember evaluating --bag error surv_oobag: oobag_pred_horizon input orsf() determines prediction horizon --bag predictions. prediction horizon critical input evaluation predictions time--event outcomes. functions expect predicted risk (.e., 1 - predicted survival), others expect predicted survival. cases, also able use package whatsoever compute negation importance. One exception point riskRegression. experimented riskRegression found functions work expect try run C++. think may due riskRegression’s internal use data.table modification reference, certainty yet.","code":"surv_oobag <- fit$surv_oobag  surv_oobag[1:5, ] #> [1] 0.0251741 0.4413274 0.1982878 0.2144215 0.3474267"},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"background-partial-dependence","dir":"Articles","previous_headings":"","what":"Background: Partial dependence","title":"Compute partial dependence with ORSF","text":"Partial dependence plots show average marginal effect combination features imparts predicted risk. Individual conditional expectation plots narrow focus individual datapoints.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/pd.html","id":"getting-partial-dependence-from-an-aorsf-object","dir":"Articles","previous_headings":"","what":"Getting partial dependence from an aorsf object","title":"Compute partial dependence with ORSF","text":"First fit accelerated ORSF model pbc_orsf, modification Mayo Clinic Primary Biliary Cholangitis data: view partial dependence predicted risk combination blood vessel malformations skin (spiders) urine copper (copper), use orsf_pd_summary. pd_spec argument contains variable values want compute partial dependence . default oobag == TRUE, meaning partial dependence calculated using bag training data. keep set TRUE computing partial dependence using training data. expand_grid == TRUE tells orsf_pd_summary use combinations values pd_spec.  Next lets look Individual Conditional Expectation (ICE). instance dataset represented one line showing change prediction dependent change feature. orsf_pd_ice allows use multiple features, recommended view one time. plot can see data point’s predicted survival changes copper changes.","code":"set.seed(123)  orsf_fit <- orsf(data = pbc_orsf,                  formula = Surv(time, status) ~ . -id,                  n_tree = 2500) pd_spec <- list(spiders = c(\"0\", \"1\"),                 copper = seq(45, 130, by = 10))  pd_data <- orsf_pd_summary(object = orsf_fit,                            pd_spec = pd_spec,                            oobag = TRUE,                            expand_grid = TRUE)  ggplot(pd_data) +  aes(x = copper, y = mean, col = spiders) +  geom_line() +   labs(y = 'Predicted risk',       x = 'Urine Copper',       title = 'Partial dependence of copper and spiders') ice_data <- orsf_pd_ice(object = orsf_fit,                        pd_spec = list(copper = seq(45, 130, by = 10)),                        expand_grid = TRUE)  ggplot(ice_data[id_row %in% c(1:30)]) +  aes(x=copper, y=pred, group=id_row) +  geom_line() +  labs(y = 'Predicted risk',      x = 'Urine Copper',      title = 'Individual conditional expectation of copper',      subtitle = 'Data for 30 patients are shown')"},{"path":"https://bcjaeger.github.io/aorsf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Byron Jaeger. Author, maintainer. Nicholas Pajewski. Contributor. Sawyer Welden. Contributor. Christopher Jackson. Reviewer.","code":""},{"path":"https://bcjaeger.github.io/aorsf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey , Pajewski NM. Accelerated interpretable oblique random survival forests. arXiv e-prints. 2022 Aug 3:arXiv-2208. Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min YI, Mcclure LA, Howard G, Simon N. Oblique Random Survival Forests. Annals Applied Statistics. 13(3): 1847-1883. URL https://doi.org/10.1214/19-AOAS1261 DOI: 10.1214/19-AOAS1261","code":"@Article{,   title = {Accelerated and interpretable oblique random survival forests},   author = {Byron C. Jaeger and Sawyer Welden and Kristin Lenoir and Jaime L. Speiser and Matthew W. Segar and Ambarish Pandey and Nicholas M. Pajewski},   journal = {arXiv},   year = {2022},   url = {https://arxiv.org/abs/2208.01129}, } @Article{,   title = {Oblique Random Survival Forests},   author = {Byron C. Jaeger and D. Leann Long and Dustin M. Long and Mario Sims and Jeff M. Szychowski and Yuan-I Min and Leslie A. Mcclure and George Howard and Noah Simon},   journal = {Annals of Applied Statistics},   year = {2019},   volume = {13},   number = {3},   pages = {1847--1883},   url = {https://doi.org/10.1214/19-AOAS1261}, }"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"aorsf-","dir":"","previous_headings":"","what":"Accelerated Oblique Random Survival Forests","title":"Accelerated Oblique Random Survival Forests","text":"aorsf provides optimized software fit, interpret, make predictions oblique random survival forests (ORSFs).","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"why-aorsf","dir":"","previous_headings":"","what":"Why aorsf?","title":"Accelerated Oblique Random Survival Forests","text":"Hundreds times faster obliqueRSF.1 Fast accurate predictions censored outcomes.2 negation importance, novel technique estimate variable importance ORSFs.2 intuitive API formula based interface. extensive input checks + informative error messages.","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Accelerated Oblique Random Survival Forests","text":"can install development version aorsf GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"bcjaeger/aorsf\")"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Accelerated Oblique Random Survival Forests","text":"orsf() function used fit ORSF ensembles: default routine fit ORSF ensembles ‘accelerated’ ORSF - algorithm based Newton Raphson scoring well benchmarks prediction accuracy computational efficiency.2 addition accelerated ORSF, aorsf can fit broad range ORSF ensembles (see ORSF CONTROL VIGNETTE (yet written)).","code":"library(aorsf)  fit <- orsf(data = pbc_orsf,              formula = Surv(time, status) ~ . - id)"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"inspect","dir":"","previous_headings":"Example","what":"Inspect","title":"Accelerated Oblique Random Survival Forests","text":"Printing output orsf() give descriptive statistics ensemble.","code":"print(fit) #> ---------- Oblique random survival forest #>  #>      Linear combinations: Accelerated #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"variable-importance","dir":"","previous_headings":"Example","what":"Variable importance","title":"Accelerated Oblique Random Survival Forests","text":"importance individual variables can estimated three ways using aorsf: negation: variable assessed separately multiplying variable’s coefficients -1 determining much model’s performance changes. worse model’s performance negating coefficients given variable, important variable. permutation: variable assessed separately randomly permuting variable’s values determining much model’s performance changes. worse model’s performance permuting values given variable, important variable. analysis variance (ANOVA)3: p-value computed coefficient linear combination variables decision tree. Importance individual predictor variable proportion times p-value coefficient < 0.01. can also supply R function estimate --bag error using negation permutation importance (see oob vignette).","code":"orsf_vi_negate(fit) #>           age          bili        copper         stage       protime  #>  0.0151594082  0.0133361117  0.0065638675  0.0060950198  0.0060429256  #>       albumin           sex       spiders       ascites           ast  #>  0.0059387372  0.0058345489  0.0049489477  0.0048447593  0.0035424047  #>         edema        hepato          chol          trig           trt  #>  0.0019498110  0.0006772244 -0.0014065430 -0.0015107314 -0.0019795791  #>      platelet      alk.phos  #> -0.0026568035 -0.0032819337 orsf_vi_permute(fit) #>          bili           age        copper       albumin         stage  #>  1.604501e-02  1.302355e-02  5.261513e-03  3.959158e-03  3.907064e-03  #>       protime       ascites       spiders           sex          trig  #>  3.021463e-03  2.917274e-03  9.897895e-04  4.167535e-04  1.562826e-04  #>         edema        hepato      platelet          chol           trt  #> -4.713284e-05 -1.041884e-04 -1.562826e-04 -4.167535e-04 -6.772244e-04  #>           ast      alk.phos  #> -1.198166e-03 -1.354449e-03 orsf_vi_anova(fit) #>    ascites       bili      edema     copper        age    albumin    protime  #> 0.35348226 0.28289811 0.24968033 0.18991641 0.18409387 0.16945107 0.15829608  #>      stage        ast       chol    spiders        sex     hepato       trig  #> 0.13969986 0.13060480 0.12707469 0.12549740 0.11944046 0.11162362 0.10188777  #>   alk.phos   platelet        trt  #> 0.09502618 0.07333506 0.05134680"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"partial-dependence","dir":"","previous_headings":"Example","what":"Partial dependence","title":"Accelerated Oblique Random Survival Forests","text":"aorsf can generate individual conditional expectation (ICE) partial dependence: ICE expected predicted value ORSF ensemble individual observation. partial dependence multi-variable adjusted expected predicted value ORSF ensemble. use orsf_summarize_uni() show top predictor variables ORSF model expected predicted risk specific values predictors. (term ‘uni’ short univariate.)","code":"orsf_pd_summary(fit, pd_spec = list(bili = c(1:5))) #>     bili      mean        lwr      medn       upr #>    <int>     <num>      <num>     <num>     <num> #> 1:     1 0.2338035 0.01359849 0.1221437 0.8637697 #> 2:     2 0.2864137 0.03772655 0.1806327 0.8944082 #> 3:     3 0.3434524 0.06803086 0.2455590 0.9050007 #> 4:     4 0.3949240 0.09451781 0.3250008 0.9312628 #> 5:     5 0.4372363 0.13161986 0.3747099 0.9377383 # take a look at the top 5 variables  # for continuous predictors, see expected risk at 25/50/75th quantile # for categorical predictors, see expected risk in specified category  orsf_summarize_uni(object = fit, n_variables = 5) #>  #> -- age (VI Rank: 1) ----------------------------- #>  #>         |---------------- risk ----------------| #>   Value      Mean    Median     25th %    75th % #>  <char>     <num>     <num>      <num>     <num> #>      42 0.2711144 0.1371126 0.04265667 0.4737754 #>      50 0.3007558 0.1661609 0.04900273 0.5097726 #>      57 0.3319072 0.2089503 0.07061881 0.5643859 #>  #> -- bili (VI Rank: 2) ---------------------------- #>  #>         |---------------- risk ----------------| #>   Value      Mean    Median     25th %    75th % #>  <char>     <num>     <num>      <num>     <num> #>    0.80 0.2291821 0.1170113 0.04592342 0.3688073 #>     1.4 0.2496643 0.1388448 0.06020376 0.4054563 #>     3.5 0.3705226 0.2927490 0.16222596 0.5511317 #>  #> -- copper (VI Rank: 3) -------------------------- #>  #>         |---------------- risk ----------------| #>   Value      Mean    Median     25th %    75th % #>  <char>     <num>     <num>      <num>     <num> #>      43 0.2674542 0.1443824 0.04631652 0.4825262 #>      74 0.2831247 0.1603985 0.05519124 0.5099932 #>     129 0.3336233 0.2247753 0.10327836 0.5373395 #>  #> -- stage (VI Rank: 4) --------------------------- #>  #>         |---------------- risk ----------------| #>   Value      Mean    Median     25th %    75th % #>  <char>     <num>     <num>      <num>     <num> #>       1 0.2613092 0.1346674 0.04656766 0.4589368 #>       2 0.2715204 0.1358854 0.04618129 0.4782684 #>       3 0.2942587 0.1557578 0.05312238 0.5204041 #>       4 0.3386524 0.2051842 0.08445636 0.5724707 #>  #> -- protime (VI Rank: 5) ------------------------- #>  #>         |---------------- risk ----------------| #>   Value      Mean    Median     25th %    75th % #>  <char>     <num>     <num>      <num>     <num> #>      10 0.2833402 0.1498676 0.04555345 0.5049473 #>      11 0.2960497 0.1602747 0.05321297 0.5378991 #>      11 0.3155702 0.1887370 0.06624194 0.5559068 #>  #>  Predicted risk at time t = 1788 for top 5 predictors"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"comparison-to-existing-software","dir":"","previous_headings":"","what":"Comparison to existing software","title":"Accelerated Oblique Random Survival Forests","text":"Jaeger (2022) describes aorsf detail, summary procedures used tree fitting algorithm general benchmark comparing aorsf obliqueRSF (several learners) terms prediction accuracy computational efficiency.","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Accelerated Oblique Random Survival Forests","text":"Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min YI, Mcclure LA, Howard G, Simon N. Oblique random survival forests. Annals applied statistics 2019 Sep; 13(3):1847-83. DOI: 10.1214/19-AOAS1261 Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey , Pajewski NM. Accelerated interpretable oblique random survival forests. arXiv e-prints 2022 Aug; arXiv-2208. URL: https://arxiv.org/abs/2208.01129 Menze BH, Kelm BM, Splitthoff DN, Koethe U, Hamprecht FA. oblique random forests. Joint European Conference Machine Learning Knowledge Discovery Databases 2011 Sep 4; pp. 453-469. DOI: 10.1007/978-3-642-23783-6_29","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Accelerated Oblique Random Survival Forests","text":"developers aorsf receive financial support Center Biomedical Informatics, Wake Forest University School Medicine. also receive support National Center Advancing Translational Sciences National Institutes Health Award Number UL1TR001420. content solely responsibility authors necessarily represent official views National Institutes Health.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/aorsf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","title":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","text":"Fit, interpret, make predictions oblique random survival forests. Oblique decision trees notoriously slow compared axis based counterparts, 'aorsf' runs fast faster axis-based decision tree algorithms right-censored time--event outcomes.","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/aorsf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","text":"Maintainer: Byron Jaeger bjaeger@wakehealth.edu (ORCID) contributors: Nicholas Pajewski [contributor] Sawyer Welden swelden@wakehealth.edu [contributor] Christopher Jackson chris.jackson@mrc-bsu.cam.ac.uk [reviewer]","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.orsf_summary_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to data.table — as.data.table.orsf_summary_uni","title":"Coerce to data.table — as.data.table.orsf_summary_uni","text":"Convert 'orsf_summary' object data.table object.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.orsf_summary_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to data.table — as.data.table.orsf_summary_uni","text":"","code":"# S3 method for orsf_summary_uni as.data.table(x, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.orsf_summary_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to data.table — as.data.table.orsf_summary_uni","text":"x object class 'orsf_summary_uni' ... used","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.orsf_summary_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to data.table — as.data.table.orsf_summary_uni","text":"data.table","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/as.data.table.orsf_summary_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to data.table — as.data.table.orsf_summary_uni","text":"","code":"library(data.table)  object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  smry <- orsf_summarize_uni(object, n_variables = 3)  as.data.table(smry) #>    variable  importance value      mean      medn        lwr       upr level #> 1:     bili 0.012242134  0.80 0.2280194 0.1228949 0.04530341 0.3645860  <NA> #> 2:     bili 0.012242134   1.4 0.2495272 0.1364309 0.06034931 0.3926691  <NA> #> 3:     bili 0.012242134   3.5 0.3774226 0.2855167 0.17325579 0.5575391  <NA> #> 4:      age 0.010418837    42 0.2761835 0.1327385 0.03815114 0.4685806  <NA> #> 5:      age 0.010418837    50 0.3034464 0.1720877 0.04547162 0.5263803  <NA> #> 6:      age 0.010418837    57 0.3359123 0.2220297 0.06912463 0.5665569  <NA> #> 7:  ascites 0.005574078     0 0.2985046 0.1483300 0.04588687 0.5512119     0 #> 8:  ascites 0.005574078     1 0.4684612 0.3792646 0.26436315 0.6550764     1"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Oblique Random Survival Forest (ORSF) — orsf","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Fit oblique random survival forest","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"","code":"orsf(   data,   formula,   control = orsf_control_fast(),   weights = NULL,   n_tree = 500,   n_split = 5,   n_retry = 3,   mtry = NULL,   leaf_min_events = 1,   leaf_min_obs = 5,   split_min_events = 5,   split_min_obs = 10,   split_min_stat = 3.841459,   oobag_pred = TRUE,   oobag_pred_horizon = NULL,   oobag_eval_every = n_tree,   oobag_fun = NULL,   importance = \"anova\",   tree_seeds = NULL,   attach_data = TRUE,   no_fit = FALSE,   ... )  orsf_train(object)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"data data.frame, tibble, data.table contains relevant variables. formula (formula) response left hand side include time variable, followed status variable, may written inside call Surv (see examples). terms right names predictor variables. control (orsf_control) object returned one orsf_control functions: orsf_control_fast (default) uses single iteration Newton Raphson scoring identify linear combination predictors. orsf_control_cph uses Newton Raphson scoring convergence criteria met. orsf_control_net uses glmnet identify linear combinations predictors, similar Jaeger (2019). orsf_control_custom allows user apply function create linear combinations predictors. weights (numeric vector) Optional. given, input length equal nrow(data). Values weights treated like replication weights, .e., value 2 thing 2 observations data, containing copy corresponding person's data. Use weights cautiously, orsf count number observations events prior growing node tree, higher values weights lead deeper trees. n_tree (integer) number trees grow. Default n_tree = 500. n_split (integer) number cut-points assessed splitting node decision trees. Default n_split = 5. n_retry (integer) node can split, current linear combination inputs unable provide valid split, orsf try new linear combination based different set randomly selected predictors, n_retry times. Default n_retry = 3. Set n_retry = 0 prevent retries. mtry (integer) Number predictors randomly included candidates splitting node. default smallest integer greater square root number total predictors, .e., mtry = ceiling(sqrt(number predictors)) leaf_min_events (integer) minimum number events leaf node. Default leaf_min_events = 1 leaf_min_obs (integer) minimum number observations leaf node. Default leaf_min_obs = 5 split_min_events (integer) minimum number events required node consider splitting . Default split_min_events = 5 split_min_obs (integer) minimum number observations required node consider splitting . Default split_min_obs = 10. split_min_stat (double) minimum test statistic required split node. Default 3.841459 log-rank test, roughly p-value 0.05 oobag_pred (logical) TRUE --bag predictions returned aorsf object. Default TRUE. oobag_pred_horizon (numeric) numeric value indicating time used --bag predictions. Default median observed times, .e., oobag_pred_horizon = median(time). oobag_eval_every (integer) --bag performance ensemble checked every oobag_eval_every trees. , oobag_eval_every = 10, --bag performance checked growing 10th tree, 20th tree, . Default oobag_eval_every = n_tree. oobag_fun (function) used evaluating --bag prediction accuracy every oobag_eval_every trees. oobag_fun = NULL (default), Harrell's C-statistic (1982) used evaluate accuracy. use oobag_fun note following: oobag_fun two inputs: y_mat s_vec y_mat two column matrix first column named 'time', second named 'status' s_vec numeric vector containing predicted survival probabilities. oobag_fun return numeric output length 1 details, see --bag vignette. importance (character) Indicate method variable importance: 'none': variable importance computed. 'anova': compute analysis variance (ANOVA) importance 'negate': compute negation importance 'permute': compute permutation importance details methods, see orsf_vi. tree_seeds (integer vector) Optional. specified, random seeds set using values tree_seeds[]  growing tree . Two forests grown number trees seeds exact --bag samples, making --bag error estimates forests comparable. NULL (default), seeds set training process. attach_data (logical) TRUE, copy training data attached output. helpful plan using functions like orsf_pd_summary orsf_summarize_uni interpret forest using training data. Default TRUE. no_fit (logical) TRUE, model fitting steps defined saved, training initiated. object returned can directly submitted orsf_train() long attach_data TRUE. ... arguments passed methods (currently used). object untrained 'aorsf' object, created setting no_fit = TRUE orsf().","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"accelerated oblique RSF object (aorsf)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"function based highly similar ORSF function obliqueRSF R package. primary difference function runs much faster. speed increase attributable better management memory (.e., unnecessary copies inputs) using Newton Raphson scoring algorithm identify linear combinations inputs rather performing penalized regression using routines glmnet.modified Newton Raphson scoring algorithm function applies adaptation C++ routine developed Terry M. Therneau fits Cox proportional hazards models (see survival::coxph() specifically survival::coxph.fit()).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"details-on-inputs","dir":"Reference","previous_headings":"","what":"Details on inputs","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"formula: response formula can survival object returned Surv function, can also just time status variables. .e., Surv(time, status) ~ . works just like time + status ~ . . symbol right hand side short-hand using variables data (omitting left hand side formula) predictors. order variables left hand side matters. .e., writing status + time ~ . make orsf assume status variable actually time variable. mtry: mtry parameter may temporarily reduced ensure least 2 events per predictor variable. occurs using orsf_control_cph coefficients Newton Raphson scoring algorithm may become unstable number covariates greater equal number events. reduction occur using orsf_control_net. oobag_fun: oobag_fun specified, used compute negation importance permutation importance, role ANOVA importance.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"what-is-an-oblique-decision-tree-","dir":"Reference","previous_headings":"","what":"What is an oblique decision tree?","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Decision trees developed splitting set training data two new subsets, goal similarity within new subsets . splitting process repeated resulting subsets data stopping criterion met. new subsets data formed based single predictor, decision tree said axis-based splits data appear perpendicular axis predictor. linear combinations variables used instead single variable, tree oblique splits data neither parallel right angle axis Figure : Decision trees classification axis-based splitting (left) oblique splitting (right). Cases orange squares; controls purple circles. trees partition predictor space defined variables X1 X2, oblique splits better job separating two classes.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"what-is-a-random-forest-","dir":"Reference","previous_headings":"","what":"What is a random forest?","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Random forests collections de-correlated decision trees. Predictions tree aggregated make ensemble prediction forest. details, see Breiman el, 2001.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"training-out-of-bag-error-and-testing","dir":"Reference","previous_headings":"","what":"Training, out-of-bag error, and testing","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"random forests, tree grown bootstrapped version training set. bootstrap samples selected replacement, bootstrapped training set contains two-thirds instances original training set. '--bag' data instances bootstrapped training set. tree random forest can make predictions --bag data, --bag predictions can aggregated make ensemble --bag prediction. Since --bag data used grow tree, accuracy ensemble --bag predictions approximate generalization error random forest. Generalization error refers error random forest's predictions applied predict outcomes data used train , .e., testing data.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"missing-data","dir":"Reference","previous_headings":"","what":"Missing data","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Data passed aorsf functions allowed missing values. user impute missing values using R package purpose, recipes mlr3pipelines.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Harrell FE, Califf RM, Pryor DB, Lee KL, Rosati RA. Evaluating Yield Medical Tests. JAMA 1982; 247(18):2543-2546. DOI: 10.1001/jama.1982.03320430047030 Breiman L. Random forests. Machine learning 2001 Oct; 45(1):5-32. DOI: 10.1023/:1010933404324 Ishwaran H, Kogalur UB, Blackstone EH, Lauer MS. Random survival forests. Annals applied statistics 2008 Sep; 2(3):841-60. DOI: 10.1214/08-AOAS169 Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min YI, Mcclure LA, Howard G, Simon N. Oblique random survival forests. Annals applied statistics 2019 Sep; 13(3):1847-83. DOI: 10.1214/19-AOAS1261 Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey , Pajewski NM. Accelerated interpretable oblique random survival forests. arXiv e-prints 2022 Aug; arXiv-2208. URL: https://arxiv.org/abs/2208.01129","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"","code":"# standard workflow for model development: fit and interpret  fit <- orsf(pbc_orsf, formula = Surv(time, status) ~ . - id)  print(fit) #> ---------- Oblique random survival forest #>  #>      Linear combinations: Accelerated #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------  # more specific parameters  fit_custom <- orsf(pbc_orsf,                    formula = time + status ~ . - id,                    mtry = 2,                    oobag_pred_horizon = 4000,                    oobag_eval_every = 50)  # 10 oobag error values are computed  b/c oob error # is assessed every 50 trees (50, 100, ..., 500) fit_custom$eval_oobag$stat_values #>            [,1] #>  [1,] 0.8291311 #>  [2,] 0.8273078 #>  [3,] 0.8319442 #>  [4,] 0.8357991 #>  [5,] 0.8374140 #>  [6,] 0.8374661 #>  [7,] 0.8375703 #>  [8,] 0.8389248 #>  [9,] 0.8407481 #> [10,] 0.8403313  # make your own oobag function: # (this is an R implementation of Harrell's C # stat, which is what orsf uses by default)  oobag_c_harrell <- function(y_mat, s_vec){  time = y_mat[, 1]  status = y_mat[, 2]  events = which(status == 1)  k = nrow(y_mat)  total <- 0  concordant <- 0  for(i in events){   if(i+1 <= k){    for(j in seq(i+1, k)){     if(time[j] > time[i]){      total <- total + 1      if(s_vec[j] > s_vec[i]){       concordant <- concordant + 1      } else if (s_vec[j] == s_vec[i]){       concordant <- concordant + 0.5      }     }    }   }  }  concordant / total }  # tree_seeds lets you grow each tree with the seed it corresponds to # (nice way to make sure my R oobag function gives the same answer # as the internal C oobag function)  fit_custom_oobag <- orsf(pbc_orsf,                          formula = Surv(time, status) ~ . - id,                          oobag_fun = oobag_c_harrell,                          n_tree = 10,                          tree_seeds = 1:10)  fit_standard_oobag <- orsf(pbc_orsf,                            formula = Surv(time, status) ~ . - id,                            n_tree = 10,                            tree_seeds = 1:10)  fit_standard_oobag$eval_oobag$stat_values #>           [,1] #> [1,] 0.7689102  fit_custom_oobag$eval_oobag$stat_values #>           [,1] #> [1,] 0.7689102"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":null,"dir":"Reference","previous_headings":"","what":"Cox regression ORSF control — orsf_control_cph","title":"Cox regression ORSF control — orsf_control_cph","text":"Use coefficients proportional hazards model create linear combinations predictor variables fitting orsf model.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cox regression ORSF control — orsf_control_cph","text":"","code":"orsf_control_cph(method = \"efron\", eps = 1e-09, iter_max = 20, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cox regression ORSF control — orsf_control_cph","text":"method (character) character string specifying method tie handling. ties, methods equivalent. Valid options 'breslow' 'efron'. Efron approximation default accurate dealing tied event times similar computational efficiency compared Breslow method. eps (double) using Newton Raphson scoring identify linear combinations inputs, iteration continues algorithm relative change  log partial likelihood less eps, absolute change less sqrt(eps). Must positive. default value 1e-09 used consistency survival::coxph.control. iter_max (integer) iteration continues convergence (see eps ) number attempted iterations equal iter_max. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cox regression ORSF control — orsf_control_cph","text":"object class 'orsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cox regression ORSF control — orsf_control_cph","text":"code  survival package modified make routine. details Cox proportional hazards model, see coxph /Therneau Grambsch (2000).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cox regression ORSF control — orsf_control_cph","text":"Therneau T.M., Grambsch P.M. (2000) Cox Model. : Modeling Survival Data: Extending Cox Model. Statistics Biology Health. Springer, New York, NY. DOI: 10.1007/978-1-4757-3294-8_3","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cox regression ORSF control — orsf_control_cph","text":"","code":"orsf(data = pbc_orsf,      formula = Surv(time, status) ~ . - id,      control = orsf_control_cph()) #> ---------- Oblique random survival forest #>  #>      Linear combinations: Cox regression #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom ORSF control — orsf_control_custom","title":"Custom ORSF control — orsf_control_custom","text":"Custom ORSF control","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom ORSF control — orsf_control_custom","text":"","code":"orsf_control_custom(beta_fun, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom ORSF control — orsf_control_custom","text":"beta_fun (function) function define coefficients used linear combinations predictor variables. beta_fun must accept three inputs named x_node, y_node w_node, expect following types dimensions: x_node (matrix; n rows, p columns) y_node (matrix; n rows, 2 columns) w_node (matrix; n rows, 1 column) addition, beta_fun must return matrix p rows 1 column. conditions met, orsf_control_custom() let know. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom ORSF control — orsf_control_custom","text":"object class 'orsf_control', used input control argument orsf.","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"random-coefficients","dir":"Reference","previous_headings":"","what":"Random coefficients","title":"Custom ORSF control — orsf_control_custom","text":"Want fit extremely randomized oblique survival forests? Great! First, define function supplies random coefficients:   next, plug function orsf_control_custom(), turn passed orsf():","code":"f_rando <- function(x_node, y_node, w_node){  matrix(runif(ncol(x_node)), ncol=1)  } library(aorsf)  fit_rando <- orsf(pbc_orsf,                   Surv(time, status) ~ . - id,                   control = orsf_control_custom(beta_fun = f_rando),                   n_tree = 500)  fit_rando ## ---------- Oblique random survival forest ##  ##      Linear combinations: Custom user function ##           N observations: 276 ##                 N events: 111 ##                  N trees: 500 ##       N predictors total: 17 ##    N predictors per node: 5 ##  Average leaves per tree: 21 ## Min observations in leaf: 5 ##       Min events in leaf: 1 ##           OOB stat value: 0.79 ##            OOB stat type: Harrell's C-statistic ##      Variable importance: anova ##  ## -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"principal-components","dir":"Reference","previous_headings":"","what":"Principal components","title":"Custom ORSF control — orsf_control_custom","text":"Want use principal component analysis identify linear combinations predictors? Follow steps , starting function get coefficients:   pass function orsf_control_custom(), can passed orsf()","code":"# use the second principal component to split the node  f_pca <- function(x_node, y_node, w_node) {   stats::prcomp(x_node, rank. = 2)$rotation[, 2, drop = FALSE] } fit_pca <- orsf(pbc_orsf,                 Surv(time, status) ~ . - id,                 control = orsf_control_custom(beta_fun = f_pca),                 n_tree = 500)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_custom.html","id":"evaluate","dir":"Reference","previous_headings":"","what":"Evaluate","title":"Custom ORSF control — orsf_control_custom","text":"well two customized ORSFs ? Let’s compute indices prediction accuracy based --bag predictions:       PCA ORSF quite well!","code":"library(riskRegression) ## riskRegression version 2022.03.22 library(survival)  risk_preds <- list(rando = 1 - fit_rando$surv_oobag,                     pca = 1 - fit_pca$surv_oobag)  sc <- Score(object = risk_preds,              formula = Surv(time, status) ~ 1,              data = pbc_orsf,              summary = 'IPA',             times = fit_pca$pred_horizon) sc$Brier ##  ## Results by model: ##  ##         model times  Brier  lower  upper    IPA ##        <fctr> <num> <char> <char> <char> <char> ## 1: Null model  1788 20.479 18.089 22.869  0.000 ## 2:      rando  1788 13.709 11.522 15.896 33.060 ## 3:        pca  1788 11.557  9.656 13.458 43.568 ##  ## Results of model comparisons: ##  ##    times  model  reference delta.Brier   lower  upper            p ##    <num> <fctr>     <fctr>      <char>  <char> <char>        <num> ## 1:  1788  rando Null model      -6.770  -8.868 -4.673 2.494862e-10 ## 2:  1788    pca Null model      -8.922 -10.894 -6.950 7.463386e-19 ## 3:  1788    pca      rando      -2.152  -3.134 -1.169 1.768311e-05  ##  ## NOTE: Values are multiplied by 100 and given in %.  ## NOTE: The lower Brier the better, the higher IPA the better."},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Accelerated ORSF control — orsf_control_fast","title":"Accelerated ORSF control — orsf_control_fast","text":"Accelerated ORSF control","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accelerated ORSF control — orsf_control_fast","text":"","code":"orsf_control_fast(method = \"efron\", do_scale = TRUE, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_fast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accelerated ORSF control — orsf_control_fast","text":"method (character) character string specifying method tie handling. ties, methods equivalent. Valid options 'breslow' 'efron'. Efron approximation default accurate dealing tied event times similar computational efficiency compared Breslow method. do_scale (logical) TRUE, values predictors scaled prior instance Newton Raphson scoring, using summary values data current node decision tree. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_fast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accelerated ORSF control — orsf_control_fast","text":"object class 'orsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_fast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accelerated ORSF control — orsf_control_fast","text":"code  survival package modified make routine. Adjust do_scale risk. Setting do_scale = FALSE reduce computation time also make orsf model dependent scale data, default value TRUE. good idea center scale predictors prior running orsf() plan setting do_scale = FALSE.","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_fast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accelerated ORSF control — orsf_control_fast","text":"","code":"orsf(data = pbc_orsf,      formula = Surv(time, status) ~ . - id,      control = orsf_control_fast()) #> ---------- Oblique random survival forest #>  #>      Linear combinations: Accelerated #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Penalized Cox regression ORSF control — orsf_control_net","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"Penalized Cox regression ORSF control","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"","code":"orsf_control_net(alpha = 1/2, df_target = NULL, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"alpha (double) elastic net mixing parameter. value 1 gives lasso penalty, value 0 gives ridge penalty. multiple values alpha given, penalized model fit using alpha value prior splitting node. df_target (integer) Preferred number variables used linear combination. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"object class 'orsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"df_target less mtry, separate argument orsf indicates number variables chosen random prior finding linear combination variables.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"Simon N, Friedman J, Hastie T, Tibshirani R. Regularization paths Cox's proportional hazards model via coordinate descent. Journal statistical software 2011 Mar; 39(5):1. DOI: 10.18637/jss.v039.i05","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Penalized Cox regression ORSF control — orsf_control_net","text":"","code":"# orsf_control_net() is considerably slower than orsf_control_cph(), # The example uses n_tree = 25 so that my examples run faster, # but you should use at least 500 trees in applied settings.  orsf(data = pbc_orsf,      formula = Surv(time, status) ~ . - id,      n_tree = 25,      control = orsf_control_net()) #> ---------- Oblique random survival forest #>  #>      Linear combinations: Penalized Cox regression #>           N observations: 276 #>                 N events: 111 #>                  N trees: 25 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 23 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.60 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF partial dependence — orsf_pd_summary","title":"ORSF partial dependence — orsf_pd_summary","text":"ORSF partial dependence","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF partial dependence — orsf_pd_summary","text":"","code":"orsf_pd_summary(   object,   pd_data = NULL,   pd_spec,   pred_horizon = NULL,   pred_type = \"risk\",   expand_grid = TRUE,   prob_values = c(0.025, 0.5, 0.975),   prob_labels = c(\"lwr\", \"medn\", \"upr\"),   oobag = TRUE,   boundary_checks = TRUE,   ... )  orsf_pd_ice(   object,   pd_data = NULL,   pd_spec,   pred_horizon = NULL,   pred_type = \"risk\",   expand_grid = TRUE,   oobag = TRUE,   boundary_checks = TRUE,   ... )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF partial dependence — orsf_pd_summary","text":"object (orsf_fit) trained oblique random survival forest (see orsf). pd_data (data frame) used compute partial dependence. NULL, training data object used. training data attached object (see attach_data input orsf), error triggered. pd_spec (named list data.frame). pd_spec named list, item list vector values used points partial dependence function. name item list indicate variable modified take corresponding values. pd_spec data.frame, columns indicate variable names, values indicate variable values, partial dependence computed using inputs row. pred_horizon (double) value vector indicating time(s) predictions calibrated . E.g., predicting risk incident heart failure within next 10 years, pred_horizon = 10 pred_type (character) type predictions return. Valid options 'risk' : probability event pred_horizon. 'survival' : 1 - risk. expand_grid (logical) TRUE, partial dependence computed possible combinations inputs pd_spec. FALSE, partial dependence computed variable pd_spec, separately. prob_values (numeric) vector values 0 1, indicating quantiles used summarize partial dependence values set inputs. prob_values length prob_labels. quantiles calculated based predictions object set values indicated pd_spec. prob_labels (character) vector labels length prob_values, label indicating corresponding value prob_values labelled summarized outputs. prob_labels length prob_values. oobag (logical) TRUE, partial dependence computed using bag training data. set oobag = TRUE computing partial dependence using training data object. boundary_checks (logical) TRUE, pd_spec vetted make sure requested values 10th 90th percentile object's training data. FALSE, checks skipped. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF partial dependence — orsf_pd_summary","text":"data.table containing orsf_pd_ice: individual conditional expectation (ICE) values. orsf_pd_summary: summarized ICE values (.e., partial dependence).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF partial dependence — orsf_pd_summary","text":"","code":"fit <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  orsf_pd_summary(fit, pd_spec = list(bili = c(1,2,3,4,5,6)), pred_horizon = 1000) #>    bili      mean         lwr       medn       upr #> 1:    1 0.1362169 0.003077319 0.04990375 0.7406941 #> 2:    2 0.1613232 0.010909159 0.07537906 0.7576353 #> 3:    3 0.1967830 0.027086006 0.11451161 0.8073377 #> 4:    4 0.2258142 0.040869241 0.14290093 0.8382197 #> 5:    5 0.2521213 0.051753881 0.17617167 0.8459702 #> 6:    6 0.2767221 0.078184743 0.20256071 0.8630594  # more points for a plot pd_spec <- list(bili = seq(1, 6, length.out = 20)) data_ice <- orsf_pd_ice(fit, pd_spec = pd_spec, pred_horizon = c(1000))  head(data_ice) #>    id_variable id_row bili        pred #> 1:           1      1    1 0.798147617 #> 2:           1      2    1 0.033281645 #> 3:           1      3    1 0.333617582 #> 4:           1      4    1 0.177329919 #> 5:           1      5    1 0.050092067 #> 6:           1      6    1 0.007807211  library(ggplot2)  ggplot(data_ice) +  aes(x = bili, y = pred, group = id_row) +  geom_line(alpha = 0.4, color = 'grey') +  geom_smooth(aes(group = 1), color = 'black', se = FALSE) +  theme_bw() +  theme(panel.grid = element_blank()) #> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale input data — orsf_scale_cph","title":"Scale input data — orsf_scale_cph","text":"functions exported users may access internal routines used scale inputs orsf_control_cph used.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale input data — orsf_scale_cph","text":"","code":"orsf_scale_cph(x_mat, w_vec = NULL)  orsf_unscale_cph(x_mat)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale input data — orsf_scale_cph","text":"x_mat (numeric matrix) matrix values scaled unscaled. Note orsf_unscale_cph accept x_mat inputs attribute containing transform values, added automatically orsf_scale_cph. w_vec (numeric vector) optional vector weights. weights supplied (default), observations equally weighted. supplied, w_vec must length equal nrow(x_mat).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale input data — orsf_scale_cph","text":"scaled unscaled x_mat.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scale input data — orsf_scale_cph","text":"data transformed first subtracting mean multiplying scale. inverse transform can completed using orsf_unscale_cph dividing column corresponding scale adding mean. values means scales stored attribute output returned orsf_scale_cph (see examples)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale input data — orsf_scale_cph","text":"","code":"x_mat <- as.matrix(pbc_orsf[, c('bili', 'age', 'protime')])  head(x_mat) #>   bili      age protime #> 1 14.5 58.76523    12.2 #> 2  1.1 56.44627    10.6 #> 3  1.4 70.07255    12.0 #> 4  1.8 54.74059    10.3 #> 5  3.4 38.10541    10.9 #> 7  1.0 55.53457     9.7  x_scaled <- orsf_scale_cph(x_mat)  head(x_scaled) #>             bili        age    protime #> [1,]  3.77308887  1.0412574  1.9694656 #> [2,] -0.75476469  0.7719344 -0.1822316 #> [3,] -0.65339483  2.3544852  1.7005035 #> [4,] -0.51823502  0.5738373 -0.5856748 #> [5,]  0.02240421 -1.3581657  0.2212116 #> [6,] -0.78855464  0.6660494 -1.3925613  attributes(x_scaled) # note the transforms attribute #> $dim #> [1] 276   3 #>  #> $dimnames #> $dimnames[[1]] #> NULL #>  #> $dimnames[[2]] #> [1] \"bili\"    \"age\"     \"protime\" #>  #>  #> $transforms #>           mean     scale #> [1,]  3.333696 0.3378995 #> [2,] 49.799661 0.1161396 #> [3,] 10.735507 1.3448108 #>   x_unscaled <- orsf_unscale_cph(x_scaled)  head(x_unscaled) #>      bili      age protime #> [1,] 14.5 58.76523    12.2 #> [2,]  1.1 56.44627    10.6 #> [3,]  1.4 70.07255    12.0 #> [4,]  1.8 54.74059    10.3 #> [5,]  3.4 38.10541    10.9 #> [6,]  1.0 55.53457     9.7  # numeric difference in x_mat and x_unscaled should be practically 0 max(abs(x_mat - x_unscaled)) #> [1] 8.881784e-16"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF summary; univariate — orsf_summarize_uni","title":"ORSF summary; univariate — orsf_summarize_uni","text":"Summarize univariate information ORSF object","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF summary; univariate — orsf_summarize_uni","text":"","code":"orsf_summarize_uni(   object,   n_variables = NULL,   pred_horizon = NULL,   pred_type = \"risk\",   importance = \"negate\",   ... )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF summary; univariate — orsf_summarize_uni","text":"object (orsf_fit) trained oblique random survival forest (see orsf). n_variables (integer) many variables summarized? Setting input lower number reduce computation time. pred_horizon (double) value vector indicating time(s) predictions calibrated . E.g., predicting risk incident heart failure within next 10 years, pred_horizon = 10 pred_type (character) type predictions return. Valid options 'risk' : probability event pred_horizon. 'survival' : 1 - risk. importance (character) Indicate method variable importance: 'none': variable importance computed. 'anova': compute analysis variance (ANOVA) importance 'negate': compute negation importance 'permute': compute permutation importance details methods, see orsf_vi. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF summary; univariate — orsf_summarize_uni","text":"object class 'orsf_summary', includes data importance individual predictors. expected values predictions specific values predictors.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORSF summary; univariate — orsf_summarize_uni","text":"pred_horizon left unspecified, median value time--event variable object's training data used. recommended always specify prediction horizon, median time may especially meaningful horizon compute predicted risk values . object already variable importance values, can safely bypass computation variable importance function setting importance = 'none'.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF summary; univariate — orsf_summarize_uni","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  # since anova importance was used to make object, we can # safely say importance = 'none' and skip computation of # variable importance while running orsf_summarize_uni  orsf_summarize_uni(object, n_variables = 3, importance = 'none') #>  #> -- ascites (VI Rank: 1) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2973308 0.1536523 0.04830925 0.5398081 #>      1 0.4760194 0.3886753 0.27487663 0.6635797 #>  #> -- bili (VI Rank: 2) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2320047 0.1211737 0.04509070 0.3733945 #>    1.4 0.2543067 0.1419225 0.06080652 0.4061308 #>    3.5 0.3746967 0.2874233 0.16846530 0.5409863 #>  #> -- edema (VI Rank: 3) -------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2924741 0.1511942 0.04800584 0.5368455 #>    0.5 0.3634655 0.2529687 0.10320471 0.6324423 #>      1 0.4424057 0.3419058 0.23338169 0.6664307 #>  #>  Predicted risk at time t = 1788 for top 3 predictors   # however, if we want to summarize object according to variables # ranked by negation importance, we can compute negation importance # within orsf_summarize_uni() as follows:  orsf_summarize_uni(object, n_variables = 3, importance = 'negate') #>  #> -- bili (VI Rank: 1) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2320047 0.1211737 0.04509070 0.3733945 #>    1.4 0.2543067 0.1419225 0.06080652 0.4061308 #>    3.5 0.3746967 0.2874233 0.16846530 0.5409863 #>  #> -- age (VI Rank: 2) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     42 0.2730543 0.1344243 0.04331036 0.4573687 #>     50 0.3008307 0.1694688 0.04926503 0.5235178 #>     57 0.3342928 0.2251682 0.06666706 0.5710960 #>  #> -- copper (VI Rank: 3) ------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     43 0.2660427 0.1387941 0.04466228 0.4751739 #>     74 0.2834235 0.1471776 0.05799435 0.4909234 #>    129 0.3404706 0.2319964 0.11242248 0.5559582 #>  #>  Predicted risk at time t = 1788 for top 3 predictors"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate training time — orsf_time_to_train","title":"Estimate training time — orsf_time_to_train","text":"Estimate training time","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate training time — orsf_time_to_train","text":"","code":"orsf_time_to_train(object, n_tree_subset = 50)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate training time — orsf_time_to_train","text":"object untrained aorsf object n_tree_subset (integer)  many trees fit order estimate time needed train object. default value 50, usually gives good enough approximation.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate training time — orsf_time_to_train","text":"difftime object.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate training time — orsf_time_to_train","text":"","code":"# specify but do not train the model by setting no_fit = TRUE. object <- orsf(pbc_orsf, Surv(time, status) ~ . - id,                n_tree = 500, no_fit = TRUE)  # grow 50 trees to approximate the time it will take to grow 500 trees time_estimated <- orsf_time_to_train(object, n_tree_subset = 50)  print(time_estimated) #> Time difference of 0.5103841 secs  # let's see how close the approximation was time_true_start <- Sys.time() fit <- orsf_train(object) time_true_stop <- Sys.time()  time_true <- time_true_stop - time_true_start  print(time_true) #> Time difference of 0.5033474 secs  # error abs(time_true - time_estimated) #> Time difference of 0.007036686 secs"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF variable importance — orsf_vi","title":"ORSF variable importance — orsf_vi","text":"Estimate importance individual variables using oblique random survival forests.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF variable importance — orsf_vi","text":"","code":"orsf_vi(object, group_factors = TRUE, importance = NULL, oobag_fun = NULL, ...)  orsf_vi_negate(object, group_factors = TRUE, oobag_fun = NULL, ...)  orsf_vi_permute(object, group_factors = TRUE, oobag_fun = NULL, ...)  orsf_vi_anova(object, group_factors = TRUE, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF variable importance — orsf_vi","text":"object (orsf_fit) trained oblique random survival forest (see orsf). group_factors (logical) TRUE, importance factor variables reported overall aggregating importance individual levels factor. FALSE, importance individual factor levels returned. importance (character) Indicate method variable importance: 'anova': compute analysis variance (ANOVA) importance 'negate': compute negation importance 'permute': compute permutation importance oobag_fun (function) used evaluating --bag prediction accuracy negating coefficients (importance = 'negate') permuting values predictor (importance = 'permute') oobag_fun = NULL (default), Harrell's C-statistic (1982) used evaluate accuracy. use oobag_fun note following: oobag_fun two inputs: y_mat s_vec y_mat two column matrix first column named 'time', second named 'status' s_vec numeric vector containing predicted survival probabilities. oobag_fun return numeric output length 1 oobag_fun used created object initial value --bag prediction accuracy consistent values computed variable importance estimated. details, see --bag vignette. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF variable importance — orsf_vi","text":"orsf_vi functions return named numeric vector. Names vector predictor variables used object Values vector estimated importance given predictor. returned vector sorted highest lowest value, higher values indicating higher importance.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORSF variable importance — orsf_vi","text":"orsf_fit object fitted importance = 'anova', 'negate', 'permute', output vector importance values based requested type importance. However, may still want call orsf_vi() output want group factor levels one overall importance value. orsf_vi() general purpose function extract compute variable importance estimates 'orsf_fit' object (see orsf). orsf_vi_negate(), orsf_vi_permute(), orsf_vi_anova() wrappers orsf_vi(). way functions work depends whether object given already variable importance estimates (see examples).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"variable-importance-methods","dir":"Reference","previous_headings":"","what":"Variable importance methods","title":"ORSF variable importance — orsf_vi","text":"negation importance: variable assessed separately multiplying variable's coefficients -1 determining much model's performance changes. worse model's performance negating coefficients given variable, important variable. permutation importance: variable assessed separately randomly permuting variable's values determining much model's performance changes. worse model's performance permuting values given variable, important variable. analysis variance (ANOVA) importance: computes p-value coefficient linear combination variables decision tree oblique random forest. Following definition proposed Menze et al, ANOVA importance individual predictor variable proportion times p-value coefficient < 0.01.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ORSF variable importance — orsf_vi","text":"Harrell FE, Califf RM, Pryor DB, Lee KL, Rosati RA. Evaluating Yield Medical Tests. JAMA 1982; 247(18):2543-2546. DOI: 10.1001/jama.1982.03320430047030 Breiman L. Random forests. Machine learning 2001 Oct; 45(1):5-32. DOI: 10.1023/:1010933404324 Menze BH, Kelm BM, Splitthoff DN, Koethe U, Hamprecht FA. oblique random forests. Joint European Conference Machine Learning Knowledge Discovery Databases 2011 Sep 4; pp. 453-469. DOI: 10.1007/978-3-642-23783-6_29 Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey , Pajewski NM. Accelerated interpretable oblique random survival forests. arXiv e-prints 2022 Aug; arXiv-2208. URL: https://arxiv.org/abs/2208.01129","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF variable importance — orsf_vi","text":"","code":"# first example ----------------------------------------------------------  # fit an ORSF using default values, and get the default vi (anova)  fit_default <- orsf(pbc_orsf,                     Surv(time, status) ~ . - id)  # the printed output will indicate the type of vi used  fit_default #> ---------- Oblique random survival forest #>  #>      Linear combinations: Accelerated #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 24 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------  # the 'raw' vi values are stored in fit_default:  fit_default$importance #>     edema_1   ascites_1        bili      copper         age     albumin  #>  0.39486139  0.36765722  0.28108673  0.19794953  0.18381026  0.16884475  #>     protime       stage   edema_0.5        chol   spiders_1       sex_f  #>  0.15291005  0.14971591  0.13615665  0.13108519  0.13073671  0.11851332  #>         ast        trig    hepato_1    alk.phos    platelet trt_placebo  #>  0.11508351  0.10486599  0.10436668  0.09635753  0.07809278  0.06185286   # these are 'raw' because the vi values for factors have not been # aggregated into a single vi value. Currently there is one vi value # for k-1 levels of a k level factor. For example, you can see edema_1 # and edema_0.5 in the importance values above because edema is a factor # variable with levels of 0, 0.5, and 1. To get aggregated values of vi # across all levels of each factor, just call orsf_vi with group_factors # set to TRUE (the default)  orsf_vi(fit_default) #>    ascites       bili      edema     copper        age    albumin    protime  #> 0.36765722 0.28108673 0.24087047 0.19794953 0.18381026 0.16884475 0.15291005  #>      stage       chol    spiders        sex        ast       trig     hepato  #> 0.14971591 0.13108519 0.13073671 0.11851332 0.11508351 0.10486599 0.10436668  #>   alk.phos   platelet        trt  #> 0.09635753 0.07809278 0.06185286   # orsf_vi knows that fit_default was fit using anova vi # to verify this, see that orsf_vi and orsf_vi_anova are the same  orsf_vi_anova(fit_default) #>    ascites       bili      edema     copper        age    albumin    protime  #> 0.36765722 0.28108673 0.24087047 0.19794953 0.18381026 0.16884475 0.15291005  #>      stage       chol    spiders        sex        ast       trig     hepato  #> 0.14971591 0.13108519 0.13073671 0.11851332 0.11508351 0.10486599 0.10436668  #>   alk.phos   platelet        trt  #> 0.09635753 0.07809278 0.06185286    # second example ---------------------------------------------------------  # fit an ORSF without vi, then add vi later  fit_no_vi <- orsf(pbc_orsf,                   Surv(time, status) ~ . - id,                   importance = 'none')  # Note: you can't call orsf_vi_anova() on fit_no_vi because anova # VI can only be computed while the forest is being grown.  orsf_vi_negate(fit_no_vi) #>          bili           age       ascites        copper           sex  #>  0.0147426547  0.0094290477  0.0060429256  0.0059908314  0.0059387372  #>         stage       protime         edema       spiders           ast  #>  0.0051573244  0.0038028756  0.0030946427  0.0028130861  0.0027609919  #>          chol        hepato      platelet          trig           trt  #>  0.0019274849  0.0012502605  0.0007814128  0.0001562826 -0.0015628256  #>      alk.phos       albumin  #> -0.0018753907 -0.0019795791   orsf_vi_permute(fit_no_vi) #>          bili           age        copper       ascites         stage  #>  0.0149510315  0.0075536570  0.0053657012  0.0043759116  0.0037507814  #>       protime       albumin           ast       spiders        hepato  #>  0.0032298395  0.0024484268  0.0021358616  0.0016149198  0.0012502605  #>         edema      platelet      alk.phos          chol           sex  #>  0.0011522738  0.0007814128  0.0004167535 -0.0005730360 -0.0012502605  #>          trig           trt  #> -0.0013023547 -0.0014065430   # third example ----------------------------------------------------------  # fit an ORSF and compute vi at the same time  fit_permute_vi <- orsf(pbc_orsf,                        Surv(time, status) ~ . - id,                        importance = 'permute')  # get the vi instantly (i.e., it doesn't need to be computed again)  orsf_vi_permute(fit_permute_vi) #>          bili           age       albumin         stage       spiders  #>  0.0117732861  0.0109918733  0.0050010419  0.0032819337  0.0032298395  #>       protime       ascites        copper      platelet         edema  #>  0.0027609919  0.0022921442  0.0015107314  0.0008335070  0.0007243573  #>        hepato          chol      alk.phos           trt          trig  #>  0.0004688477  0.0003646593  0.0003125651 -0.0011460721 -0.0015107314  #>           sex           ast  #> -0.0024484268 -0.0030735570   # You can still get negation vi from this fit, but it needs to be computed  orsf_vi_negate(fit_permute_vi) #>          bili           age       protime       ascites        copper  #>  0.0133882059  0.0122421338  0.0061992082  0.0058866431  0.0055219837  #>       spiders         stage         edema           sex        hepato  #>  0.0040112523  0.0032819337  0.0030065788  0.0017712023  0.0013023547  #>           ast           trt      alk.phos      platelet       albumin  #>  0.0006251302 -0.0003125651 -0.0015107314 -0.0023963326 -0.0028130861  #>          trig          chol  #> -0.0028651802 -0.0036986872"},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"data light modification survival::pbc data. modifications :","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"","code":"pbc_orsf"},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"data frame 276 rows 20 variables: id case number time number days registration earlier death, transplantion, study analysis July, 1986 status status endpoint, 0 censored transplant, 1 dead trt randomized treatment group: D-penicillmain placebo age years sex m/f ascites presence ascites hepato presence hepatomegaly enlarged liver spiders blood vessel malformations skin edema 0 edema, 0.5 untreated successfully treated, 1 edema despite diuretic therapy bili serum bilirubin (mg/dl) chol serum cholesterol (mg/dl) albumin serum albumin (g/dl) copper urine copper (ug/day) alk.phos alkaline phosphotase (U/liter) ast aspartate aminotransferase, called SGOT (U/ml) trig triglycerides (mg/dl) platelet platelet count protime standardized blood clotting time stage histologic stage disease (needs biopsy)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"T Therneau P Grambsch (2000), Modeling Survival Data: Extending Cox Model, Springer-Verlag, New York. ISBN: 0-387-98784-3.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"removed rows missing data converted status 0 censor transplant, 1 dead converted stage ordered factor. converted trt, ascites, hepato, spiders, edema factors.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.orsf_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute predictions using ORSF — predict.orsf_fit","title":"Compute predictions using ORSF — predict.orsf_fit","text":"Predicted risk survival (someday also hazard mortality) ORSF model.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.orsf_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute predictions using ORSF — predict.orsf_fit","text":"","code":"# S3 method for orsf_fit predict(object, new_data, pred_horizon, pred_type = \"risk\", ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.orsf_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute predictions using ORSF — predict.orsf_fit","text":"object (orsf_fit) trained oblique random survival forest (see orsf). new_data data.frame, tibble, data.table compute predictions . Missing data currently allowed pred_horizon (double) value vector indicating time(s) predictions calibrated . E.g., predicting risk incident heart failure within next 10 years, pred_horizon = 10 pred_type (character) type predictions return. Valid options 'risk' : probability event pred_horizon. 'survival' : 1 - risk. ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.orsf_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute predictions using ORSF — predict.orsf_fit","text":"matrix predictions. Column j matrix corresponds value j pred_horizon. Row matrix corresponds row new_data.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.orsf_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute predictions using ORSF — predict.orsf_fit","text":"new_data must columns equivalent types data used train object. Also, factors new_data must levels data used train object. pred_horizon values must exceed maximum follow-time object's training data. Also, pred_horizon values must entered ascending order.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.orsf_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute predictions using ORSF — predict.orsf_fit","text":"","code":"# indices of data used for training the model train <- seq(1, nrow(pbc_orsf), by = 2)  # indices of data used to test the trained model. test <- seq(2, nrow(pbc_orsf), by = 2)  fit <- orsf(pbc_orsf[train, ], Surv(time, status) ~ . - id)  preds <- predict(fit,                  new_data = pbc_orsf[test, ],                  pred_horizon = c(500, 1500, 2500))  head(preds) #>             [,1]       [,2]       [,3] #> [1,] 0.045460840 0.12739569 0.31790007 #> [2,] 0.182410821 0.43037386 0.59370344 #> [3,] 0.010514769 0.07821126 0.22512083 #> [4,] 0.066678875 0.20516163 0.40843071 #> [5,] 0.068061695 0.13451958 0.25178886 #> [6,] 0.007898066 0.01599684 0.09260083"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect your ORSF model — print.orsf_fit","title":"Inspect your ORSF model — print.orsf_fit","text":"Printing ORSF model tells : Linear combinations: identified? N observations: Number rows training data N events: Number events training data N trees: Number trees forest N predictors total: Total number columns predictor matrix N predictors per node: Number variables used linear combinations Average leaves per tree: proxy depth trees Min observations leaf: See leaf_min_obs orsf Min events leaf: See leaf_min_events orsf OOB stat value: --bag error fitting trees OOB stat type: --bag error computed? Variable importance: variable importance computed?","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect your ORSF model — print.orsf_fit","text":"","code":"# S3 method for orsf_fit print(x, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect your ORSF model — print.orsf_fit","text":"x (orsf_fit) oblique random survival forest (ORSF; see orsf). ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect your ORSF model — print.orsf_fit","text":"x, invisibly.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect your ORSF model — print.orsf_fit","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id, n_tree = 5)  print(object) #> ---------- Oblique random survival forest #>  #>      Linear combinations: Accelerated #>           N observations: 276 #>                 N events: 111 #>                  N trees: 5 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 26 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.71 #>            OOB stat type: Harrell's C-statistic #>      Variable importance: anova #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_summary_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ORSF summary — print.orsf_summary_uni","title":"Print ORSF summary — print.orsf_summary_uni","text":"Print ORSF summary","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_summary_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print ORSF summary — print.orsf_summary_uni","text":"","code":"# S3 method for orsf_summary_uni print(x, n_variables = NULL, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_summary_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ORSF summary — print.orsf_summary_uni","text":"x object class 'orsf_summary' n_variables number variables print ... arguments passed methods (currently used).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_summary_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ORSF summary — print.orsf_summary_uni","text":"nothing - output printed console.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.orsf_summary_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print ORSF summary — print.orsf_summary_uni","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  smry <- orsf_summarize_uni(object, n_variables = 3)  print(smry) #>  #> -- bili (VI Rank: 1) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2292896 0.1135878 0.04426421 0.3766186 #>    1.4 0.2512530 0.1311964 0.06109159 0.4044034 #>    3.5 0.3751379 0.2894138 0.16879441 0.5593350 #>  #> -- age (VI Rank: 2) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     42 0.2720464 0.1439095 0.04043481 0.4587159 #>     50 0.3011174 0.1697739 0.04916768 0.5358868 #>     57 0.3336824 0.2192499 0.07268707 0.5717591 #>  #> -- ascites (VI Rank: 3) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2955320 0.1597505 0.04791208 0.5388332 #>      1 0.4741342 0.3901719 0.27277267 0.6573149 #>  #>  Predicted risk at time t = 1788 for top 3 predictors"},{"path":"https://bcjaeger.github.io/aorsf/news/index.html","id":"aorsf-0009000","dir":"Changelog","previous_headings":"","what":"aorsf 0.0.0.9000","title":"aorsf 0.0.0.9000","text":"Core features implemented: fit, interpret, predict using oblique random survival forests. Vignettes + Readme covering usage core features. Website hosted GitHub pages, managed pkgdown.","code":""},{"path":"https://bcjaeger.github.io/aorsf/news/index.html","id":"aorsf-001","dir":"Changelog","previous_headings":"","what":"aorsf 0.0.1","title":"aorsf 0.0.1","text":"Added orsf_control_custom(), allows users submit custom functions identifying linear combinations inputs growing oblique decision trees. Added weights input orsf, allowing users fit orsf specific data training set.","code":""}]
